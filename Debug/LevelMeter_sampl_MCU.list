
LevelMeter_sampl_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080048ec  080048ec  000058ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080049bc  080049bc  000059bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080049c0  080049c0  000059c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20000000  080049c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  2000000c  080049cd  0000600c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000148  080049cd  00006148  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00006009  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fb9d  00000000  00000000  0000603f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000218d  00000000  00000000  00015bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d98  00000000  00000000  00017d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000a40  00000000  00000000  00018b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000355b5  00000000  00000000  00019548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001122a  00000000  00000000  0004eafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001536ae  00000000  00000000  0005fd27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b33d5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003848  00000000  00000000  001b3418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005f  00000000  00000000  001b6c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	080048d4 	.word	0x080048d4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	080048d4 	.word	0x080048d4

08000278 <ADF4351_setDATA>:
#define ADF4351_BITPOS_FDBCKSEL			23
#define ADF4351_BITPOS_REG5_RESERVED	19
#define ADF4351_BITPOS_LDPINMODE		22

void ADF4351_setDATA(byte level)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADF4351_DATA_PORT, ADF4351_DATA_PIN, level);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	461a      	mov	r2, r3
 8000286:	2101      	movs	r1, #1
 8000288:	4803      	ldr	r0, [pc, #12]	@ (8000298 <ADF4351_setDATA+0x20>)
 800028a:	f001 ff6d 	bl	8002168 <HAL_GPIO_WritePin>
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	42020000 	.word	0x42020000

0800029c <ADF4351_setCLK>:
void ADF4351_setCLK(byte level)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADF4351_CLK_PORT, ADF4351_CLK_PIN, level);
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	461a      	mov	r2, r3
 80002aa:	2102      	movs	r1, #2
 80002ac:	4803      	ldr	r0, [pc, #12]	@ (80002bc <ADF4351_setCLK+0x20>)
 80002ae:	f001 ff5b 	bl	8002168 <HAL_GPIO_WritePin>
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	42020000 	.word	0x42020000

080002c0 <ADF4351_setLE>:
void ADF4351_setLE(byte level)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADF4351_LE_PORT, ADF4351_LE_PIN, level);
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	461a      	mov	r2, r3
 80002ce:	2108      	movs	r1, #8
 80002d0:	4803      	ldr	r0, [pc, #12]	@ (80002e0 <ADF4351_setLE+0x20>)
 80002d2:	f001 ff49 	bl	8002168 <HAL_GPIO_WritePin>
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	42020800 	.word	0x42020800

080002e4 <ADF4351_addSubReg>:
void ADF4351_addSubReg(uint* reg, uint subReg, byte pos)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	4613      	mov	r3, r2
 80002f0:	71fb      	strb	r3, [r7, #7]
	subReg <<= pos;
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	60bb      	str	r3, [r7, #8]
	*reg |= subReg;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	431a      	orrs	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <ADF4351_initPorts>:
void ADF4351_initPorts()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_initStruct = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]

	//HAL_GPIO_WritePin(ADF4351_MUXOUT_PORT, ADF4351_MUXOUT_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(ADF4351_LD_PORT, ADF4351_LD_PIN, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2104      	movs	r1, #4
 800032c:	4825      	ldr	r0, [pc, #148]	@ (80003c4 <ADF4351_initPorts+0xb0>)
 800032e:	f001 ff1b 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF4351_CLK_PORT, ADF4351_CLK_PIN, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2102      	movs	r1, #2
 8000336:	4823      	ldr	r0, [pc, #140]	@ (80003c4 <ADF4351_initPorts+0xb0>)
 8000338:	f001 ff16 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF4351_DATA_PORT, ADF4351_DATA_PIN, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4820      	ldr	r0, [pc, #128]	@ (80003c4 <ADF4351_initPorts+0xb0>)
 8000342:	f001 ff11 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF4351_LE_PORT, ADF4351_LE_PIN, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2108      	movs	r1, #8
 800034a:	481f      	ldr	r0, [pc, #124]	@ (80003c8 <ADF4351_initPorts+0xb4>)
 800034c:	f001 ff0c 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF4351_CE_PORT, ADF4351_CE_PIN, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	481c      	ldr	r0, [pc, #112]	@ (80003c8 <ADF4351_initPorts+0xb4>)
 8000356:	f001 ff07 	bl	8002168 <HAL_GPIO_WritePin>

	GPIO_initStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035a:	2302      	movs	r3, #2
 800035c:	613b      	str	r3, [r7, #16]
	GPIO_initStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]

	/*GPIO_initStruct.Pin = ADF4351_MUXOUT_PIN;
	GPIO_initStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(ADF4351_MUXOUT_PORT, &GPIO_initStruct);*/

	GPIO_initStruct.Pin = ADF4351_LD_PIN;
 8000362:	2304      	movs	r3, #4
 8000364:	607b      	str	r3, [r7, #4]
	GPIO_initStruct.Mode = GPIO_MODE_INPUT;
 8000366:	2300      	movs	r3, #0
 8000368:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ADF4351_LD_PORT, &GPIO_initStruct);
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4619      	mov	r1, r3
 800036e:	4815      	ldr	r0, [pc, #84]	@ (80003c4 <ADF4351_initPorts+0xb0>)
 8000370:	f001 fd22 	bl	8001db8 <HAL_GPIO_Init>

	GPIO_initStruct.Pin = ADF4351_CLK_PIN;
 8000374:	2302      	movs	r3, #2
 8000376:	607b      	str	r3, [r7, #4]
	GPIO_initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000378:	2301      	movs	r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ADF4351_CLK_PORT, &GPIO_initStruct);
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4619      	mov	r1, r3
 8000380:	4810      	ldr	r0, [pc, #64]	@ (80003c4 <ADF4351_initPorts+0xb0>)
 8000382:	f001 fd19 	bl	8001db8 <HAL_GPIO_Init>

	GPIO_initStruct.Pin = ADF4351_DATA_PIN;
 8000386:	2301      	movs	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
	GPIO_initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ADF4351_DATA_PORT, &GPIO_initStruct);
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4619      	mov	r1, r3
 8000392:	480c      	ldr	r0, [pc, #48]	@ (80003c4 <ADF4351_initPorts+0xb0>)
 8000394:	f001 fd10 	bl	8001db8 <HAL_GPIO_Init>

	GPIO_initStruct.Pin = ADF4351_LE_PIN;
 8000398:	2308      	movs	r3, #8
 800039a:	607b      	str	r3, [r7, #4]
	GPIO_initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ADF4351_LE_PORT, &GPIO_initStruct);
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4619      	mov	r1, r3
 80003a4:	4808      	ldr	r0, [pc, #32]	@ (80003c8 <ADF4351_initPorts+0xb4>)
 80003a6:	f001 fd07 	bl	8001db8 <HAL_GPIO_Init>

	GPIO_initStruct.Pin = ADF4351_CE_PIN;
 80003aa:	2304      	movs	r3, #4
 80003ac:	607b      	str	r3, [r7, #4]
	GPIO_initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ADF4351_CE_PORT, &GPIO_initStruct);
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4804      	ldr	r0, [pc, #16]	@ (80003c8 <ADF4351_initPorts+0xb4>)
 80003b8:	f001 fcfe 	bl	8001db8 <HAL_GPIO_Init>
}
 80003bc:	bf00      	nop
 80003be:	3718      	adds	r7, #24
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	42020000 	.word	0x42020000
 80003c8:	42020800 	.word	0x42020800

080003cc <ADF4351_init>:
void ADF4351_init()
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	ADF4351_initPorts();
 80003d0:	f7ff ffa0 	bl	8000314 <ADF4351_initPorts>
	ADF4351_setLE(PULSE_HIGH);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f7ff ff73 	bl	80002c0 <ADF4351_setLE>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}

080003de <ADF4351_sendData>:
void ADF4351_sendData(uint data)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	b084      	sub	sp, #16
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
	ADF4351_setCLK(PULSE_LOW);
 80003e6:	2000      	movs	r0, #0
 80003e8:	f7ff ff58 	bl	800029c <ADF4351_setCLK>
	ADF4351_setLE(PULSE_LOW);
 80003ec:	2000      	movs	r0, #0
 80003ee:	f7ff ff67 	bl	80002c0 <ADF4351_setLE>
	__asm__("NOP");
 80003f2:	bf00      	nop
	for (byte i = 0; i < 32; i++) {
 80003f4:	2300      	movs	r3, #0
 80003f6:	73fb      	strb	r3, [r7, #15]
 80003f8:	e016      	b.n	8000428 <ADF4351_sendData+0x4a>
		if (data & MASK_UINT_HIGH_BIT) {
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	da03      	bge.n	8000408 <ADF4351_sendData+0x2a>
			ADF4351_setDATA(PULSE_HIGH);
 8000400:	2001      	movs	r0, #1
 8000402:	f7ff ff39 	bl	8000278 <ADF4351_setDATA>
 8000406:	e002      	b.n	800040e <ADF4351_sendData+0x30>
		} else {
			ADF4351_setDATA(PULSE_LOW);
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff ff35 	bl	8000278 <ADF4351_setDATA>
		}
		ADF4351_setCLK(PULSE_HIGH);
 800040e:	2001      	movs	r0, #1
 8000410:	f7ff ff44 	bl	800029c <ADF4351_setCLK>
		data <<= 1;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	607b      	str	r3, [r7, #4]
		__asm__("NOP");
 800041a:	bf00      	nop
		ADF4351_setCLK(PULSE_LOW);
 800041c:	2000      	movs	r0, #0
 800041e:	f7ff ff3d 	bl	800029c <ADF4351_setCLK>
	for (byte i = 0; i < 32; i++) {
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	3301      	adds	r3, #1
 8000426:	73fb      	strb	r3, [r7, #15]
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	2b1f      	cmp	r3, #31
 800042c:	d9e5      	bls.n	80003fa <ADF4351_sendData+0x1c>
	}
	ADF4351_setLE(PULSE_HIGH);
 800042e:	2001      	movs	r0, #1
 8000430:	f7ff ff46 	bl	80002c0 <ADF4351_setLE>
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <ADF4351_setRegister0>:
void ADF4351_setRegister0(dByte fracValue, dByte intValue)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	460a      	mov	r2, r1
 8000446:	80fb      	strh	r3, [r7, #6]
 8000448:	4613      	mov	r3, r2
 800044a:	80bb      	strh	r3, [r7, #4]
	intValue &= MASK_16BIT;
	fracValue &= MASK_12BIT;
 800044c:	88fb      	ldrh	r3, [r7, #6]
 800044e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000452:	80fb      	strh	r3, [r7, #6]
	uint data = ADF4351_CTRL_BITS_REG0;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
	ADF4351_addSubReg(&data, (uint)fracValue, ADF4351_BITPOS_FRACVALUE);
 8000458:	88f9      	ldrh	r1, [r7, #6]
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	2203      	movs	r2, #3
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff3f 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)intValue, ADF4351_BITPOS_INTVALUE);
 8000466:	88b9      	ldrh	r1, [r7, #4]
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	220f      	movs	r2, #15
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff38 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffb1 	bl	80003de <ADF4351_sendData>
}
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <ADF4351_setRegister1>:
void ADF4351_setRegister1(dByte modValue, dByte phaseValue, byte psc, _bool phaseAdj)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	4604      	mov	r4, r0
 800048c:	4608      	mov	r0, r1
 800048e:	4611      	mov	r1, r2
 8000490:	461a      	mov	r2, r3
 8000492:	4623      	mov	r3, r4
 8000494:	80fb      	strh	r3, [r7, #6]
 8000496:	4603      	mov	r3, r0
 8000498:	80bb      	strh	r3, [r7, #4]
 800049a:	460b      	mov	r3, r1
 800049c:	70fb      	strb	r3, [r7, #3]
 800049e:	4613      	mov	r3, r2
 80004a0:	70bb      	strb	r3, [r7, #2]
	modValue &= MASK_12BIT;
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004a8:	80fb      	strh	r3, [r7, #6]
	phaseValue &= MASK_12BIT;
 80004aa:	88bb      	ldrh	r3, [r7, #4]
 80004ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004b0:	80bb      	strh	r3, [r7, #4]
	psc &= MASK_1BIT;
 80004b2:	78fb      	ldrb	r3, [r7, #3]
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	70fb      	strb	r3, [r7, #3]
	phaseAdj &= MASK_1BIT;
 80004ba:	78bb      	ldrb	r3, [r7, #2]
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	70bb      	strb	r3, [r7, #2]
	uint data = ADF4351_CTRL_BITS_REG1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	60fb      	str	r3, [r7, #12]
	ADF4351_addSubReg(&data, (uint)modValue, ADF4351_BITPOS_MODVALUE);
 80004c6:	88f9      	ldrh	r1, [r7, #6]
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	2203      	movs	r2, #3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff08 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)phaseValue, ADF4351_BITPOS_PHASEVALUE);
 80004d4:	88b9      	ldrh	r1, [r7, #4]
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	220f      	movs	r2, #15
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ff01 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)psc, ADF4351_BITPOS_PSC);
 80004e2:	78f9      	ldrb	r1, [r7, #3]
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	221b      	movs	r2, #27
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fefa 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)phaseAdj, ADF4351_BITPOS_PHASEADJ);
 80004f0:	78b9      	ldrb	r1, [r7, #2]
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	221c      	movs	r2, #28
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fef3 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ff6c 	bl	80003de <ADF4351_sendData>
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bd90      	pop	{r4, r7, pc}

0800050e <ADF4351_setRegister2>:
void ADF4351_setRegister2(_bool countRst, _bool CP3state, _bool pwrDown, byte PD_polarity, byte LDP, byte LDF, byte chrgPumpCurSet,
		byte dblBuf, dByte R_count, _bool R_div2, _bool refDbl, byte muxOut, byte lowNoiseMode)
{
 800050e:	b590      	push	{r4, r7, lr}
 8000510:	b085      	sub	sp, #20
 8000512:	af00      	add	r7, sp, #0
 8000514:	4604      	mov	r4, r0
 8000516:	4608      	mov	r0, r1
 8000518:	4611      	mov	r1, r2
 800051a:	461a      	mov	r2, r3
 800051c:	4623      	mov	r3, r4
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4603      	mov	r3, r0
 8000522:	71bb      	strb	r3, [r7, #6]
 8000524:	460b      	mov	r3, r1
 8000526:	717b      	strb	r3, [r7, #5]
 8000528:	4613      	mov	r3, r2
 800052a:	713b      	strb	r3, [r7, #4]
	countRst &= MASK_1BIT;
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	71fb      	strb	r3, [r7, #7]
	CP3state &= MASK_1BIT;
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	71bb      	strb	r3, [r7, #6]
	pwrDown &= MASK_1BIT;
 800053c:	797b      	ldrb	r3, [r7, #5]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	717b      	strb	r3, [r7, #5]
	PD_polarity &= MASK_1BIT;
 8000544:	793b      	ldrb	r3, [r7, #4]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	713b      	strb	r3, [r7, #4]
	LDP &= MASK_1BIT;
 800054c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	f887 3020 	strb.w	r3, [r7, #32]
	LDF &= MASK_1BIT;
 8000558:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	chrgPumpCurSet &= MASK_4BIT;
 8000564:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000568:	f003 030f 	and.w	r3, r3, #15
 800056c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	dblBuf &= MASK_1BIT;
 8000570:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	R_count &= MASK_10BIT;
 800057c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800057e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000582:	863b      	strh	r3, [r7, #48]	@ 0x30
	R_div2 &= MASK_1BIT;
 8000584:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	refDbl &= MASK_1BIT;
 8000590:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	muxOut &= MASK_3BIT;
 800059c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80005a0:	f003 0307 	and.w	r3, r3, #7
 80005a4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	lowNoiseMode &= MASK_2BIT;
 80005a8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80005ac:	f003 0303 	and.w	r3, r3, #3
 80005b0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	uint data = ADF4351_CTRL_BITS_REG2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	60fb      	str	r3, [r7, #12]
	ADF4351_addSubReg(&data, (uint)countRst, ADF4351_BITPOS_COUNTRST);
 80005b8:	79f9      	ldrb	r1, [r7, #7]
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2203      	movs	r2, #3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fe8f 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)CP3state, ADF4351_BITPOS_CP3STATE);
 80005c6:	79b9      	ldrb	r1, [r7, #6]
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2204      	movs	r2, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fe88 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)pwrDown, ADF4351_BITPOS_PWRDOWN);
 80005d4:	7979      	ldrb	r1, [r7, #5]
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2205      	movs	r2, #5
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe81 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)PD_polarity, ADF4351_BITPOS_PDPOLARITY);
 80005e2:	7939      	ldrb	r1, [r7, #4]
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2206      	movs	r2, #6
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fe7a 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)LDP, ADF4351_BITPOS_LDP);
 80005f0:	f897 1020 	ldrb.w	r1, [r7, #32]
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2207      	movs	r2, #7
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fe72 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)LDF, ADF4351_BITPOS_LDF);
 8000600:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2208      	movs	r2, #8
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fe6a 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)chrgPumpCurSet, ADF4351_BITPOS_CHRGPUMPCURSET);
 8000610:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2209      	movs	r2, #9
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fe62 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)dblBuf, ADF4351_BITPOS_DBLBUF);
 8000620:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	220d      	movs	r2, #13
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fe5a 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)R_count, ADF4351_BITPOS_RCOUNT);
 8000630:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	220e      	movs	r2, #14
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fe53 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)R_div2, ADF4351_BITPOS_RDIV2);
 800063e:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2218      	movs	r2, #24
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fe4b 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)refDbl, ADF4351_BITPOS_REFDBL);
 800064e:	f897 1038 	ldrb.w	r1, [r7, #56]	@ 0x38
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2219      	movs	r2, #25
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fe43 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)muxOut, ADF4351_BITPOS_MUXOUT);
 800065e:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	221a      	movs	r2, #26
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fe3b 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)lowNoiseMode, ADF4351_BITPOS_LOWNOISEMODE);
 800066e:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	221d      	movs	r2, #29
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fe33 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff feac 	bl	80003de <ADF4351_sendData>
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bd90      	pop	{r4, r7, pc}

0800068e <ADF4351_setRegister3>:
void ADF4351_setRegister3(dByte clkDiv, byte clkDivMode, _bool CSR, _bool chrgCancel, byte ABP, byte bandSelClkMode)
{
 800068e:	b590      	push	{r4, r7, lr}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	4604      	mov	r4, r0
 8000696:	4608      	mov	r0, r1
 8000698:	4611      	mov	r1, r2
 800069a:	461a      	mov	r2, r3
 800069c:	4623      	mov	r3, r4
 800069e:	80fb      	strh	r3, [r7, #6]
 80006a0:	4603      	mov	r3, r0
 80006a2:	717b      	strb	r3, [r7, #5]
 80006a4:	460b      	mov	r3, r1
 80006a6:	713b      	strb	r3, [r7, #4]
 80006a8:	4613      	mov	r3, r2
 80006aa:	70fb      	strb	r3, [r7, #3]
	clkDiv &= MASK_12BIT;
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006b2:	80fb      	strh	r3, [r7, #6]
	clkDivMode &= MASK_2BIT;
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	f003 0303 	and.w	r3, r3, #3
 80006ba:	717b      	strb	r3, [r7, #5]
	CSR &= MASK_1BIT;
 80006bc:	793b      	ldrb	r3, [r7, #4]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	713b      	strb	r3, [r7, #4]
	chrgCancel &= MASK_1BIT;
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	70fb      	strb	r3, [r7, #3]
	ABP &= MASK_1BIT;
 80006cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	f887 3020 	strb.w	r3, [r7, #32]
	bandSelClkMode &= MASK_1BIT;
 80006d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint data = ADF4351_CTRL_BITS_REG3;
 80006e4:	2303      	movs	r3, #3
 80006e6:	60fb      	str	r3, [r7, #12]
	ADF4351_addSubReg(&data, (uint)clkDiv, ADF4351_BITPOS_CLKDIV);
 80006e8:	88f9      	ldrh	r1, [r7, #6]
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2203      	movs	r2, #3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fdf7 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)clkDivMode, ADF4351_BITPOS_CLKDIVMODE);
 80006f6:	7979      	ldrb	r1, [r7, #5]
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	220f      	movs	r2, #15
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fdf0 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)CSR, ADF4351_BITPOS_CSR);
 8000704:	7939      	ldrb	r1, [r7, #4]
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2212      	movs	r2, #18
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fde9 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)chrgCancel, ADF4351_BITPOS_CHRGCANCEL);
 8000712:	78f9      	ldrb	r1, [r7, #3]
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2215      	movs	r2, #21
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fde2 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)ABP, ADF4351_BITPOS_ABP);
 8000720:	f897 1020 	ldrb.w	r1, [r7, #32]
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2216      	movs	r2, #22
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fdda 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)bandSelClkMode, ADF4351_BITPOS_BANDSELCLKMODE);
 8000730:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2217      	movs	r2, #23
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fdd2 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fe4b 	bl	80003de <ADF4351_sendData>
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <ADF4351_setRegister4>:
void ADF4351_setRegister4(byte outPwr, _bool RF_out, byte auxOutPwr, _bool auxOut, byte auxOutSel,
		byte MTLD, byte VCO_pwrDown, byte bandSelClkDiv, byte RF_divSel, byte fdbckSel)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	4604      	mov	r4, r0
 8000758:	4608      	mov	r0, r1
 800075a:	4611      	mov	r1, r2
 800075c:	461a      	mov	r2, r3
 800075e:	4623      	mov	r3, r4
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	4603      	mov	r3, r0
 8000764:	71bb      	strb	r3, [r7, #6]
 8000766:	460b      	mov	r3, r1
 8000768:	717b      	strb	r3, [r7, #5]
 800076a:	4613      	mov	r3, r2
 800076c:	713b      	strb	r3, [r7, #4]
	outPwr &= MASK_2BIT;
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 0303 	and.w	r3, r3, #3
 8000774:	71fb      	strb	r3, [r7, #7]
	RF_out &= MASK_1BIT;
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	71bb      	strb	r3, [r7, #6]
	auxOutPwr &= MASK_2BIT;
 800077e:	797b      	ldrb	r3, [r7, #5]
 8000780:	f003 0303 	and.w	r3, r3, #3
 8000784:	717b      	strb	r3, [r7, #5]
	auxOut &= MASK_1BIT;
 8000786:	793b      	ldrb	r3, [r7, #4]
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	713b      	strb	r3, [r7, #4]
	auxOutSel &= MASK_1BIT;
 800078e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	f887 3020 	strb.w	r3, [r7, #32]
	MTLD &= MASK_1BIT;
 800079a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	VCO_pwrDown &= MASK_1BIT;
 80007a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	bandSelClkDiv &= MASK_8BIT;
	RF_divSel &= MASK_3BIT;
 80007b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	fdbckSel &= MASK_1BIT;
 80007be:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	uint data = ADF4351_CTRL_BITS_REG4;
 80007ca:	2304      	movs	r3, #4
 80007cc:	60fb      	str	r3, [r7, #12]
	ADF4351_addSubReg(&data, (uint)outPwr, ADF4351_BITPOS_OUTPWR);
 80007ce:	79f9      	ldrb	r1, [r7, #7]
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2203      	movs	r2, #3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fd84 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)RF_out, ADF4351_BITPOS_RFOUT);
 80007dc:	79b9      	ldrb	r1, [r7, #6]
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2205      	movs	r2, #5
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fd7d 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)auxOutPwr, ADF4351_BITPOS_AUXOUTPWR);
 80007ea:	7979      	ldrb	r1, [r7, #5]
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2206      	movs	r2, #6
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fd76 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)auxOut, ADF4351_BITPOS_AUXOUT);
 80007f8:	7939      	ldrb	r1, [r7, #4]
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2208      	movs	r2, #8
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fd6f 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)auxOutSel, ADF4351_BITPOS_AUXOUTSEL);
 8000806:	f897 1020 	ldrb.w	r1, [r7, #32]
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2209      	movs	r2, #9
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fd67 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)MTLD, ADF4351_BITPOS_MTLD);
 8000816:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	220a      	movs	r2, #10
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fd5f 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)VCO_pwrDown, ADF4351_BITPOS_VCOPWRDOWN);
 8000826:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	220b      	movs	r2, #11
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd57 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)bandSelClkDiv, ADF4351_BITPOS_BANDSELCLKDIV);
 8000836:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	220c      	movs	r2, #12
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fd4f 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)RF_divSel, ADF4351_BITPOS_RFDIVSEL);
 8000846:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2214      	movs	r2, #20
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fd47 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)fdbckSel, ADF4351_BITPOS_FDBCKSEL);
 8000856:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2217      	movs	r2, #23
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fd3f 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fdb8 	bl	80003de <ADF4351_sendData>
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bd90      	pop	{r4, r7, pc}

08000876 <ADF4351_setRegister5>:
void ADF4351_setRegister5(byte LD_pinMode)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	71fb      	strb	r3, [r7, #7]
	byte reserved = MASK_2BIT;
 8000880:	2303      	movs	r3, #3
 8000882:	73fb      	strb	r3, [r7, #15]
	LD_pinMode &= MASK_2BIT;
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	71fb      	strb	r3, [r7, #7]
	uint data = ADF4351_CTRL_BITS_REG5;
 800088c:	2305      	movs	r3, #5
 800088e:	60bb      	str	r3, [r7, #8]
	ADF4351_addSubReg(&data, (uint)reserved, ADF4351_BITPOS_REG5_RESERVED);
 8000890:	7bf9      	ldrb	r1, [r7, #15]
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	2213      	movs	r2, #19
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fd23 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)LD_pinMode, ADF4351_BITPOS_LDPINMODE);
 800089e:	79f9      	ldrb	r1, [r7, #7]
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2216      	movs	r2, #22
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fd1c 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fd95 	bl	80003de <ADF4351_sendData>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ADF4351_settings>:
void ADF4351_disable()
{
	HAL_GPIO_WritePin(ADF4351_CE_PORT, ADF4351_CE_PIN, GPIO_PIN_RESET);
}
void ADF4351_settings(dByte INT, dByte FRAC, dByte MOD, dByte R_count, byte refDbl, byte R_DIV2, byte RF_div)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b08f      	sub	sp, #60	@ 0x3c
 80008c0:	af0a      	add	r7, sp, #40	@ 0x28
 80008c2:	4604      	mov	r4, r0
 80008c4:	4608      	mov	r0, r1
 80008c6:	4611      	mov	r1, r2
 80008c8:	461a      	mov	r2, r3
 80008ca:	4623      	mov	r3, r4
 80008cc:	80fb      	strh	r3, [r7, #6]
 80008ce:	4603      	mov	r3, r0
 80008d0:	80bb      	strh	r3, [r7, #4]
 80008d2:	460b      	mov	r3, r1
 80008d4:	807b      	strh	r3, [r7, #2]
 80008d6:	4613      	mov	r3, r2
 80008d8:	803b      	strh	r3, [r7, #0]
	byte LDF = ADF4351_LDF_FRAC;
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
	byte APB = ADF4351_ABP_6NS;
 80008de:	2300      	movs	r3, #0
 80008e0:	73bb      	strb	r3, [r7, #14]
	byte psc = ADF4351_PSC_4v5;
 80008e2:	2300      	movs	r3, #0
 80008e4:	737b      	strb	r3, [r7, #13]
	if (FRAC == 0) {
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d103      	bne.n	80008f4 <ADF4351_settings+0x38>
		LDF = ADF4351_LDF_INT;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
		APB = ADF4351_ABP_3NS;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73bb      	strb	r3, [r7, #14]
	}
	if (ADF4351_VCO_freq(ADF4351_CLOCKFREQ, R_DIV2, refDbl, R_count, INT, FRAC, MOD) > 3600)
 80008f4:	8838      	ldrh	r0, [r7, #0]
 80008f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008fa:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	88bb      	ldrh	r3, [r7, #4]
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	4603      	mov	r3, r0
 800090c:	2032      	movs	r0, #50	@ 0x32
 800090e:	f000 f869 	bl	80009e4 <ADF4351_VCO_freq>
 8000912:	eef0 7a40 	vmov.f32	s15, s0
 8000916:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80009e0 <ADF4351_settings+0x124>
 800091a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800091e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000922:	dd01      	ble.n	8000928 <ADF4351_settings+0x6c>
		psc = ADF4351_PSC_8v9;
 8000924:	2301      	movs	r3, #1
 8000926:	737b      	strb	r3, [r7, #13]
	ADF4351_setRegister5(ADF4351_LDPINMODE_HIGH);
 8000928:	2003      	movs	r0, #3
 800092a:	f7ff ffa4 	bl	8000876 <ADF4351_setRegister5>
	HAL_Delay(50);
 800092e:	2032      	movs	r0, #50	@ 0x32
 8000930:	f000 fcee 	bl	8001310 <HAL_Delay>
	ADF4351_setRegister4(ADF4351_OUTPWR_p5DBM, ADF4351_RFOUT_ENABLED, ADF4351_AUXOUTPWR_n1DBM, ADF4351_AUXOUT_DISABLED,
 8000934:	2301      	movs	r3, #1
 8000936:	9305      	str	r3, [sp, #20]
 8000938:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800093c:	9304      	str	r3, [sp, #16]
 800093e:	2350      	movs	r3, #80	@ 0x50
 8000940:	9303      	str	r3, [sp, #12]
 8000942:	2300      	movs	r3, #0
 8000944:	9302      	str	r3, [sp, #8]
 8000946:	2300      	movs	r3, #0
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	2301      	movs	r3, #1
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2300      	movs	r3, #0
 8000950:	2201      	movs	r2, #1
 8000952:	2101      	movs	r1, #1
 8000954:	2003      	movs	r0, #3
 8000956:	f7ff fefb 	bl	8000750 <ADF4351_setRegister4>
			ADF4351_AUXOUTSEL_FUNDAMENTAL, ADF4351_MTLD_DISABLED, ADF4351_VCOPWRDOWN_PWRUP, 80, RF_div, ADF4351_FDBCKSEL_FUNDAMENTAL);
	HAL_Delay(50);
 800095a:	2032      	movs	r0, #50	@ 0x32
 800095c:	f000 fcd8 	bl	8001310 <HAL_Delay>
	ADF4351_setRegister3(1, ADF4351_CLKDIVMODE_OFF, ADF4351_CSR_DISABLED, ADF4351_CHRGCANCEL_DISABLED, APB, ADF4351_BANDSELCLKMODE_LOW);
 8000960:	2300      	movs	r3, #0
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2300      	movs	r3, #0
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fe8d 	bl	800068e <ADF4351_setRegister3>
	HAL_Delay(50);
 8000974:	2032      	movs	r0, #50	@ 0x32
 8000976:	f000 fccb 	bl	8001310 <HAL_Delay>
	ADF4351_setRegister2(ADF4351_COUNTRST_DISABLED, ADF4351_CP3STATE_DISABLED, ADF4351_PWRDOWN_DISABLED, ADF4351_PDPOLARITY_POSITIVE,
 800097a:	2300      	movs	r3, #0
 800097c:	9308      	str	r3, [sp, #32]
 800097e:	2302      	movs	r3, #2
 8000980:	9307      	str	r3, [sp, #28]
 8000982:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000986:	9306      	str	r3, [sp, #24]
 8000988:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800098c:	9305      	str	r3, [sp, #20]
 800098e:	883b      	ldrh	r3, [r7, #0]
 8000990:	9304      	str	r3, [sp, #16]
 8000992:	2300      	movs	r3, #0
 8000994:	9303      	str	r3, [sp, #12]
 8000996:	2307      	movs	r3, #7
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	2301      	movs	r3, #1
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2301      	movs	r3, #1
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fdb0 	bl	800050e <ADF4351_setRegister2>
			ADF4351_LDP_6NS, LDF, ADF4351_CHRGPUMPCURSET_2500U, ADF4351_DBLBUF_DISABLED, R_count, R_DIV2, refDbl, ADF4351_MUXOUT_DGND,
			ADF4351_LOWNOISEMODE_LOWNOISE);
	HAL_Delay(50);
 80009ae:	2032      	movs	r0, #50	@ 0x32
 80009b0:	f000 fcae 	bl	8001310 <HAL_Delay>
	ADF4351_setRegister1(MOD, 1, psc, ADF4351_PHASEADJ_OFF);
 80009b4:	7b7a      	ldrb	r2, [r7, #13]
 80009b6:	8878      	ldrh	r0, [r7, #2]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	f7ff fd62 	bl	8000484 <ADF4351_setRegister1>
	HAL_Delay(50);
 80009c0:	2032      	movs	r0, #50	@ 0x32
 80009c2:	f000 fca5 	bl	8001310 <HAL_Delay>
	ADF4351_setRegister0(FRAC, INT);
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fd35 	bl	800043c <ADF4351_setRegister0>
	HAL_Delay(50);
 80009d2:	2032      	movs	r0, #50	@ 0x32
 80009d4:	f000 fc9c 	bl	8001310 <HAL_Delay>
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	45610000 	.word	0x45610000

080009e4 <ADF4351_VCO_freq>:
float ADF4351_VCO_freq(dByte REF_in, _bool R_DIV2, _bool refDbl, dByte R_count, dByte INT, dByte FRAC, dByte MOD)
{
 80009e4:	b490      	push	{r4, r7}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4604      	mov	r4, r0
 80009ec:	4608      	mov	r0, r1
 80009ee:	4611      	mov	r1, r2
 80009f0:	461a      	mov	r2, r3
 80009f2:	4623      	mov	r3, r4
 80009f4:	80fb      	strh	r3, [r7, #6]
 80009f6:	4603      	mov	r3, r0
 80009f8:	717b      	strb	r3, [r7, #5]
 80009fa:	460b      	mov	r3, r1
 80009fc:	713b      	strb	r3, [r7, #4]
 80009fe:	4613      	mov	r3, r2
 8000a00:	807b      	strh	r3, [r7, #2]
	return ((float)REF_in) * (((float)(1 + refDbl)) / (((float)R_count) * ((float)(1 + R_DIV2)))) *
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a0c:	793b      	ldrb	r3, [r7, #4]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000a18:	887b      	ldrh	r3, [r7, #2]
 8000a1a:	ee07 3a90 	vmov	s15, r3
 8000a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	3301      	adds	r3, #1
 8000a26:	ee07 3a90 	vmov	s15, r3
 8000a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000a32:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000a36:	ee27 7a27 	vmul.f32	s14, s14, s15
		   (((float)INT) + ((float)FRAC) / ((float)MOD));
 8000a3a:	8a3b      	ldrh	r3, [r7, #16]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a44:	8abb      	ldrh	r3, [r7, #20]
 8000a46:	ee07 3a90 	vmov	s15, r3
 8000a4a:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8000a4e:	8b3b      	ldrh	r3, [r7, #24]
 8000a50:	ee07 3a90 	vmov	s15, r3
 8000a54:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8000a58:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8000a5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
	return ((float)REF_in) * (((float)(1 + refDbl)) / (((float)R_count) * ((float)(1 + R_DIV2)))) *
 8000a60:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000a64:	eeb0 0a67 	vmov.f32	s0, s15
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc90      	pop	{r4, r7}
 8000a6e:	4770      	bx	lr

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a76:	f000 fb85 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f819 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f000 f925 	bl	8000ccc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a82:	f000 f877 	bl	8000b74 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000a86:	f000 f8b9 	bl	8000bfc <MX_SPI3_Init>
  MX_USBX_Device_Init();
 8000a8a:	f003 feeb 	bl	8004864 <MX_USBX_Device_Init>
  /* USER CODE BEGIN 2 */
  ADF4351_init();
 8000a8e:	f7ff fc9d 	bl	80003cc <ADF4351_init>
  ADF4351_settings(128, 1, 1000, 1, ADF4351_DBLBUF_DISABLED, ADF4351_RDIV2_ENABLED, ADF4351_RFDIVSEL_64);
 8000a92:	2306      	movs	r3, #6
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2301      	movs	r3, #1
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2080      	movs	r0, #128	@ 0x80
 8000aa8:	f7ff ff08 	bl	80008bc <ADF4351_settings>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <main+0x3c>

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b09e      	sub	sp, #120	@ 0x78
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	2260      	movs	r2, #96	@ 0x60
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f003 fedc 	bl	800487c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
 8000ad2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000ad4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000ad8:	f001 fb5e 	bl	8002198 <HAL_PWREx_ControlVoltageScaling>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000ae2:	f000 f9a7 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000ae6:	2323      	movs	r3, #35	@ 0x23
 8000ae8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000aea:	f44f 13a8 	mov.w	r3, #1376256	@ 0x150000
 8000aee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b04:	2303      	movs	r3, #3
 8000b06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000b08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000b12:	2310      	movs	r3, #16
 8000b14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000b22:	230c      	movs	r3, #12
 8000b24:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fbde 	bl	80022f0 <HAL_RCC_OscConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b3a:	f000 f97b 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	231f      	movs	r3, #31
 8000b40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b42:	2303      	movs	r3, #3
 8000b44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b56:	463b      	mov	r3, r7
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 faa4 	bl	80030a8 <HAL_RCC_ClockConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b66:	f000 f965 	bl	8000e34 <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3778      	adds	r7, #120	@ 0x78
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf8 <MX_ADC1_Init+0x84>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b96:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000b98:	2204      	movs	r2, #4
 8000b9a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_ADC1_Init+0x80>)
 8000be2:	f000 fcb7 	bl	8001554 <HAL_ADC_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000bec:	f000 f922 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000028 	.word	0x20000028
 8000bf8:	42028000 	.word	0x42028000

08000bfc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc8 <MX_SPI3_Init+0xcc>)
 8000c10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000c12:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c18:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c1e:	4b29      	ldr	r3, [pc, #164]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c24:	4b27      	ldr	r3, [pc, #156]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2a:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c30:	4b24      	ldr	r3, [pc, #144]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c36:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3c:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c42:	4b20      	ldr	r3, [pc, #128]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c60:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c8a:	480e      	ldr	r0, [pc, #56]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000c8c:	f003 fc78 	bl	8004580 <HAL_SPI_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000c96:	f000 f8cd 	bl	8000e34 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 8000c9e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ca2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_SPI3_Init+0xc8>)
 8000cae:	f003 fd98 	bl	80047e2 <HAL_SPIEx_SetConfigAutonomousMode>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_SPI3_Init+0xc0>
  {
    Error_Handler();
 8000cb8:	f000 f8bc 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200000b4 	.word	0x200000b4
 8000cc8:	46002000 	.word	0x46002000

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce8:	4a4d      	ldr	r2, [pc, #308]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d00:	4b47      	ldr	r3, [pc, #284]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d06:	4a46      	ldr	r2, [pc, #280]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d10:	4b43      	ldr	r3, [pc, #268]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b40      	ldr	r3, [pc, #256]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d24:	4a3e      	ldr	r2, [pc, #248]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3c:	4b38      	ldr	r3, [pc, #224]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d42:	4a37      	ldr	r2, [pc, #220]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d4c:	4b34      	ldr	r3, [pc, #208]	@ (8000e20 <MX_GPIO_Init+0x154>)
 8000d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	210c      	movs	r1, #12
 8000d5e:	4831      	ldr	r0, [pc, #196]	@ (8000e24 <MX_GPIO_Init+0x158>)
 8000d60:	f001 fa02 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2103      	movs	r1, #3
 8000d68:	482f      	ldr	r0, [pc, #188]	@ (8000e28 <MX_GPIO_Init+0x15c>)
 8000d6a:	f001 f9fd 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	21f0      	movs	r1, #240	@ 0xf0
 8000d72:	482e      	ldr	r0, [pc, #184]	@ (8000e2c <MX_GPIO_Init+0x160>)
 8000d74:	f001 f9f8 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4825      	ldr	r0, [pc, #148]	@ (8000e24 <MX_GPIO_Init+0x158>)
 8000d8e:	f001 f813 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d98:	4b25      	ldr	r3, [pc, #148]	@ (8000e30 <MX_GPIO_Init+0x164>)
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	481f      	ldr	r0, [pc, #124]	@ (8000e24 <MX_GPIO_Init+0x158>)
 8000da8:	f001 f806 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dac:	230c      	movs	r3, #12
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4818      	ldr	r0, [pc, #96]	@ (8000e24 <MX_GPIO_Init+0x158>)
 8000dc4:	f000 fff8 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4812      	ldr	r0, [pc, #72]	@ (8000e28 <MX_GPIO_Init+0x15c>)
 8000de0:	f000 ffea 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de4:	2304      	movs	r3, #4
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <MX_GPIO_Init+0x15c>)
 8000df8:	f000 ffde 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dfc:	23f0      	movs	r3, #240	@ 0xf0
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <MX_GPIO_Init+0x160>)
 8000e14:	f000 ffd0 	bl	8001db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	@ 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	46020c00 	.word	0x46020c00
 8000e24:	42020800 	.word	0x42020800
 8000e28:	42020000 	.word	0x42020000
 8000e2c:	42020c00 	.word	0x42020c00
 8000e30:	10110000 	.word	0x10110000

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <Error_Handler+0x8>

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <HAL_MspInit+0x34>)
 8000e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e4c:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <HAL_MspInit+0x34>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <HAL_MspInit+0x34>)
 8000e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000e64:	f001 fa24 	bl	80022b0 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddA();
 8000e68:	f001 fa32 	bl	80022d0 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	46020c00 	.word	0x46020c00

08000e78 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	22c0      	movs	r2, #192	@ 0xc0
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fcef 	bl	800487c <memset>
  if(hadc->Instance==ADC1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a24      	ldr	r2, [pc, #144]	@ (8000f34 <HAL_ADC_MspInit+0xbc>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d140      	bne.n	8000f2a <HAL_ADC_MspInit+0xb2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000ea8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000eb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fc89 	bl	80037d8 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000ecc:	f7ff ffb2 	bl	8000e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_ADC_MspInit+0xc0>)
 8000ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed6:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <HAL_ADC_MspInit+0xc0>)
 8000ed8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000edc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ee0:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <HAL_ADC_MspInit+0xc0>)
 8000ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_ADC_MspInit+0xc0>)
 8000ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef4:	4a10      	ldr	r2, [pc, #64]	@ (8000f38 <HAL_ADC_MspInit+0xc0>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <HAL_ADC_MspInit+0xc0>)
 8000f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <HAL_ADC_MspInit+0xc4>)
 8000f26:	f000 ff47 	bl	8001db8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f2a:	bf00      	nop
 8000f2c:	37e8      	adds	r7, #232	@ 0xe8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	42028000 	.word	0x42028000
 8000f38:	46020c00 	.word	0x46020c00
 8000f3c:	42020800 	.word	0x42020800

08000f40 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0bc      	sub	sp, #240	@ 0xf0
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	22c0      	movs	r2, #192	@ 0xc0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 fc8b 	bl	800487c <memset>
  if(hspi->Instance==SPI3)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a39      	ldr	r2, [pc, #228]	@ (8001050 <HAL_SPI_MspInit+0x110>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d16b      	bne.n	8001048 <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000f70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f74:	f04f 0300 	mov.w	r3, #0
 8000f78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fc26 	bl	80037d8 <HAL_RCCEx_PeriphCLKConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000f92:	f7ff ff4f 	bl	8000e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f96:	4b2f      	ldr	r3, [pc, #188]	@ (8001054 <HAL_SPI_MspInit+0x114>)
 8000f98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8001054 <HAL_SPI_MspInit+0x114>)
 8000f9e:	f043 0320 	orr.w	r3, r3, #32
 8000fa2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <HAL_SPI_MspInit+0x114>)
 8000fa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <HAL_SPI_MspInit+0x114>)
 8000fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fba:	4a26      	ldr	r2, [pc, #152]	@ (8001054 <HAL_SPI_MspInit+0x114>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <HAL_SPI_MspInit+0x114>)
 8000fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <HAL_SPI_MspInit+0x114>)
 8000fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001054 <HAL_SPI_MspInit+0x114>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <HAL_SPI_MspInit+0x114>)
 8000fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
    PA15 (JTDI)     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ff0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800100a:	2306      	movs	r3, #6
 800100c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001014:	4619      	mov	r1, r3
 8001016:	4810      	ldr	r0, [pc, #64]	@ (8001058 <HAL_SPI_MspInit+0x118>)
 8001018:	f000 fece 	bl	8001db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800101c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001020:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001036:	2306      	movs	r3, #6
 8001038:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <HAL_SPI_MspInit+0x11c>)
 8001044:	f000 feb8 	bl	8001db8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001048:	bf00      	nop
 800104a:	37f0      	adds	r7, #240	@ 0xf0
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	46002000 	.word	0x46002000
 8001054:	46020c00 	.word	0x46020c00
 8001058:	42020000 	.word	0x42020000
 800105c:	42020800 	.word	0x42020800

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <NMI_Handler+0x4>

08001068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <MemManage_Handler+0x4>

08001078 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <UsageFault_Handler+0x4>

08001088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b6:	f000 f90b 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <SystemInit+0x68>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ca:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <SystemInit+0x68>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <SystemInit+0x6c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <SystemInit+0x6c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <SystemInit+0x6c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <SystemInit+0x6c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <SystemInit+0x6c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0e      	ldr	r2, [pc, #56]	@ (800112c <SystemInit+0x6c>)
 80010f2:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80010f6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80010fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <SystemInit+0x6c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <SystemInit+0x6c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a09      	ldr	r2, [pc, #36]	@ (800112c <SystemInit+0x6c>)
 8001108:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800110c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <SystemInit+0x6c>)
 8001110:	2200      	movs	r2, #0
 8001112:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <SystemInit+0x68>)
 8001116:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800111a:	609a      	str	r2, [r3, #8]
  #endif
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	46020c00 	.word	0x46020c00

08001130 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001168 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001134:	f7ff ffc4 	bl	80010c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001138:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800113a:	e003      	b.n	8001144 <LoopCopyDataInit>

0800113c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800113e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001140:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001142:	3104      	adds	r1, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001144:	480a      	ldr	r0, [pc, #40]	@ (8001170 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001148:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800114a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800114c:	d3f6      	bcc.n	800113c <CopyDataInit>
	ldr	r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001150:	e002      	b.n	8001158 <LoopFillZerobss>

08001152 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001152:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001154:	f842 3b04 	str.w	r3, [r2], #4

08001158 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <LoopForever+0x16>)
	cmp	r2, r3
 800115a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800115c:	d3f9      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f003 fb95 	bl	800488c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001162:	f7ff fc85 	bl	8000a70 <main>

08001166 <LoopForever>:

LoopForever:
    b LoopForever
 8001166:	e7fe      	b.n	8001166 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001168:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800116c:	080049c4 	.word	0x080049c4
	ldr	r0, =_sdata
 8001170:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001174:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001178:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800117c:	20000148 	.word	0x20000148

08001180 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_IRQHandler>
	...

08001184 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <HAL_Init+0x50>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a11      	ldr	r2, [pc, #68]	@ (80011d4 <HAL_Init+0x50>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 fd36 	bl	8001c06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800119a:	f002 f977 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800119e:	4602      	mov	r2, r0
 80011a0:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_Init+0x54>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <HAL_Init+0x58>)
 80011aa:	5ccb      	ldrb	r3, [r1, r3]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_Init+0x5c>)
 80011b2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011b4:	2004      	movs	r0, #4
 80011b6:	f000 fd6d 	bl	8001c94 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ba:	200f      	movs	r0, #15
 80011bc:	f000 f812 	bl	80011e4 <HAL_InitTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e002      	b.n	80011d0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ca:	f7ff fe39 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40022000 	.word	0x40022000
 80011d8:	46020c00 	.word	0x46020c00
 80011dc:	080048ec 	.word	0x080048ec
 80011e0:	20000000 	.word	0x20000000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011f0:	4b33      	ldr	r3, [pc, #204]	@ (80012c0 <HAL_InitTick+0xdc>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e05c      	b.n	80012b6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80011fc:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <HAL_InitTick+0xe0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b04      	cmp	r3, #4
 8001206:	d10c      	bne.n	8001222 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001208:	4b2f      	ldr	r3, [pc, #188]	@ (80012c8 <HAL_InitTick+0xe4>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <HAL_InitTick+0xdc>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e037      	b.n	8001292 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001222:	f000 fd8f 	bl	8001d44 <HAL_SYSTICK_GetCLKSourceConfig>
 8001226:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d023      	beq.n	8001276 <HAL_InitTick+0x92>
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d82d      	bhi.n	8001290 <HAL_InitTick+0xac>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_InitTick+0x5e>
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d00d      	beq.n	800125c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001240:	e026      	b.n	8001290 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001242:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <HAL_InitTick+0xe4>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <HAL_InitTick+0xdc>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001250:	fbb3 f3f1 	udiv	r3, r3, r1
 8001254:	fbb2 f3f3 	udiv	r3, r2, r3
 8001258:	60fb      	str	r3, [r7, #12]
        break;
 800125a:	e01a      	b.n	8001292 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800125c:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <HAL_InitTick+0xdc>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001266:	fbb3 f3f2 	udiv	r3, r3, r2
 800126a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	60fb      	str	r3, [r7, #12]
        break;
 8001274:	e00d      	b.n	8001292 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0xdc>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001280:	fbb3 f3f2 	udiv	r3, r3, r2
 8001284:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001288:	fbb2 f3f3 	udiv	r3, r2, r3
 800128c:	60fb      	str	r3, [r7, #12]
        break;
 800128e:	e000      	b.n	8001292 <HAL_InitTick+0xae>
        break;
 8001290:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 fcdc 	bl	8001c50 <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e009      	b.n	80012b6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a2:	2200      	movs	r2, #0
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	f04f 30ff 	mov.w	r0, #4294967295
 80012aa:	f000 fcb7 	bl	8001c1c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80012ae:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <HAL_InitTick+0xe8>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008
 80012c4:	e000e010 	.word	0xe000e010
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000144 	.word	0x20000144

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000144 	.word	0x20000144

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff ffee 	bl	80012f8 <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d005      	beq.n	8001336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_Delay+0x44>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001336:	bf00      	nop
 8001338:	f7ff ffde 	bl	80012f8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	429a      	cmp	r2, r3
 8001346:	d8f7      	bhi.n	8001338 <HAL_Delay+0x28>
  {
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008

08001358 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	601a      	str	r2, [r3, #0]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <LL_ADC_SetResolution+0x3c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d104      	bne.n	80013a0 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	3b01      	subs	r3, #1
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f023 020c 	bic.w	r2, r3, #12
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	60da      	str	r2, [r3, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	46021000 	.word	0x46021000

080013c0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d002      	beq.n	80013f2 <LL_ADC_SetGainCompensation+0x32>
 80013ec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013f0:	e000      	b.n	80013f4 <LL_ADC_SetGainCompensation+0x34>
 80013f2:	2200      	movs	r2, #0
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2107      	movs	r1, #7
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	401a      	ands	r2, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	431a      	orrs	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001454:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6093      	str	r3, [r2, #8]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800147c:	d101      	bne.n	8001482 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80014a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014cc:	d101      	bne.n	80014d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <LL_ADC_IsEnabled+0x18>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <LL_ADC_IsEnabled+0x1a>
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b04      	cmp	r3, #4
 8001518:	d101      	bne.n	800151e <LL_ADC_REG_IsConversionOngoing+0x18>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b08      	cmp	r3, #8
 800153e:	d101      	bne.n	8001544 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e2b3      	b.n	8001adc <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a8b      	ldr	r2, [pc, #556]	@ (80017b0 <HAL_ADC_Init+0x25c>)
 8001582:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fc73 	bl	8000e78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5f 	bl	8001468 <LL_ADC_IsDeepPowerDownEnabled>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff45 	bl	8001444 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff7a 	bl	80014b8 <LL_ADC_IsInternalRegulatorEnabled>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d115      	bne.n	80015f6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff5e 	bl	8001490 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015d4:	4b77      	ldr	r3, [pc, #476]	@ (80017b4 <HAL_ADC_Init+0x260>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	4a77      	ldr	r2, [pc, #476]	@ (80017b8 <HAL_ADC_Init+0x264>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	099b      	lsrs	r3, r3, #6
 80015e2:	3301      	adds	r3, #1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015e8:	e002      	b.n	80015f0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f9      	bne.n	80015ea <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff5c 	bl	80014b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10e      	bne.n	8001624 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800160a:	f043 0210 	orr.w	r2, r3, #16
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff6c 	bl	8001506 <LL_ADC_REG_IsConversionOngoing>
 800162e:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	f040 8244 	bne.w	8001ac6 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 8240 	bne.w	8001ac6 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800164a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800164e:	f043 0202 	orr.w	r2, r3, #2
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff40 	bl	80014e0 <LL_ADC_IsEnabled>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d140      	bne.n	80016e8 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a51      	ldr	r2, [pc, #324]	@ (80017b0 <HAL_ADC_Init+0x25c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d028      	beq.n	80016c2 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a51      	ldr	r2, [pc, #324]	@ (80017bc <HAL_ADC_Init+0x268>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d109      	bne.n	800168e <HAL_ADC_Init+0x13a>
 800167a:	4850      	ldr	r0, [pc, #320]	@ (80017bc <HAL_ADC_Init+0x268>)
 800167c:	f7ff ff30 	bl	80014e0 <LL_ADC_IsEnabled>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	e008      	b.n	80016a0 <HAL_ADC_Init+0x14c>
 800168e:	4848      	ldr	r0, [pc, #288]	@ (80017b0 <HAL_ADC_Init+0x25c>)
 8001690:	f7ff ff26 	bl	80014e0 <LL_ADC_IsEnabled>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf0c      	ite	eq
 800169a:	2301      	moveq	r3, #1
 800169c:	2300      	movne	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d021      	beq.n	80016e8 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a44      	ldr	r2, [pc, #272]	@ (80017bc <HAL_ADC_Init+0x268>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_Init+0x15e>
 80016ae:	4a44      	ldr	r2, [pc, #272]	@ (80017c0 <HAL_ADC_Init+0x26c>)
 80016b0:	e000      	b.n	80016b4 <HAL_ADC_Init+0x160>
 80016b2:	4a44      	ldr	r2, [pc, #272]	@ (80017c4 <HAL_ADC_Init+0x270>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4610      	mov	r0, r2
 80016bc:	f7ff fe4c 	bl	8001358 <LL_ADC_SetCommonClock>
 80016c0:	e012      	b.n	80016e8 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f7ff fe57 	bl	8001380 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80016d2:	4b3c      	ldr	r3, [pc, #240]	@ (80017c4 <HAL_ADC_Init+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80016e2:	4938      	ldr	r1, [pc, #224]	@ (80017c4 <HAL_ADC_Init+0x270>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a30      	ldr	r2, [pc, #192]	@ (80017b0 <HAL_ADC_Init+0x25c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d010      	beq.n	8001714 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016f8:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80016fe:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001704:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800170c:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800170e:	4313      	orrs	r3, r2
 8001710:	623b      	str	r3, [r7, #32]
 8001712:	e030      	b.n	8001776 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7f1b      	ldrb	r3, [r3, #28]
 8001718:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001720:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001722:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001728:	2a00      	cmp	r2, #0
 800172a:	d002      	beq.n	8001732 <HAL_ADC_Init+0x1de>
 800172c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001730:	e000      	b.n	8001734 <HAL_ADC_Init+0x1e0>
 8001732:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001734:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800173a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	da04      	bge.n	800174e <HAL_ADC_Init+0x1fa>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800174c:	e001      	b.n	8001752 <HAL_ADC_Init+0x1fe>
 800174e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8001752:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4918      	ldr	r1, [pc, #96]	@ (80017bc <HAL_ADC_Init+0x268>)
 800175a:	428b      	cmp	r3, r1
 800175c:	d103      	bne.n	8001766 <HAL_ADC_Init+0x212>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001764:	e003      	b.n	800176e <HAL_ADC_Init+0x21a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800176c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800176e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001770:	6a3a      	ldr	r2, [r7, #32]
 8001772:	4313      	orrs	r3, r2
 8001774:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800177c:	2b01      	cmp	r3, #1
 800177e:	d12f      	bne.n	80017e0 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <HAL_ADC_Init+0x25c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d007      	beq.n	800179a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	3b01      	subs	r3, #1
 8001790:	045b      	lsls	r3, r3, #17
 8001792:	6a3a      	ldr	r2, [r7, #32]
 8001794:	4313      	orrs	r3, r2
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	e022      	b.n	80017e0 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d111      	bne.n	80017c8 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017aa:	623b      	str	r3, [r7, #32]
 80017ac:	e018      	b.n	80017e0 <HAL_ADC_Init+0x28c>
 80017ae:	bf00      	nop
 80017b0:	46021000 	.word	0x46021000
 80017b4:	20000000 	.word	0x20000000
 80017b8:	053e2d63 	.word	0x053e2d63
 80017bc:	42028000 	.word	0x42028000
 80017c0:	42028308 	.word	0x42028308
 80017c4:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80017cc:	f043 0220 	orr.w	r2, r3, #32
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a92      	ldr	r2, [pc, #584]	@ (8001a30 <HAL_ADC_Init+0x4dc>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d018      	beq.n	800181c <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fe:	4313      	orrs	r3, r2
 8001800:	6a3a      	ldr	r2, [r7, #32]
 8001802:	4313      	orrs	r3, r2
 8001804:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	4b89      	ldr	r3, [pc, #548]	@ (8001a34 <HAL_ADC_Init+0x4e0>)
 800180e:	4013      	ands	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	6a39      	ldr	r1, [r7, #32]
 8001816:	430b      	orrs	r3, r1
 8001818:	60d3      	str	r3, [r2, #12]
 800181a:	e031      	b.n	8001880 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001820:	2b00      	cmp	r3, #0
 8001822:	d009      	beq.n	8001838 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001828:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001830:	4313      	orrs	r3, r2
 8001832:	6a3a      	ldr	r2, [r7, #32]
 8001834:	4313      	orrs	r3, r2
 8001836:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	4b7e      	ldr	r3, [pc, #504]	@ (8001a38 <HAL_ADC_Init+0x4e4>)
 8001840:	4013      	ands	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	6a39      	ldr	r1, [r7, #32]
 8001848:	430b      	orrs	r3, r1
 800184a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d008      	beq.n	8001880 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a6a      	ldr	r2, [pc, #424]	@ (8001a30 <HAL_ADC_Init+0x4dc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	f000 8093 	beq.w	80019b2 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fe38 	bl	8001506 <LL_ADC_REG_IsConversionOngoing>
 8001896:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fe45 	bl	800152c <LL_ADC_INJ_IsConversionOngoing>
 80018a2:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d161      	bne.n	800196e <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d15e      	bne.n	800196e <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7f1b      	ldrb	r3, [r3, #28]
 80018b4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4960      	ldr	r1, [pc, #384]	@ (8001a3c <HAL_ADC_Init+0x4e8>)
 80018bc:	428b      	cmp	r3, r1
 80018be:	d102      	bne.n	80018c6 <HAL_ADC_Init+0x372>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c4:	e002      	b.n	80018cc <HAL_ADC_Init+0x378>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ca:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018cc:	4313      	orrs	r3, r2
 80018ce:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018da:	f023 0303 	bic.w	r3, r3, #3
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	6a39      	ldr	r1, [r7, #32]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f7ff fd60 	bl	80013c0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001906:	2b01      	cmp	r3, #1
 8001908:	d11e      	bne.n	8001948 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190e:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	4b4a      	ldr	r3, [pc, #296]	@ (8001a40 <HAL_ADC_Init+0x4ec>)
 8001918:	4013      	ands	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800191e:	0411      	lsls	r1, r2, #16
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001924:	4311      	orrs	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001936:	0892      	lsrs	r2, r2, #2
 8001938:	430a      	orrs	r2, r1
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	e007      	b.n	8001958 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10c      	bne.n	8001990 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197c:	f023 010f 	bic.w	r1, r3, #15
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	631a      	str	r2, [r3, #48]	@ 0x30
 800198e:	e007      	b.n	80019a0 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 020f 	bic.w	r2, r2, #15
 800199e:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80019a4:	f023 0303 	bic.w	r3, r3, #3
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019b0:	e092      	b.n	8001ad8 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d111      	bne.n	80019e0 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80019c4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80019ca:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80019d0:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691a      	ldr	r2, [r3, #16]
 80019e6:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <HAL_ADC_Init+0x4f0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	69f9      	ldr	r1, [r7, #28]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019fc:	461a      	mov	r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	f7ff fd01 	bl	8001406 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8001a12:	f7ff fcf8 	bl	8001406 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d114      	bne.n	8001a48 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f062 020f 	orn	r2, r2, #15
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a2e:	e024      	b.n	8001a7a <HAL_ADC_Init+0x526>
 8001a30:	46021000 	.word	0x46021000
 8001a34:	fff0c013 	.word	0xfff0c013
 8001a38:	ffde800d 	.word	0xffde800d
 8001a3c:	42028000 	.word	0x42028000
 8001a40:	fc00f81e 	.word	0xfc00f81e
 8001a44:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a50:	d113      	bne.n	8001a7a <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	f003 031c 	and.w	r3, r3, #28
 8001a64:	f06f 020f 	mvn.w	r2, #15
 8001a68:	fa02 f103 	lsl.w	r1, r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <HAL_ADC_Init+0x590>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	6a3a      	ldr	r2, [r7, #32]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d10b      	bne.n	8001aa2 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001a94:	f023 0303 	bic.w	r3, r3, #3
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001aa0:	e01a      	b.n	8001ad8 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001aa6:	f023 0312 	bic.w	r3, r3, #18
 8001aaa:	f043 0210 	orr.w	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ac4:	e008      	b.n	8001ad8 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8001ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3728      	adds	r7, #40	@ 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	833ffff3 	.word	0x833ffff3

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	@ 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ff6a 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2a:	f7ff ff81 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001c2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	6978      	ldr	r0, [r7, #20]
 8001c36:	f7ff ffb3 	bl	8001ba0 <NVIC_EncodePriority>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff82 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c48:	bf00      	nop
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00d      	b.n	8001c82 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <HAL_SYSTICK_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <HAL_SYSTICK_Config+0x40>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_SYSTICK_Config+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <HAL_SYSTICK_Config+0x40>)
 8001c7a:	f043 0303 	orr.w	r3, r3, #3
 8001c7e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d844      	bhi.n	8001d2c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001ccb 	.word	0x08001ccb
 8001cac:	08001ce9 	.word	0x08001ce9
 8001cb0:	08001d0b 	.word	0x08001d0b
 8001cb4:	08001d2d 	.word	0x08001d2d
 8001cb8:	08001cbd 	.word	0x08001cbd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6013      	str	r3, [r2, #0]
      break;
 8001cc8:	e031      	b.n	8001d2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1b      	ldr	r2, [pc, #108]	@ (8001d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cdc:	4a18      	ldr	r2, [pc, #96]	@ (8001d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001cde:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001ce6:	e022      	b.n	8001d2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001cee:	f023 0304 	bic.w	r3, r3, #4
 8001cf2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001cfe:	4a10      	ldr	r2, [pc, #64]	@ (8001d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001d08:	e011      	b.n	8001d2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d1c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d20:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001d2a:	e000      	b.n	8001d2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001d2c:	bf00      	nop
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e010 	.word	0xe000e010
 8001d40:	46020c00 	.word	0x46020c00

08001d44 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001d56:	2304      	movs	r3, #4
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	e021      	b.n	8001da0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001d5c:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d62:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001d66:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d6e:	d011      	beq.n	8001d94 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d76:	d810      	bhi.n	8001d9a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d004      	beq.n	8001d88 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d84:	d003      	beq.n	8001d8e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001d86:	e008      	b.n	8001d9a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
        break;
 8001d8c:	e008      	b.n	8001da0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
        break;
 8001d92:	e005      	b.n	8001da0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001d94:	2302      	movs	r3, #2
 8001d96:	607b      	str	r3, [r7, #4]
        break;
 8001d98:	e002      	b.n	8001da0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
        break;
 8001d9e:	bf00      	nop
    }
  }
  return systick_source;
 8001da0:	687b      	ldr	r3, [r7, #4]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010
 8001db4:	46020c00 	.word	0x46020c00

08001db8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001dca:	e1ba      	b.n	8002142 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 81aa 	beq.w	800213c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a55      	ldr	r2, [pc, #340]	@ (8001f40 <HAL_GPIO_Init+0x188>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d15d      	bne.n	8001eac <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001df6:	2201      	movs	r2, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0201 	and.w	r2, r3, #1
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001e20:	4a48      	ldr	r2, [pc, #288]	@ (8001f44 <HAL_GPIO_Init+0x18c>)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e28:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001e2a:	4a46      	ldr	r2, [pc, #280]	@ (8001f44 <HAL_GPIO_Init+0x18c>)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e42:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	220b      	movs	r2, #11
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	08da      	lsrs	r2, r3, #3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	3208      	adds	r2, #8
 8001e76:	69f9      	ldr	r1, [r7, #28]
 8001e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2202      	movs	r2, #2
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e067      	b.n	8001f7c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x104>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b12      	cmp	r3, #18
 8001eba:	d145      	bne.n	8001f48 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f003 020f 	and.w	r2, r3, #15
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	08da      	lsrs	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3208      	adds	r2, #8
 8001f02:	69f9      	ldr	r1, [r7, #28]
 8001f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0203 	and.w	r2, r3, #3
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e01e      	b.n	8001f7c <HAL_GPIO_Init+0x1c4>
 8001f3e:	bf00      	nop
 8001f40:	46020000 	.word	0x46020000
 8001f44:	0800493c 	.word	0x0800493c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d00b      	beq.n	8001f9c <HAL_GPIO_Init+0x1e4>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d007      	beq.n	8001f9c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f90:	2b11      	cmp	r3, #17
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b12      	cmp	r3, #18
 8001f9a:	d130      	bne.n	8001ffe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 0201 	and.w	r2, r3, #1
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d017      	beq.n	8002036 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	4013      	ands	r3, r2
 800201c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	4313      	orrs	r3, r2
 800202e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d07c      	beq.n	800213c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002042:	4a47      	ldr	r2, [pc, #284]	@ (8002160 <HAL_GPIO_Init+0x3a8>)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3318      	adds	r3, #24
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	4013      	ands	r3, r2
 8002064:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0a9a      	lsrs	r2, r3, #10
 800206a:	4b3e      	ldr	r3, [pc, #248]	@ (8002164 <HAL_GPIO_Init+0x3ac>)
 800206c:	4013      	ands	r3, r2
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	00d2      	lsls	r2, r2, #3
 8002076:	4093      	lsls	r3, r2
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	4313      	orrs	r3, r2
 800207c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800207e:	4938      	ldr	r1, [pc, #224]	@ (8002160 <HAL_GPIO_Init+0x3a8>)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3318      	adds	r3, #24
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800208c:	4b34      	ldr	r3, [pc, #208]	@ (8002160 <HAL_GPIO_Init+0x3a8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	4013      	ands	r3, r2
 800209a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80020b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002160 <HAL_GPIO_Init+0x3a8>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80020b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <HAL_GPIO_Init+0x3a8>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80020da:	4a21      	ldr	r2, [pc, #132]	@ (8002160 <HAL_GPIO_Init+0x3a8>)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <HAL_GPIO_Init+0x3a8>)
 80020e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002106:	4a16      	ldr	r2, [pc, #88]	@ (8002160 <HAL_GPIO_Init+0x3a8>)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800210e:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <HAL_GPIO_Init+0x3a8>)
 8002110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002114:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	4013      	ands	r3, r2
 800211e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002134:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <HAL_GPIO_Init+0x3a8>)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3301      	adds	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	f47f ae3d 	bne.w	8001dcc <HAL_GPIO_Init+0x14>
  }
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	3724      	adds	r7, #36	@ 0x24
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	46022000 	.word	0x46022000
 8002164:	002f7f7f 	.word	0x002f7f7f

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002184:	e002      	b.n	800218c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80021a0:	4b39      	ldr	r3, [pc, #228]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d10b      	bne.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b8:	d905      	bls.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80021ba:	4b33      	ldr	r3, [pc, #204]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4a32      	ldr	r2, [pc, #200]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e057      	b.n	800227a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d0:	d90a      	bls.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80021d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4313      	orrs	r3, r2
 80021de:	4a2a      	ldr	r2, [pc, #168]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021e4:	60d3      	str	r3, [r2, #12]
 80021e6:	e007      	b.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80021f0:	4925      	ldr	r1, [pc, #148]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80021f8:	4b24      	ldr	r3, [pc, #144]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a24      	ldr	r2, [pc, #144]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	2232      	movs	r2, #50	@ 0x32
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	4a21      	ldr	r2, [pc, #132]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	3301      	adds	r3, #1
 8002214:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002216:	e002      	b.n	800221e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3b01      	subs	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800221e:	4b1a      	ldr	r3, [pc, #104]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x98>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f3      	bne.n	8002218 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01b      	beq.n	800226e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a15      	ldr	r2, [pc, #84]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	2232      	movs	r2, #50	@ 0x32
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	099b      	lsrs	r3, r3, #6
 8002250:	3301      	adds	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002254:	e002      	b.n	800225c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3b01      	subs	r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800225c:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f3      	bne.n	8002256 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e000      	b.n	800227a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	46020800 	.word	0x46020800
 800228c:	20000000 	.word	0x20000000
 8002290:	10624dd3 	.word	0x10624dd3

08002294 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002298:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <HAL_PWREx_GetVoltageRange+0x18>)
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	46020800 	.word	0x46020800

080022b0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80022b4:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	4a04      	ldr	r2, [pc, #16]	@ (80022cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022be:	6113      	str	r3, [r2, #16]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	46020800 	.word	0x46020800

080022d0 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80022d4:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <HAL_PWREx_EnableVddA+0x1c>)
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <HAL_PWREx_EnableVddA+0x1c>)
 80022da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80022de:	6113      	str	r3, [r2, #16]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	46020800 	.word	0x46020800

080022f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08e      	sub	sp, #56	@ 0x38
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	f000 bec8 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800230a:	4b99      	ldr	r3, [pc, #612]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002314:	4b96      	ldr	r3, [pc, #600]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 816c 	beq.w	8002604 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800232c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <HAL_RCC_OscConfig+0x52>
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002334:	2b0c      	cmp	r3, #12
 8002336:	f040 80de 	bne.w	80024f6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800233a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233c:	2b01      	cmp	r3, #1
 800233e:	f040 80da 	bne.w	80024f6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f000 bea5 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002354:	4b86      	ldr	r3, [pc, #536]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_RCC_OscConfig+0x7a>
 8002360:	4b83      	ldr	r3, [pc, #524]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002368:	e005      	b.n	8002376 <HAL_RCC_OscConfig+0x86>
 800236a:	4b81      	ldr	r3, [pc, #516]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800236c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002376:	4293      	cmp	r3, r2
 8002378:	d255      	bcs.n	8002426 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800237a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	4618      	mov	r0, r3
 8002386:	f001 f9a1 	bl	80036cc <RCC_SetFlashLatencyFromMSIRange>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	f000 be82 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002396:	4b76      	ldr	r3, [pc, #472]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4a75      	ldr	r2, [pc, #468]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800239c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023a0:	6093      	str	r3, [r2, #8]
 80023a2:	4b73      	ldr	r3, [pc, #460]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	4970      	ldr	r1, [pc, #448]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80023bc:	d309      	bcc.n	80023d2 <HAL_RCC_OscConfig+0xe2>
 80023be:	4b6c      	ldr	r3, [pc, #432]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f023 021f 	bic.w	r2, r3, #31
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4969      	ldr	r1, [pc, #420]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60cb      	str	r3, [r1, #12]
 80023d0:	e07e      	b.n	80024d0 <HAL_RCC_OscConfig+0x1e0>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	da0a      	bge.n	80023f0 <HAL_RCC_OscConfig+0x100>
 80023da:	4b65      	ldr	r3, [pc, #404]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	015b      	lsls	r3, r3, #5
 80023e8:	4961      	ldr	r1, [pc, #388]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60cb      	str	r3, [r1, #12]
 80023ee:	e06f      	b.n	80024d0 <HAL_RCC_OscConfig+0x1e0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f8:	d30a      	bcc.n	8002410 <HAL_RCC_OscConfig+0x120>
 80023fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	029b      	lsls	r3, r3, #10
 8002408:	4959      	ldr	r1, [pc, #356]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800240a:	4313      	orrs	r3, r2
 800240c:	60cb      	str	r3, [r1, #12]
 800240e:	e05f      	b.n	80024d0 <HAL_RCC_OscConfig+0x1e0>
 8002410:	4b57      	ldr	r3, [pc, #348]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	03db      	lsls	r3, r3, #15
 800241e:	4954      	ldr	r1, [pc, #336]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002420:	4313      	orrs	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
 8002424:	e054      	b.n	80024d0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002426:	4b52      	ldr	r3, [pc, #328]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4a51      	ldr	r2, [pc, #324]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800242c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002430:	6093      	str	r3, [r2, #8]
 8002432:	4b4f      	ldr	r3, [pc, #316]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	494c      	ldr	r1, [pc, #304]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800244c:	d309      	bcc.n	8002462 <HAL_RCC_OscConfig+0x172>
 800244e:	4b48      	ldr	r3, [pc, #288]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f023 021f 	bic.w	r2, r3, #31
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4945      	ldr	r1, [pc, #276]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800245c:	4313      	orrs	r3, r2
 800245e:	60cb      	str	r3, [r1, #12]
 8002460:	e028      	b.n	80024b4 <HAL_RCC_OscConfig+0x1c4>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	2b00      	cmp	r3, #0
 8002468:	da0a      	bge.n	8002480 <HAL_RCC_OscConfig+0x190>
 800246a:	4b41      	ldr	r3, [pc, #260]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	493d      	ldr	r1, [pc, #244]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800247a:	4313      	orrs	r3, r2
 800247c:	60cb      	str	r3, [r1, #12]
 800247e:	e019      	b.n	80024b4 <HAL_RCC_OscConfig+0x1c4>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002488:	d30a      	bcc.n	80024a0 <HAL_RCC_OscConfig+0x1b0>
 800248a:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	029b      	lsls	r3, r3, #10
 8002498:	4935      	ldr	r1, [pc, #212]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800249a:	4313      	orrs	r3, r2
 800249c:	60cb      	str	r3, [r1, #12]
 800249e:	e009      	b.n	80024b4 <HAL_RCC_OscConfig+0x1c4>
 80024a0:	4b33      	ldr	r3, [pc, #204]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	03db      	lsls	r3, r3, #15
 80024ae:	4930      	ldr	r1, [pc, #192]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 f904 	bl	80036cc <RCC_SetFlashLatencyFromMSIRange>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f000 bde5 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80024d0:	f001 f8e2 	bl	8003698 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024d4:	4b27      	ldr	r3, [pc, #156]	@ (8002574 <HAL_RCC_OscConfig+0x284>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fe83 	bl	80011e4 <HAL_InitTick>
 80024de:	4603      	mov	r3, r0
 80024e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80024e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 808a 	beq.w	8002602 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80024ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024f2:	f000 bdd2 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d066      	beq.n	80025cc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80024fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1b      	ldr	r2, [pc, #108]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800250a:	f7fe fef5 	bl	80012f8 <HAL_GetTick>
 800250e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002510:	e009      	b.n	8002526 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002512:	f7fe fef1 	bl	80012f8 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d902      	bls.n	8002526 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	f000 bdba 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002526:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ef      	beq.n	8002512 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002532:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4a0e      	ldr	r2, [pc, #56]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002538:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800253c:	6093      	str	r3, [r2, #8]
 800253e:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	4909      	ldr	r1, [pc, #36]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002558:	d30e      	bcc.n	8002578 <HAL_RCC_OscConfig+0x288>
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 021f 	bic.w	r2, r3, #31
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4902      	ldr	r1, [pc, #8]	@ (8002570 <HAL_RCC_OscConfig+0x280>)
 8002568:	4313      	orrs	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
 800256c:	e04a      	b.n	8002604 <HAL_RCC_OscConfig+0x314>
 800256e:	bf00      	nop
 8002570:	46020c00 	.word	0x46020c00
 8002574:	20000004 	.word	0x20000004
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	2b00      	cmp	r3, #0
 800257e:	da0a      	bge.n	8002596 <HAL_RCC_OscConfig+0x2a6>
 8002580:	4b98      	ldr	r3, [pc, #608]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	015b      	lsls	r3, r3, #5
 800258e:	4995      	ldr	r1, [pc, #596]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
 8002594:	e036      	b.n	8002604 <HAL_RCC_OscConfig+0x314>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800259e:	d30a      	bcc.n	80025b6 <HAL_RCC_OscConfig+0x2c6>
 80025a0:	4b90      	ldr	r3, [pc, #576]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	498d      	ldr	r1, [pc, #564]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
 80025b4:	e026      	b.n	8002604 <HAL_RCC_OscConfig+0x314>
 80025b6:	4b8b      	ldr	r3, [pc, #556]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	03db      	lsls	r3, r3, #15
 80025c4:	4987      	ldr	r1, [pc, #540]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60cb      	str	r3, [r1, #12]
 80025ca:	e01b      	b.n	8002604 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80025cc:	4b85      	ldr	r3, [pc, #532]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a84      	ldr	r2, [pc, #528]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80025d8:	f7fe fe8e 	bl	80012f8 <HAL_GetTick>
 80025dc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80025de:	e009      	b.n	80025f4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025e0:	f7fe fe8a 	bl	80012f8 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d902      	bls.n	80025f4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	f000 bd53 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80025f4:	4b7b      	ldr	r3, [pc, #492]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ef      	bne.n	80025e0 <HAL_RCC_OscConfig+0x2f0>
 8002600:	e000      	b.n	8002604 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002602:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 808b 	beq.w	8002728 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002614:	2b08      	cmp	r3, #8
 8002616:	d005      	beq.n	8002624 <HAL_RCC_OscConfig+0x334>
 8002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d109      	bne.n	8002632 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800261e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002620:	2b03      	cmp	r3, #3
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d17d      	bne.n	8002728 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f000 bd34 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x35a>
 800263c:	4b69      	ldr	r3, [pc, #420]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a68      	ldr	r2, [pc, #416]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e041      	b.n	80026ce <HAL_RCC_OscConfig+0x3de>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002652:	d112      	bne.n	800267a <HAL_RCC_OscConfig+0x38a>
 8002654:	4b63      	ldr	r3, [pc, #396]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a62      	ldr	r2, [pc, #392]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b60      	ldr	r3, [pc, #384]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5f      	ldr	r2, [pc, #380]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b5d      	ldr	r3, [pc, #372]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a5c      	ldr	r2, [pc, #368]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e029      	b.n	80026ce <HAL_RCC_OscConfig+0x3de>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002682:	d112      	bne.n	80026aa <HAL_RCC_OscConfig+0x3ba>
 8002684:	4b57      	ldr	r3, [pc, #348]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a56      	ldr	r2, [pc, #344]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b54      	ldr	r3, [pc, #336]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a53      	ldr	r2, [pc, #332]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b51      	ldr	r3, [pc, #324]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a50      	ldr	r2, [pc, #320]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	e011      	b.n	80026ce <HAL_RCC_OscConfig+0x3de>
 80026aa:	4b4e      	ldr	r3, [pc, #312]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a4d      	ldr	r2, [pc, #308]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b4b      	ldr	r3, [pc, #300]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a4a      	ldr	r2, [pc, #296]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b48      	ldr	r3, [pc, #288]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a47      	ldr	r2, [pc, #284]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d014      	beq.n	8002700 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80026d6:	f7fe fe0f 	bl	80012f8 <HAL_GetTick>
 80026da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026dc:	e009      	b.n	80026f2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026de:	f7fe fe0b 	bl	80012f8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b64      	cmp	r3, #100	@ 0x64
 80026ea:	d902      	bls.n	80026f2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	f000 bcd4 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f2:	4b3c      	ldr	r3, [pc, #240]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0ef      	beq.n	80026de <HAL_RCC_OscConfig+0x3ee>
 80026fe:	e013      	b.n	8002728 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002700:	f7fe fdfa 	bl	80012f8 <HAL_GetTick>
 8002704:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002706:	e009      	b.n	800271c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe fdf6 	bl	80012f8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	@ 0x64
 8002714:	d902      	bls.n	800271c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	f000 bcbf 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271c:	4b31      	ldr	r3, [pc, #196]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ef      	bne.n	8002708 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d05f      	beq.n	80027f4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	2b04      	cmp	r3, #4
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x456>
 800273a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d114      	bne.n	800276a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002742:	2b02      	cmp	r3, #2
 8002744:	d111      	bne.n	800276a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	f000 bca3 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b23      	ldr	r3, [pc, #140]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	4920      	ldr	r1, [pc, #128]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	4313      	orrs	r3, r2
 8002766:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002768:	e044      	b.n	80027f4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d024      	beq.n	80027bc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002772:	4b1c      	ldr	r3, [pc, #112]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1b      	ldr	r2, [pc, #108]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800277e:	f7fe fdbb 	bl	80012f8 <HAL_GetTick>
 8002782:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002784:	e009      	b.n	800279a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002786:	f7fe fdb7 	bl	80012f8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d902      	bls.n	800279a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	f000 bc80 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279a:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ef      	beq.n	8002786 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80027a6:	4b0f      	ldr	r3, [pc, #60]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	490b      	ldr	r1, [pc, #44]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	610b      	str	r3, [r1, #16]
 80027ba:	e01b      	b.n	80027f4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a08      	ldr	r2, [pc, #32]	@ (80027e4 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027c6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027c8:	f7fe fd96 	bl	80012f8 <HAL_GetTick>
 80027cc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ce:	e00b      	b.n	80027e8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d0:	f7fe fd92 	bl	80012f8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d904      	bls.n	80027e8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	f000 bc5b 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
 80027e4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e8:	4baf      	ldr	r3, [pc, #700]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ed      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80c8 	beq.w	8002992 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002808:	4ba7      	ldr	r3, [pc, #668]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 800280a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d111      	bne.n	800283a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	4ba4      	ldr	r3, [pc, #656]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800281c:	4aa2      	ldr	r2, [pc, #648]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002826:	4ba0      	ldr	r3, [pc, #640]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800283a:	4b9c      	ldr	r3, [pc, #624]	@ (8002aac <HAL_RCC_OscConfig+0x7bc>)
 800283c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d119      	bne.n	800287a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002846:	4b99      	ldr	r3, [pc, #612]	@ (8002aac <HAL_RCC_OscConfig+0x7bc>)
 8002848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284a:	4a98      	ldr	r2, [pc, #608]	@ (8002aac <HAL_RCC_OscConfig+0x7bc>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002852:	f7fe fd51 	bl	80012f8 <HAL_GetTick>
 8002856:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002858:	e009      	b.n	800286e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7fe fd4d 	bl	80012f8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d902      	bls.n	800286e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	f000 bc16 	b.w	800309a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800286e:	4b8f      	ldr	r3, [pc, #572]	@ (8002aac <HAL_RCC_OscConfig+0x7bc>)
 8002870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ef      	beq.n	800285a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d05f      	beq.n	8002942 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002882:	4b89      	ldr	r3, [pc, #548]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002888:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002894:	429a      	cmp	r2, r3
 8002896:	d037      	beq.n	8002908 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e3f4      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80028ba:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 80028bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c0:	4a79      	ldr	r2, [pc, #484]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 80028c2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80028c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80028ca:	f7fe fd15 	bl	80012f8 <HAL_GetTick>
 80028ce:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d2:	f7fe fd11 	bl	80012f8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e3da      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028e4:	4b70      	ldr	r3, [pc, #448]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 80028e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ef      	bne.n	80028d2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80028f2:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 80028f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4969      	ldr	r1, [pc, #420]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002908:	4b67      	ldr	r3, [pc, #412]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 800290a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800290e:	4a66      	ldr	r2, [pc, #408]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002910:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002914:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002918:	f7fe fcee 	bl	80012f8 <HAL_GetTick>
 800291c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002920:	f7fe fcea 	bl	80012f8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b05      	cmp	r3, #5
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e3b3      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002932:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ef      	beq.n	8002920 <HAL_RCC_OscConfig+0x630>
 8002940:	e01b      	b.n	800297a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002942:	4b59      	ldr	r3, [pc, #356]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002948:	4a57      	ldr	r2, [pc, #348]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 800294a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800294e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002952:	f7fe fcd1 	bl	80012f8 <HAL_GetTick>
 8002956:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295a:	f7fe fccd 	bl	80012f8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b05      	cmp	r3, #5
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e396      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800296c:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 800296e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002972:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ef      	bne.n	800295a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800297a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4b49      	ldr	r3, [pc, #292]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002988:	4a47      	ldr	r2, [pc, #284]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8111 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a6:	4b40      	ldr	r3, [pc, #256]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 80029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d111      	bne.n	80029d8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b4:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 80029b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ba:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80029c4:	4b38      	ldr	r3, [pc, #224]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029d8:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCC_OscConfig+0x7bc>)
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d118      	bne.n	8002a16 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80029e4:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_RCC_OscConfig+0x7bc>)
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	4a30      	ldr	r2, [pc, #192]	@ (8002aac <HAL_RCC_OscConfig+0x7bc>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f0:	f7fe fc82 	bl	80012f8 <HAL_GetTick>
 80029f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7fe fc7e 	bl	80012f8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e347      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a0a:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <HAL_RCC_OscConfig+0x7bc>)
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01f      	beq.n	8002a62 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d010      	beq.n	8002a50 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a34:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a44:	4a18      	ldr	r2, [pc, #96]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a4e:	e018      	b.n	8002a82 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a50:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a56:	4a14      	ldr	r2, [pc, #80]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a60:	e00f      	b.n	8002a82 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a62:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a68:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a72:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a78:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa8 <HAL_RCC_OscConfig+0x7b8>)
 8002a7a:	f023 0304 	bic.w	r3, r3, #4
 8002a7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d057      	beq.n	8002b3a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fc35 	bl	80012f8 <HAL_GetTick>
 8002a8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a90:	e00e      	b.n	8002ab0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe fc31 	bl	80012f8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d905      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e2f8      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
 8002aa8:	46020c00 	.word	0x46020c00
 8002aac:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0e9      	beq.n	8002a92 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002aca:	4b96      	ldr	r3, [pc, #600]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ad0:	4a94      	ldr	r2, [pc, #592]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe fc0c 	bl	80012f8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e2d3      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002af2:	4b8c      	ldr	r3, [pc, #560]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002af8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ed      	beq.n	8002adc <HAL_RCC_OscConfig+0x7ec>
 8002b00:	e053      	b.n	8002baa <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b02:	4b88      	ldr	r3, [pc, #544]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b08:	4a86      	ldr	r2, [pc, #536]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7fe fbf0 	bl	80012f8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e2b7      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b2a:	4b7e      	ldr	r3, [pc, #504]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ed      	bne.n	8002b14 <HAL_RCC_OscConfig+0x824>
 8002b38:	e037      	b.n	8002baa <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fbdd 	bl	80012f8 <HAL_GetTick>
 8002b3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fbd9 	bl	80012f8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e2a0      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b58:	4b72      	ldr	r3, [pc, #456]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ed      	bne.n	8002b42 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002b66:	4b6f      	ldr	r3, [pc, #444]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01a      	beq.n	8002baa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b74:	4b6b      	ldr	r3, [pc, #428]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b7a:	4a6a      	ldr	r2, [pc, #424]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fbb7 	bl	80012f8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e27e      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b9c:	4b61      	ldr	r3, [pc, #388]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ed      	bne.n	8002b86 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002baa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002bba:	f023 0304 	bic.w	r3, r3, #4
 8002bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d036      	beq.n	8002c3c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d019      	beq.n	8002c0a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002bd6:	4b53      	ldr	r3, [pc, #332]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a52      	ldr	r2, [pc, #328]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002bdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002be0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002be2:	f7fe fb89 	bl	80012f8 <HAL_GetTick>
 8002be6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bea:	f7fe fb85 	bl	80012f8 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e24e      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002bfc:	4b49      	ldr	r3, [pc, #292]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x8fa>
 8002c08:	e018      	b.n	8002c3c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002c0a:	4b46      	ldr	r3, [pc, #280]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a45      	ldr	r2, [pc, #276]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002c10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c14:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c16:	f7fe fb6f 	bl	80012f8 <HAL_GetTick>
 8002c1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c1e:	f7fe fb6b 	bl	80012f8 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e234      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c30:	4b3c      	ldr	r3, [pc, #240]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d036      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d019      	beq.n	8002c84 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002c50:	4b34      	ldr	r3, [pc, #208]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a33      	ldr	r2, [pc, #204]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002c56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c5a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c5c:	f7fe fb4c 	bl	80012f8 <HAL_GetTick>
 8002c60:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002c64:	f7fe fb48 	bl	80012f8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e211      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c76:	4b2b      	ldr	r3, [pc, #172]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x974>
 8002c82:	e018      	b.n	8002cb6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002c84:	4b27      	ldr	r3, [pc, #156]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a26      	ldr	r2, [pc, #152]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002c8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c8e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c90:	f7fe fb32 	bl	80012f8 <HAL_GetTick>
 8002c94:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002c98:	f7fe fb2e 	bl	80012f8 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1f7      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002caa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d07f      	beq.n	8002dc2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d062      	beq.n	8002d90 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002cca:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	4a15      	ldr	r2, [pc, #84]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002cd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cd4:	6093      	str	r3, [r2, #8]
 8002cd6:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce2:	4910      	ldr	r1, [pc, #64]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002cf0:	d309      	bcc.n	8002d06 <HAL_RCC_OscConfig+0xa16>
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f023 021f 	bic.w	r2, r3, #31
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4909      	ldr	r1, [pc, #36]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
 8002d04:	e02a      	b.n	8002d5c <HAL_RCC_OscConfig+0xa6c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	da0c      	bge.n	8002d28 <HAL_RCC_OscConfig+0xa38>
 8002d0e:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	015b      	lsls	r3, r3, #5
 8002d1c:	4901      	ldr	r1, [pc, #4]	@ (8002d24 <HAL_RCC_OscConfig+0xa34>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]
 8002d22:	e01b      	b.n	8002d5c <HAL_RCC_OscConfig+0xa6c>
 8002d24:	46020c00 	.word	0x46020c00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d30:	d30a      	bcc.n	8002d48 <HAL_RCC_OscConfig+0xa58>
 8002d32:	4ba1      	ldr	r3, [pc, #644]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	029b      	lsls	r3, r3, #10
 8002d40:	499d      	ldr	r1, [pc, #628]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60cb      	str	r3, [r1, #12]
 8002d46:	e009      	b.n	8002d5c <HAL_RCC_OscConfig+0xa6c>
 8002d48:	4b9b      	ldr	r3, [pc, #620]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	03db      	lsls	r3, r3, #15
 8002d56:	4998      	ldr	r1, [pc, #608]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002d5c:	4b96      	ldr	r3, [pc, #600]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a95      	ldr	r2, [pc, #596]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002d62:	f043 0310 	orr.w	r3, r3, #16
 8002d66:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d68:	f7fe fac6 	bl	80012f8 <HAL_GetTick>
 8002d6c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002d70:	f7fe fac2 	bl	80012f8 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e18b      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002d82:	4b8d      	ldr	r3, [pc, #564]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0xa80>
 8002d8e:	e018      	b.n	8002dc2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002d90:	4b89      	ldr	r3, [pc, #548]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a88      	ldr	r2, [pc, #544]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002d96:	f023 0310 	bic.w	r3, r3, #16
 8002d9a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d9c:	f7fe faac 	bl	80012f8 <HAL_GetTick>
 8002da0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002da4:	f7fe faa8 	bl	80012f8 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e171      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002db6:	4b80      	ldr	r3, [pc, #512]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8166 	beq.w	8003098 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd2:	4b79      	ldr	r3, [pc, #484]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	f000 80f2 	beq.w	8002fc4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	f040 80c5 	bne.w	8002f74 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b73      	ldr	r3, [pc, #460]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a72      	ldr	r2, [pc, #456]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002df0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002df4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002df6:	f7fe fa7f 	bl	80012f8 <HAL_GetTick>
 8002dfa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fa7b 	bl	80012f8 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e144      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e10:	4b69      	ldr	r3, [pc, #420]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1c:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d111      	bne.n	8002e4e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b63      	ldr	r3, [pc, #396]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e30:	4a61      	ldr	r2, [pc, #388]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fbc <HAL_RCC_OscConfig+0xccc>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002e62:	4b56      	ldr	r3, [pc, #344]	@ (8002fbc <HAL_RCC_OscConfig+0xccc>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4a55      	ldr	r2, [pc, #340]	@ (8002fbc <HAL_RCC_OscConfig+0xccc>)
 8002e68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e6c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002e6e:	4b52      	ldr	r3, [pc, #328]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e82:	3a01      	subs	r2, #1
 8002e84:	0212      	lsls	r2, r2, #8
 8002e86:	4311      	orrs	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	494a      	ldr	r1, [pc, #296]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e94:	4b48      	ldr	r3, [pc, #288]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e98:	4b49      	ldr	r3, [pc, #292]	@ (8002fc0 <HAL_RCC_OscConfig+0xcd0>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002eaa:	3a01      	subs	r2, #1
 8002eac:	0252      	lsls	r2, r2, #9
 8002eae:	b292      	uxth	r2, r2
 8002eb0:	4311      	orrs	r1, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	0412      	lsls	r2, r2, #16
 8002eba:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002ec4:	3a01      	subs	r2, #1
 8002ec6:	0612      	lsls	r2, r2, #24
 8002ec8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	493a      	ldr	r1, [pc, #232]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002ed4:	4b38      	ldr	r3, [pc, #224]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	4a37      	ldr	r2, [pc, #220]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002eda:	f023 0310 	bic.w	r3, r3, #16
 8002ede:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	4a34      	ldr	r2, [pc, #208]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002eea:	4b33      	ldr	r3, [pc, #204]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	4a32      	ldr	r2, [pc, #200]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002ef0:	f043 0310 	orr.w	r3, r3, #16
 8002ef4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002ef6:	4b30      	ldr	r3, [pc, #192]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	f023 020c 	bic.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f02:	492d      	ldr	r1, [pc, #180]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002f08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002f10:	4b2a      	ldr	r3, [pc, #168]	@ (8002fbc <HAL_RCC_OscConfig+0xccc>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a29      	ldr	r2, [pc, #164]	@ (8002fbc <HAL_RCC_OscConfig+0xccc>)
 8002f16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f1a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002f1c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002f24:	4b24      	ldr	r3, [pc, #144]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f2a:	4a23      	ldr	r2, [pc, #140]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002f34:	4b20      	ldr	r3, [pc, #128]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f3e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f40:	f7fe f9da 	bl	80012f8 <HAL_GetTick>
 8002f44:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe f9d6 	bl	80012f8 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e09f      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f5a:	4b17      	ldr	r3, [pc, #92]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f66:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6a:	4a13      	ldr	r2, [pc, #76]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f70:	6293      	str	r3, [r2, #40]	@ 0x28
 8002f72:	e091      	b.n	8003098 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002f74:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f80:	f7fe f9ba 	bl	80012f8 <HAL_GetTick>
 8002f84:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe f9b6 	bl	80012f8 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e07f      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f9a:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002fa6:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	4a03      	ldr	r2, [pc, #12]	@ (8002fb8 <HAL_RCC_OscConfig+0xcc8>)
 8002fac:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002fb0:	f023 0303 	bic.w	r3, r3, #3
 8002fb4:	6293      	str	r3, [r2, #40]	@ 0x28
 8002fb6:	e06f      	b.n	8003098 <HAL_RCC_OscConfig+0xda8>
 8002fb8:	46020c00 	.word	0x46020c00
 8002fbc:	46020800 	.word	0x46020800
 8002fc0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002fc4:	4b37      	ldr	r3, [pc, #220]	@ (80030a4 <HAL_RCC_OscConfig+0xdb4>)
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fca:	4b36      	ldr	r3, [pc, #216]	@ (80030a4 <HAL_RCC_OscConfig+0xdb4>)
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fce:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d039      	beq.n	800304c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0203 	and.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d132      	bne.n	800304c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d129      	bne.n	800304c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d122      	bne.n	800304c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003010:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d11a      	bne.n	800304c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	0a5b      	lsrs	r3, r3, #9
 800301a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003022:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d111      	bne.n	800304c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	0c1b      	lsrs	r3, r3, #16
 800302c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003034:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d108      	bne.n	800304c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	0e1b      	lsrs	r3, r3, #24
 800303e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003046:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e024      	b.n	800309a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003050:	4b14      	ldr	r3, [pc, #80]	@ (80030a4 <HAL_RCC_OscConfig+0xdb4>)
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800305e:	429a      	cmp	r2, r3
 8003060:	d01a      	beq.n	8003098 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003062:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <HAL_RCC_OscConfig+0xdb4>)
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	4a0f      	ldr	r2, [pc, #60]	@ (80030a4 <HAL_RCC_OscConfig+0xdb4>)
 8003068:	f023 0310 	bic.w	r3, r3, #16
 800306c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe f943 	bl	80012f8 <HAL_GetTick>
 8003072:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003074:	bf00      	nop
 8003076:	f7fe f93f 	bl	80012f8 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307e:	4293      	cmp	r3, r2
 8003080:	d0f9      	beq.n	8003076 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	4a07      	ldr	r2, [pc, #28]	@ (80030a4 <HAL_RCC_OscConfig+0xdb4>)
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800308c:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <HAL_RCC_OscConfig+0xdb4>)
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	4a04      	ldr	r2, [pc, #16]	@ (80030a4 <HAL_RCC_OscConfig+0xdb4>)
 8003092:	f043 0310 	orr.w	r3, r3, #16
 8003096:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3738      	adds	r7, #56	@ 0x38
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	46020c00 	.word	0x46020c00

080030a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e1d9      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	4b9b      	ldr	r3, [pc, #620]	@ (800332c <HAL_RCC_ClockConfig+0x284>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d910      	bls.n	80030ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b98      	ldr	r3, [pc, #608]	@ (800332c <HAL_RCC_ClockConfig+0x284>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 020f 	bic.w	r2, r3, #15
 80030d2:	4996      	ldr	r1, [pc, #600]	@ (800332c <HAL_RCC_ClockConfig+0x284>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b94      	ldr	r3, [pc, #592]	@ (800332c <HAL_RCC_ClockConfig+0x284>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e1c1      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003104:	429a      	cmp	r2, r3
 8003106:	d908      	bls.n	800311a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003108:	4b89      	ldr	r3, [pc, #548]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	4986      	ldr	r1, [pc, #536]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 8003116:	4313      	orrs	r3, r2
 8003118:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d012      	beq.n	800314c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	4b81      	ldr	r3, [pc, #516]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003134:	429a      	cmp	r2, r3
 8003136:	d909      	bls.n	800314c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003138:	4b7d      	ldr	r3, [pc, #500]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	497a      	ldr	r1, [pc, #488]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 8003148:	4313      	orrs	r3, r2
 800314a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b74      	ldr	r3, [pc, #464]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003164:	429a      	cmp	r2, r3
 8003166:	d908      	bls.n	800317a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b71      	ldr	r3, [pc, #452]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	496e      	ldr	r1, [pc, #440]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 8003176:	4313      	orrs	r3, r2
 8003178:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	4b69      	ldr	r3, [pc, #420]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	429a      	cmp	r2, r3
 8003194:	d908      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003196:	4b66      	ldr	r3, [pc, #408]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f023 020f 	bic.w	r2, r3, #15
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	4963      	ldr	r1, [pc, #396]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80d2 	beq.w	800335a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d143      	bne.n	800324a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d110      	bne.n	80031f2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031d0:	4b57      	ldr	r3, [pc, #348]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d6:	4a56      	ldr	r2, [pc, #344]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80031e0:	4b53      	ldr	r3, [pc, #332]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80031ee:	2301      	movs	r3, #1
 80031f0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80031f2:	f7fe f881 	bl	80012f8 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80031f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003334 <HAL_RCC_ClockConfig+0x28c>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00f      	beq.n	8003224 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003206:	f7fe f877 	bl	80012f8 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e12b      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003218:	4b46      	ldr	r3, [pc, #280]	@ (8003334 <HAL_RCC_ClockConfig+0x28c>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003224:	7dfb      	ldrb	r3, [r7, #23]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800322a:	4b41      	ldr	r3, [pc, #260]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800322c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003230:	4a3f      	ldr	r2, [pc, #252]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 8003232:	f023 0304 	bic.w	r3, r3, #4
 8003236:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800323a:	4b3d      	ldr	r3, [pc, #244]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d121      	bne.n	800328a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e112      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003252:	4b37      	ldr	r3, [pc, #220]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d115      	bne.n	800328a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e106      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800326a:	4b31      	ldr	r3, [pc, #196]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0fa      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327a:	4b2d      	ldr	r3, [pc, #180]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0f2      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b29      	ldr	r3, [pc, #164]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4926      	ldr	r1, [pc, #152]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 8003298:	4313      	orrs	r3, r2
 800329a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800329c:	f7fe f82c 	bl	80012f8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d112      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fe f824 	bl	80012f8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0d6      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d1ee      	bne.n	80032ac <HAL_RCC_ClockConfig+0x204>
 80032ce:	e044      	b.n	800335a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d112      	bne.n	80032fe <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032da:	f7fe f80d 	bl	80012f8 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0bf      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d1ee      	bne.n	80032da <HAL_RCC_ClockConfig+0x232>
 80032fc:	e02d      	b.n	800335a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d123      	bne.n	800334e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fd fff6 	bl	80012f8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0a8      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800331e:	4b04      	ldr	r3, [pc, #16]	@ (8003330 <HAL_RCC_ClockConfig+0x288>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ee      	bne.n	8003308 <HAL_RCC_ClockConfig+0x260>
 800332a:	e016      	b.n	800335a <HAL_RCC_ClockConfig+0x2b2>
 800332c:	40022000 	.word	0x40022000
 8003330:	46020c00 	.word	0x46020c00
 8003334:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f7fd ffde 	bl	80012f8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e090      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800334e:	4b4a      	ldr	r3, [pc, #296]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b04      	cmp	r3, #4
 8003358:	d1ee      	bne.n	8003338 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d010      	beq.n	8003388 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	4b43      	ldr	r3, [pc, #268]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	429a      	cmp	r2, r3
 8003374:	d208      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003376:	4b40      	ldr	r3, [pc, #256]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	493d      	ldr	r1, [pc, #244]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 8003384:	4313      	orrs	r3, r2
 8003386:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b3c      	ldr	r3, [pc, #240]	@ (800347c <HAL_RCC_ClockConfig+0x3d4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d210      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b39      	ldr	r3, [pc, #228]	@ (800347c <HAL_RCC_ClockConfig+0x3d4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 020f 	bic.w	r2, r3, #15
 800339e:	4937      	ldr	r1, [pc, #220]	@ (800347c <HAL_RCC_ClockConfig+0x3d4>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b35      	ldr	r3, [pc, #212]	@ (800347c <HAL_RCC_ClockConfig+0x3d4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e05b      	b.n	8003470 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d010      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d208      	bcs.n	80033e6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	4b28      	ldr	r3, [pc, #160]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4925      	ldr	r1, [pc, #148]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d012      	beq.n	8003418 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003400:	429a      	cmp	r2, r3
 8003402:	d209      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003404:	4b1c      	ldr	r3, [pc, #112]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	4919      	ldr	r1, [pc, #100]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 8003414:	4313      	orrs	r3, r2
 8003416:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	d010      	beq.n	8003446 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	4b13      	ldr	r3, [pc, #76]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003430:	429a      	cmp	r2, r3
 8003432:	d208      	bcs.n	8003446 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003434:	4b10      	ldr	r3, [pc, #64]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	490d      	ldr	r1, [pc, #52]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003446:	f000 f821 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800344a:	4602      	mov	r2, r0
 800344c:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_RCC_ClockConfig+0x3d0>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	490a      	ldr	r1, [pc, #40]	@ (8003480 <HAL_RCC_ClockConfig+0x3d8>)
 8003456:	5ccb      	ldrb	r3, [r1, r3]
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
 800345c:	4a09      	ldr	r2, [pc, #36]	@ (8003484 <HAL_RCC_ClockConfig+0x3dc>)
 800345e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003460:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <HAL_RCC_ClockConfig+0x3e0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd febd 	bl	80011e4 <HAL_InitTick>
 800346a:	4603      	mov	r3, r0
 800346c:	73fb      	strb	r3, [r7, #15]

  return status;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	46020c00 	.word	0x46020c00
 800347c:	40022000 	.word	0x40022000
 8003480:	080048ec 	.word	0x080048ec
 8003484:	20000000 	.word	0x20000000
 8003488:	20000004 	.word	0x20000004

0800348c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800348c:	b480      	push	{r7}
 800348e:	b08b      	sub	sp, #44	@ 0x2c
 8003490:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349a:	4b78      	ldr	r3, [pc, #480]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a4:	4b75      	ldr	r3, [pc, #468]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x34>
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d121      	bne.n	80034fe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d11e      	bne.n	80034fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80034c0:	4b6e      	ldr	r3, [pc, #440]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80034cc:	4b6b      	ldr	r3, [pc, #428]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034d2:	0b1b      	lsrs	r3, r3, #12
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034da:	e005      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80034dc:	4b67      	ldr	r3, [pc, #412]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	0f1b      	lsrs	r3, r3, #28
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034e8:	4a65      	ldr	r2, [pc, #404]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d110      	bne.n	800351a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034fc:	e00d      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034fe:	4b5f      	ldr	r3, [pc, #380]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b04      	cmp	r3, #4
 8003508:	d102      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800350a:	4b5e      	ldr	r3, [pc, #376]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	e004      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b08      	cmp	r3, #8
 8003514:	d101      	bne.n	800351a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003516:	4b5c      	ldr	r3, [pc, #368]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003518:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	f040 80a5 	bne.w	800366c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003522:	4b56      	ldr	r3, [pc, #344]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800352c:	4b53      	ldr	r3, [pc, #332]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800353a:	4b50      	ldr	r3, [pc, #320]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003546:	4b4d      	ldr	r3, [pc, #308]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354a:	08db      	lsrs	r3, r3, #3
 800354c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d003      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0xe4>
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d022      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x128>
 800356e:	e043      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357a:	eddf 6a44 	vldr	s13, [pc, #272]	@ 800368c <HAL_RCC_GetSysClockFreq+0x200>
 800357e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003582:	4b3e      	ldr	r3, [pc, #248]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003592:	ed97 6a01 	vldr	s12, [r7, #4]
 8003596:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003690 <HAL_RCC_GetSysClockFreq+0x204>
 800359a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800359e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035b2:	e046      	b.n	8003642 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035be:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8003694 <HAL_RCC_GetSysClockFreq+0x208>
 80035c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c6:	4b2d      	ldr	r3, [pc, #180]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035d6:	ed97 6a01 	vldr	s12, [r7, #4]
 80035da:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003690 <HAL_RCC_GetSysClockFreq+0x204>
 80035de:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035f6:	e024      	b.n	8003642 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003610:	4b1a      	ldr	r3, [pc, #104]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003620:	ed97 6a01 	vldr	s12, [r7, #4]
 8003624:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8003690 <HAL_RCC_GetSysClockFreq+0x204>
 8003628:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800362c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003630:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003634:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003640:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003642:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003646:	0e1b      	lsrs	r3, r3, #24
 8003648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800364c:	3301      	adds	r3, #1
 800364e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800365a:	edd7 6a07 	vldr	s13, [r7, #28]
 800365e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003666:	ee17 3a90 	vmov	r3, s15
 800366a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800366c:	6a3b      	ldr	r3, [r7, #32]
}
 800366e:	4618      	mov	r0, r3
 8003670:	372c      	adds	r7, #44	@ 0x2c
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	46020c00 	.word	0x46020c00
 8003680:	080048fc 	.word	0x080048fc
 8003684:	00f42400 	.word	0x00f42400
 8003688:	02faf080 	.word	0x02faf080
 800368c:	4b742400 	.word	0x4b742400
 8003690:	46000000 	.word	0x46000000
 8003694:	4c3ebc20 	.word	0x4c3ebc20

08003698 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800369c:	f7ff fef6 	bl	800348c <HAL_RCC_GetSysClockFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <HAL_RCC_GetHCLKFreq+0x28>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	4906      	ldr	r1, [pc, #24]	@ (80036c4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80036ac:	5ccb      	ldrb	r3, [r1, r3]
 80036ae:	fa22 f303 	lsr.w	r3, r2, r3
 80036b2:	4a05      	ldr	r2, [pc, #20]	@ (80036c8 <HAL_RCC_GetHCLKFreq+0x30>)
 80036b4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80036b6:	4b04      	ldr	r3, [pc, #16]	@ (80036c8 <HAL_RCC_GetHCLKFreq+0x30>)
 80036b8:	681b      	ldr	r3, [r3, #0]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	46020c00 	.word	0x46020c00
 80036c4:	080048ec 	.word	0x080048ec
 80036c8:	20000000 	.word	0x20000000

080036cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036d4:	4b3e      	ldr	r3, [pc, #248]	@ (80037d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036e2:	f7fe fdd7 	bl	8002294 <HAL_PWREx_GetVoltageRange>
 80036e6:	6178      	str	r0, [r7, #20]
 80036e8:	e019      	b.n	800371e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f0:	4a37      	ldr	r2, [pc, #220]	@ (80037d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80036fa:	4b35      	ldr	r3, [pc, #212]	@ (80037d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003708:	f7fe fdc4 	bl	8002294 <HAL_PWREx_GetVoltageRange>
 800370c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800370e:	4b30      	ldr	r3, [pc, #192]	@ (80037d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003714:	4a2e      	ldr	r2, [pc, #184]	@ (80037d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003716:	f023 0304 	bic.w	r3, r3, #4
 800371a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003724:	d003      	beq.n	800372e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800372c:	d109      	bne.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003734:	d202      	bcs.n	800373c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003736:	2301      	movs	r3, #1
 8003738:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800373a:	e033      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003740:	e030      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003748:	d208      	bcs.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003750:	d102      	bne.n	8003758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003752:	2303      	movs	r3, #3
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	e025      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e035      	b.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003762:	d90f      	bls.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003770:	d902      	bls.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	e015      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003778:	2301      	movs	r3, #1
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	e012      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e00f      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800378a:	d109      	bne.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003792:	d102      	bne.n	800379a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003794:	2301      	movs	r3, #1
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	e004      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800379a:	2302      	movs	r3, #2
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e001      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80037a0:	2301      	movs	r3, #1
 80037a2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037a4:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 020f 	bic.w	r2, r3, #15
 80037ac:	4909      	ldr	r1, [pc, #36]	@ (80037d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80037b4:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	46020c00 	.word	0x46020c00
 80037d4:	40022000 	.word	0x40022000

080037d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80037d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037dc:	b0b8      	sub	sp, #224	@ 0xe0
 80037de:	af00      	add	r7, sp, #0
 80037e0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037ea:	2300      	movs	r3, #0
 80037ec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f002 0401 	and.w	r4, r2, #1
 80037fc:	2500      	movs	r5, #0
 80037fe:	ea54 0305 	orrs.w	r3, r4, r5
 8003802:	d00b      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003804:	4bca      	ldr	r3, [pc, #808]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800380a:	f023 0103 	bic.w	r1, r3, #3
 800380e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003814:	4ac6      	ldr	r2, [pc, #792]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003816:	430b      	orrs	r3, r1
 8003818:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800381c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f002 0802 	and.w	r8, r2, #2
 8003828:	f04f 0900 	mov.w	r9, #0
 800382c:	ea58 0309 	orrs.w	r3, r8, r9
 8003830:	d00b      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003832:	4bbf      	ldr	r3, [pc, #764]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003838:	f023 010c 	bic.w	r1, r3, #12
 800383c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003842:	4abb      	ldr	r2, [pc, #748]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003844:	430b      	orrs	r3, r1
 8003846:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800384a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f002 0a04 	and.w	sl, r2, #4
 8003856:	f04f 0b00 	mov.w	fp, #0
 800385a:	ea5a 030b 	orrs.w	r3, sl, fp
 800385e:	d00b      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003860:	4bb3      	ldr	r3, [pc, #716]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003866:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800386a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	4aaf      	ldr	r2, [pc, #700]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003872:	430b      	orrs	r3, r1
 8003874:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003878:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f002 0308 	and.w	r3, r2, #8
 8003884:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800388e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003892:	460b      	mov	r3, r1
 8003894:	4313      	orrs	r3, r2
 8003896:	d00b      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003898:	4ba5      	ldr	r3, [pc, #660]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800389a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800389e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	4aa1      	ldr	r2, [pc, #644]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038aa:	430b      	orrs	r3, r1
 80038ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f002 0310 	and.w	r3, r2, #16
 80038bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80038c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80038d0:	4b97      	ldr	r3, [pc, #604]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e0:	4a93      	ldr	r2, [pc, #588]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f002 0320 	and.w	r3, r2, #32
 80038f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003902:	460b      	mov	r3, r1
 8003904:	4313      	orrs	r3, r2
 8003906:	d00b      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003908:	4b89      	ldr	r3, [pc, #548]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800390a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800390e:	f023 0107 	bic.w	r1, r3, #7
 8003912:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003918:	4a85      	ldr	r2, [pc, #532]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800391a:	430b      	orrs	r3, r1
 800391c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003920:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800392c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003930:	2300      	movs	r3, #0
 8003932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003936:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800393a:	460b      	mov	r3, r1
 800393c:	4313      	orrs	r3, r2
 800393e:	d00b      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003940:	4b7b      	ldr	r3, [pc, #492]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003946:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800394a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800394e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003950:	4a77      	ldr	r2, [pc, #476]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003952:	430b      	orrs	r3, r1
 8003954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003958:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003964:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800396e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003972:	460b      	mov	r3, r1
 8003974:	4313      	orrs	r3, r2
 8003976:	d00b      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003978:	4b6d      	ldr	r3, [pc, #436]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800397a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800397e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003982:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003988:	4a69      	ldr	r2, [pc, #420]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800398a:	430b      	orrs	r3, r1
 800398c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003990:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800399c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80039aa:	460b      	mov	r3, r1
 80039ac:	4313      	orrs	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80039b0:	4b5f      	ldr	r3, [pc, #380]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c0:	4a5b      	ldr	r2, [pc, #364]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039c2:	430b      	orrs	r3, r1
 80039c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80039e2:	460b      	mov	r3, r1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80039e8:	4b51      	ldr	r3, [pc, #324]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ee:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80039f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003a20:	4b43      	ldr	r3, [pc, #268]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a26:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003a2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a30:	4a3f      	ldr	r2, [pc, #252]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a32:	430b      	orrs	r3, r1
 8003a34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003a44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003a52:	460b      	mov	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	d00b      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003a58:	4b35      	ldr	r3, [pc, #212]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a5e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003a62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a68:	4a31      	ldr	r2, [pc, #196]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a7e:	2300      	movs	r3, #0
 8003a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a82:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a86:	460b      	mov	r3, r1
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	d00c      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003a8c:	4b28      	ldr	r3, [pc, #160]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a9e:	4a24      	ldr	r2, [pc, #144]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003ab2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ab8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003abc:	460b      	mov	r3, r1
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	d04f      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003ac2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aca:	2b80      	cmp	r3, #128	@ 0x80
 8003acc:	d02d      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003ace:	2b80      	cmp	r3, #128	@ 0x80
 8003ad0:	d827      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ad2:	2b60      	cmp	r3, #96	@ 0x60
 8003ad4:	d02e      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003ad6:	2b60      	cmp	r3, #96	@ 0x60
 8003ad8:	d823      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ada:	2b40      	cmp	r3, #64	@ 0x40
 8003adc:	d006      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003ade:	2b40      	cmp	r3, #64	@ 0x40
 8003ae0:	d81f      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d011      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003aea:	e01a      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003aec:	4b10      	ldr	r3, [pc, #64]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003af8:	e01d      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003afa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003afe:	3308      	adds	r3, #8
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fc0d 	bl	8004320 <RCCEx_PLL2_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b0c:	e013      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b12:	332c      	adds	r3, #44	@ 0x2c
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fc9b 	bl	8004450 <RCCEx_PLL3_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b20:	e009      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003b28:	e005      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e003      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003b2e:	bf00      	nop
 8003b30:	46020c00 	.word	0x46020c00
        break;
 8003b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b36:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10d      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003b3e:	4bb6      	ldr	r3, [pc, #728]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003b40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b44:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003b48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b50:	4ab1      	ldr	r2, [pc, #708]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003b52:	430b      	orrs	r3, r1
 8003b54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b58:	e003      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003b5e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b70:	2300      	movs	r3, #0
 8003b72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b74:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	d053      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003b7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8a:	d033      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b90:	d82c      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b96:	d02f      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003b98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b9c:	d826      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba8:	d820      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb2:	d011      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003bb4:	e01a      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bb6:	4b98      	ldr	r3, [pc, #608]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	4a97      	ldr	r2, [pc, #604]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003bc2:	e01a      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bc8:	3308      	adds	r3, #8
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fba8 	bl	8004320 <RCCEx_PLL2_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003bd6:	e010      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bdc:	332c      	adds	r3, #44	@ 0x2c
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fc36 	bl	8004450 <RCCEx_PLL3_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003bea:	e006      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003bf2:	e002      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003c02:	4b85      	ldr	r3, [pc, #532]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003c04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c08:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c14:	4a80      	ldr	r2, [pc, #512]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003c16:	430b      	orrs	r3, r1
 8003c18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c1c:	e003      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003c22:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003c26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c32:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c34:	2300      	movs	r3, #0
 8003c36:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	d046      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003c42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c4a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c4e:	d028      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003c50:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c54:	d821      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003c56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c5a:	d022      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c60:	d81b      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003c62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c66:	d01c      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003c68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c6c:	d815      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c72:	d008      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c78:	d80f      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d011      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c82:	d00e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003c84:	e009      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fb47 	bl	8004320 <RCCEx_PLL2_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003c98:	e004      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8003ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10d      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003cac:	4b5a      	ldr	r3, [pc, #360]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003cae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cb2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003cb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cbe:	4a56      	ldr	r2, [pc, #344]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003cc6:	e003      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003ccc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cde:	2300      	movs	r3, #0
 8003ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ce2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	d03f      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d81e      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d3f 	.word	0x08003d3f
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d23 	.word	0x08003d23
 8003d0c:	08003d3f 	.word	0x08003d3f
 8003d10:	08003d3f 	.word	0x08003d3f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d14:	4b40      	ldr	r3, [pc, #256]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d18:	4a3f      	ldr	r2, [pc, #252]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003d20:	e00e      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d26:	332c      	adds	r3, #44	@ 0x2c
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fb91 	bl	8004450 <RCCEx_PLL3_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003d34:	e004      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8003d3e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003d40:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003d48:	4b33      	ldr	r3, [pc, #204]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d4e:	f023 0107 	bic.w	r1, r3, #7
 8003d52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003d68:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003d6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d78:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d82:	460b      	mov	r3, r1
 8003d84:	4313      	orrs	r3, r2
 8003d86:	d04d      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003d88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d94:	d028      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003d96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d9a:	d821      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003d9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003da0:	d024      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003da2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003da6:	d81b      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dac:	d00e      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8003dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003db2:	d815      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dbc:	d110      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dbe:	4b16      	ldr	r3, [pc, #88]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc2:	4a15      	ldr	r2, [pc, #84]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003dca:	e012      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003dd0:	332c      	adds	r3, #44	@ 0x2c
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb3c 	bl	8004450 <RCCEx_PLL3_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003dde:	e008      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003de6:	e004      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003de8:	bf00      	nop
 8003dea:	e002      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003df0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003df2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d110      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003dfa:	4b07      	ldr	r3, [pc, #28]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e0c:	4a02      	ldr	r2, [pc, #8]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003e14:	e006      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003e16:	bf00      	nop
 8003e18:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003e20:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e32:	2300      	movs	r3, #0
 8003e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f000 80b5 	beq.w	8003fac <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e48:	4b9d      	ldr	r3, [pc, #628]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d113      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e56:	4b9a      	ldr	r3, [pc, #616]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e5c:	4a98      	ldr	r2, [pc, #608]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003e5e:	f043 0304 	orr.w	r3, r3, #4
 8003e62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e66:	4b96      	ldr	r3, [pc, #600]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e7e:	4b91      	ldr	r3, [pc, #580]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e82:	4a90      	ldr	r2, [pc, #576]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e8a:	f7fd fa35 	bl	80012f8 <HAL_GetTick>
 8003e8e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e92:	e00b      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e94:	f7fd fa30 	bl	80012f8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d903      	bls.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003eaa:	e005      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003eac:	4b85      	ldr	r3, [pc, #532]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ed      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8003eb8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d165      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ec0:	4b7f      	ldr	r3, [pc, #508]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d023      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8003ed6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003eda:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01b      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ee6:	4b76      	ldr	r3, [pc, #472]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ef4:	4b72      	ldr	r3, [pc, #456]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003efa:	4a71      	ldr	r2, [pc, #452]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f04:	4b6e      	ldr	r3, [pc, #440]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f0a:	4a6d      	ldr	r2, [pc, #436]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f14:	4a6a      	ldr	r2, [pc, #424]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d019      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fd f9e5 	bl	80012f8 <HAL_GetTick>
 8003f2e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f32:	e00d      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f7fd f9e0 	bl	80012f8 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d903      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8003f4e:	e006      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f50:	4b5b      	ldr	r3, [pc, #364]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0ea      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8003f5e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003f66:	4b56      	ldr	r3, [pc, #344]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f6c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003f78:	4a51      	ldr	r2, [pc, #324]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f80:	e008      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f82:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003f86:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8003f8a:	e003      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003f90:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f94:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d107      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9c:	4b48      	ldr	r3, [pc, #288]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa2:	4a47      	ldr	r2, [pc, #284]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003fa4:	f023 0304 	bic.w	r3, r3, #4
 8003fa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fba:	2300      	movs	r3, #0
 8003fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fbe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	d042      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003fc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fd0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003fd4:	d022      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003fd6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003fda:	d81b      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fe0:	d011      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8003fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fe6:	d815      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d019      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003fec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ff0:	d110      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ff2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f991 	bl	8004320 <RCCEx_PLL2_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004004:	e00d      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004006:	4b2e      	ldr	r3, [pc, #184]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	4a2d      	ldr	r2, [pc, #180]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800400c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004010:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004012:	e006      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800401a:	e002      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800401c:	bf00      	nop
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004020:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004022:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800402a:	4b25      	ldr	r3, [pc, #148]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800402c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004030:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004038:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800403c:	4a20      	ldr	r2, [pc, #128]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800403e:	430b      	orrs	r3, r1
 8004040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004044:	e003      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004046:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800404a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800404e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800405a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800405c:	2300      	movs	r3, #0
 800405e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004060:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004064:	460b      	mov	r3, r1
 8004066:	4313      	orrs	r3, r2
 8004068:	d032      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800406a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800406e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004076:	d00b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407c:	d804      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004086:	d007      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800408e:	e004      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004098:	bf00      	nop
    }
    if (ret == HAL_OK)
 800409a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d112      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80040a2:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040b4:	4a02      	ldr	r2, [pc, #8]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80040bc:	e008      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80040be:	bf00      	nop
 80040c0:	46020c00 	.word	0x46020c00
 80040c4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80040cc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80040d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80040de:	2300      	movs	r3, #0
 80040e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80040e6:	460b      	mov	r3, r1
 80040e8:	4313      	orrs	r3, r2
 80040ea:	d019      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80040ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f8:	d105      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040fa:	4b88      	ldr	r3, [pc, #544]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	4a87      	ldr	r2, [pc, #540]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004104:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004106:	4b85      	ldr	r3, [pc, #532]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004108:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800410c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004114:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004118:	4a80      	ldr	r2, [pc, #512]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800411a:	430b      	orrs	r3, r1
 800411c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800412c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800412e:	2300      	movs	r3, #0
 8004130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004132:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004136:	460b      	mov	r3, r1
 8004138:	4313      	orrs	r3, r2
 800413a:	d00c      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800413c:	4b77      	ldr	r3, [pc, #476]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800413e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004142:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004146:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800414a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800414e:	4973      	ldr	r1, [pc, #460]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004156:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	2300      	movs	r3, #0
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
 8004168:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d00c      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004172:	4b6a      	ldr	r3, [pc, #424]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004178:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800417c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004180:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004184:	4965      	ldr	r1, [pc, #404]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800418c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80041a2:	460b      	mov	r3, r1
 80041a4:	4313      	orrs	r3, r2
 80041a6:	d00c      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80041a8:	4b5c      	ldr	r3, [pc, #368]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80041aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041ae:	f023 0218 	bic.w	r2, r3, #24
 80041b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041ba:	4958      	ldr	r1, [pc, #352]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80041d8:	460b      	mov	r3, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	d032      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80041de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041ea:	d105      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ec:	4b4b      	ldr	r3, [pc, #300]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80041ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f0:	4a4a      	ldr	r2, [pc, #296]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80041f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80041f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004200:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004204:	d108      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800420a:	3308      	adds	r3, #8
 800420c:	4618      	mov	r0, r3
 800420e:	f000 f887 	bl	8004320 <RCCEx_PLL2_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8004218:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10d      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004220:	4b3e      	ldr	r3, [pc, #248]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004222:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004226:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800422a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800422e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004232:	493a      	ldr	r1, [pc, #232]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800423a:	e003      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004240:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800425a:	460b      	mov	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	d03a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800426c:	d00e      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800426e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004272:	d815      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d017      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8004278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800427c:	d110      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427e:	4b27      	ldr	r3, [pc, #156]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004282:	4a26      	ldr	r2, [pc, #152]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004288:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800428a:	e00e      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800428c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004290:	3308      	adds	r3, #8
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f844 	bl	8004320 <RCCEx_PLL2_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80042a8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80042aa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10d      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80042b2:	4b1a      	ldr	r3, [pc, #104]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c4:	4915      	ldr	r1, [pc, #84]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80042d2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80042d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80042ec:	460b      	mov	r3, r1
 80042ee:	4313      	orrs	r3, r2
 80042f0:	d00c      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80042f2:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042f8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80042fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004300:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004304:	4905      	ldr	r1, [pc, #20]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800430c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8004310:	4618      	mov	r0, r3
 8004312:	37e0      	adds	r7, #224	@ 0xe0
 8004314:	46bd      	mov	sp, r7
 8004316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800431a:	bf00      	nop
 800431c:	46020c00 	.word	0x46020c00

08004320 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004328:	4b47      	ldr	r3, [pc, #284]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a46      	ldr	r2, [pc, #280]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 800432e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004332:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004334:	f7fc ffe0 	bl	80012f8 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800433a:	e008      	b.n	800434e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800433c:	f7fc ffdc 	bl	80012f8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e077      	b.n	800443e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800434e:	4b3e      	ldr	r3, [pc, #248]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800435a:	4b3b      	ldr	r3, [pc, #236]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6811      	ldr	r1, [r2, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6852      	ldr	r2, [r2, #4]
 800436e:	3a01      	subs	r2, #1
 8004370:	0212      	lsls	r2, r2, #8
 8004372:	430a      	orrs	r2, r1
 8004374:	4934      	ldr	r1, [pc, #208]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 8004376:	4313      	orrs	r3, r2
 8004378:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800437a:	4b33      	ldr	r3, [pc, #204]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 800437c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800437e:	4b33      	ldr	r3, [pc, #204]	@ (800444c <RCCEx_PLL2_Config+0x12c>)
 8004380:	4013      	ands	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6892      	ldr	r2, [r2, #8]
 8004386:	3a01      	subs	r2, #1
 8004388:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68d2      	ldr	r2, [r2, #12]
 8004390:	3a01      	subs	r2, #1
 8004392:	0252      	lsls	r2, r2, #9
 8004394:	b292      	uxth	r2, r2
 8004396:	4311      	orrs	r1, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6912      	ldr	r2, [r2, #16]
 800439c:	3a01      	subs	r2, #1
 800439e:	0412      	lsls	r2, r2, #16
 80043a0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80043a4:	4311      	orrs	r1, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6952      	ldr	r2, [r2, #20]
 80043aa:	3a01      	subs	r2, #1
 80043ac:	0612      	lsls	r2, r2, #24
 80043ae:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80043b2:	430a      	orrs	r2, r1
 80043b4:	4924      	ldr	r1, [pc, #144]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80043ba:	4b23      	ldr	r3, [pc, #140]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	f023 020c 	bic.w	r2, r3, #12
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	4920      	ldr	r1, [pc, #128]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80043cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 80043ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	491c      	ldr	r1, [pc, #112]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80043da:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	4a1a      	ldr	r2, [pc, #104]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 80043e0:	f023 0310 	bic.w	r3, r3, #16
 80043e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80043e6:	4b18      	ldr	r3, [pc, #96]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	69d2      	ldr	r2, [r2, #28]
 80043f6:	00d2      	lsls	r2, r2, #3
 80043f8:	4913      	ldr	r1, [pc, #76]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80043fe:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 8004400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004402:	4a11      	ldr	r2, [pc, #68]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 8004404:	f043 0310 	orr.w	r3, r3, #16
 8004408:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800440a:	4b0f      	ldr	r3, [pc, #60]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0e      	ldr	r2, [pc, #56]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 8004410:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004414:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004416:	f7fc ff6f 	bl	80012f8 <HAL_GetTick>
 800441a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800441c:	e008      	b.n	8004430 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800441e:	f7fc ff6b 	bl	80012f8 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e006      	b.n	800443e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004430:	4b05      	ldr	r3, [pc, #20]	@ (8004448 <RCCEx_PLL2_Config+0x128>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0

}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	46020c00 	.word	0x46020c00
 800444c:	80800000 	.word	0x80800000

08004450 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004458:	4b47      	ldr	r3, [pc, #284]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a46      	ldr	r2, [pc, #280]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 800445e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004462:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004464:	f7fc ff48 	bl	80012f8 <HAL_GetTick>
 8004468:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800446a:	e008      	b.n	800447e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800446c:	f7fc ff44 	bl	80012f8 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e077      	b.n	800456e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800447e:	4b3e      	ldr	r3, [pc, #248]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800448a:	4b3b      	ldr	r3, [pc, #236]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6811      	ldr	r1, [r2, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6852      	ldr	r2, [r2, #4]
 800449e:	3a01      	subs	r2, #1
 80044a0:	0212      	lsls	r2, r2, #8
 80044a2:	430a      	orrs	r2, r1
 80044a4:	4934      	ldr	r1, [pc, #208]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	630b      	str	r3, [r1, #48]	@ 0x30
 80044aa:	4b33      	ldr	r3, [pc, #204]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 80044ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ae:	4b33      	ldr	r3, [pc, #204]	@ (800457c <RCCEx_PLL3_Config+0x12c>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6892      	ldr	r2, [r2, #8]
 80044b6:	3a01      	subs	r2, #1
 80044b8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68d2      	ldr	r2, [r2, #12]
 80044c0:	3a01      	subs	r2, #1
 80044c2:	0252      	lsls	r2, r2, #9
 80044c4:	b292      	uxth	r2, r2
 80044c6:	4311      	orrs	r1, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6912      	ldr	r2, [r2, #16]
 80044cc:	3a01      	subs	r2, #1
 80044ce:	0412      	lsls	r2, r2, #16
 80044d0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80044d4:	4311      	orrs	r1, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6952      	ldr	r2, [r2, #20]
 80044da:	3a01      	subs	r2, #1
 80044dc:	0612      	lsls	r2, r2, #24
 80044de:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80044e2:	430a      	orrs	r2, r1
 80044e4:	4924      	ldr	r1, [pc, #144]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80044ea:	4b23      	ldr	r3, [pc, #140]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ee:	f023 020c 	bic.w	r2, r3, #12
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	4920      	ldr	r1, [pc, #128]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80044fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 80044fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	491c      	ldr	r1, [pc, #112]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 8004506:	4313      	orrs	r3, r2
 8004508:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800450a:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	4a1a      	ldr	r2, [pc, #104]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004516:	4b18      	ldr	r3, [pc, #96]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 8004518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800451e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	69d2      	ldr	r2, [r2, #28]
 8004526:	00d2      	lsls	r2, r2, #3
 8004528:	4913      	ldr	r1, [pc, #76]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 800452a:	4313      	orrs	r3, r2
 800452c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800452e:	4b12      	ldr	r3, [pc, #72]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	4a11      	ldr	r2, [pc, #68]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 8004534:	f043 0310 	orr.w	r3, r3, #16
 8004538:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800453a:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a0e      	ldr	r2, [pc, #56]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004544:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004546:	f7fc fed7 	bl	80012f8 <HAL_GetTick>
 800454a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800454c:	e008      	b.n	8004560 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800454e:	f7fc fed3 	bl	80012f8 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e006      	b.n	800456e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <RCCEx_PLL3_Config+0x128>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	46020c00 	.word	0x46020c00
 800457c:	80800000 	.word	0x80800000

08004580 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0fb      	b.n	800478a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a7f      	ldr	r2, [pc, #508]	@ (8004794 <HAL_SPI_Init+0x214>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <HAL_SPI_Init+0x26>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a7d      	ldr	r2, [pc, #500]	@ (8004798 <HAL_SPI_Init+0x218>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	e000      	b.n	80045a8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80045a6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a78      	ldr	r2, [pc, #480]	@ (8004794 <HAL_SPI_Init+0x214>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_SPI_Init+0x42>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a76      	ldr	r2, [pc, #472]	@ (8004798 <HAL_SPI_Init+0x218>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d105      	bne.n	80045ce <HAL_SPI_Init+0x4e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d901      	bls.n	80045ce <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0dd      	b.n	800478a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8ec 	bl	80047ac <SPI_GetPacketSize>
 80045d4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a6e      	ldr	r2, [pc, #440]	@ (8004794 <HAL_SPI_Init+0x214>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_SPI_Init+0x6a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a6c      	ldr	r2, [pc, #432]	@ (8004798 <HAL_SPI_Init+0x218>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d102      	bne.n	80045f0 <HAL_SPI_Init+0x70>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d816      	bhi.n	800461e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80045f4:	4a69      	ldr	r2, [pc, #420]	@ (800479c <HAL_SPI_Init+0x21c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00e      	beq.n	8004618 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a68      	ldr	r2, [pc, #416]	@ (80047a0 <HAL_SPI_Init+0x220>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d009      	beq.n	8004618 <HAL_SPI_Init+0x98>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a66      	ldr	r2, [pc, #408]	@ (80047a4 <HAL_SPI_Init+0x224>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d004      	beq.n	8004618 <HAL_SPI_Init+0x98>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a65      	ldr	r2, [pc, #404]	@ (80047a8 <HAL_SPI_Init+0x228>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d104      	bne.n	8004622 <HAL_SPI_Init+0xa2>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b10      	cmp	r3, #16
 800461c:	d901      	bls.n	8004622 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0b3      	b.n	800478a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fc82 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800465e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004668:	d119      	bne.n	800469e <HAL_SPI_Init+0x11e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004672:	d103      	bne.n	800467c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10c      	bne.n	800469e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800468c:	d107      	bne.n	800469e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800469c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00f      	beq.n	80046ca <HAL_SPI_Init+0x14a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d90b      	bls.n	80046ca <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e007      	b.n	80046da <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ec:	ea42 0103 	orr.w	r1, r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004746:	ea42 0103 	orr.w	r1, r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	46002000 	.word	0x46002000
 8004798:	56002000 	.word	0x56002000
 800479c:	40013000 	.word	0x40013000
 80047a0:	50013000 	.word	0x50013000
 80047a4:	40003800 	.word	0x40003800
 80047a8:	50003800 	.word	0x50003800

080047ac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	3307      	adds	r3, #7
 80047ca:	08db      	lsrs	r3, r3, #3
 80047cc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d12e      	bne.n	8004856 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8004802:	2302      	movs	r3, #2
 8004804:	e028      	b.n	8004858 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2202      	movs	r2, #2
 8004812:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004832:	ea42 0103 	orr.w	r1, r2, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <MX_USBX_Device_Init>:
  * @param  none
  * @retval status
  */

UINT MX_USBX_Device_Init(VOID)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
   UINT ret = UX_SUCCESS;
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN MX_USBX_Device_Init1 */

  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 800486e:	687b      	ldr	r3, [r7, #4]
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <memset>:
 800487c:	4402      	add	r2, r0
 800487e:	4603      	mov	r3, r0
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <memset+0xa>
 8004884:	4770      	bx	lr
 8004886:	f803 1b01 	strb.w	r1, [r3], #1
 800488a:	e7f9      	b.n	8004880 <memset+0x4>

0800488c <__libc_init_array>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	4d0d      	ldr	r5, [pc, #52]	@ (80048c4 <__libc_init_array+0x38>)
 8004890:	2600      	movs	r6, #0
 8004892:	4c0d      	ldr	r4, [pc, #52]	@ (80048c8 <__libc_init_array+0x3c>)
 8004894:	1b64      	subs	r4, r4, r5
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	42a6      	cmp	r6, r4
 800489a:	d109      	bne.n	80048b0 <__libc_init_array+0x24>
 800489c:	4d0b      	ldr	r5, [pc, #44]	@ (80048cc <__libc_init_array+0x40>)
 800489e:	2600      	movs	r6, #0
 80048a0:	4c0b      	ldr	r4, [pc, #44]	@ (80048d0 <__libc_init_array+0x44>)
 80048a2:	f000 f817 	bl	80048d4 <_init>
 80048a6:	1b64      	subs	r4, r4, r5
 80048a8:	10a4      	asrs	r4, r4, #2
 80048aa:	42a6      	cmp	r6, r4
 80048ac:	d105      	bne.n	80048ba <__libc_init_array+0x2e>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b4:	3601      	adds	r6, #1
 80048b6:	4798      	blx	r3
 80048b8:	e7ee      	b.n	8004898 <__libc_init_array+0xc>
 80048ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80048be:	3601      	adds	r6, #1
 80048c0:	4798      	blx	r3
 80048c2:	e7f2      	b.n	80048aa <__libc_init_array+0x1e>
 80048c4:	080049bc 	.word	0x080049bc
 80048c8:	080049bc 	.word	0x080049bc
 80048cc:	080049bc 	.word	0x080049bc
 80048d0:	080049c0 	.word	0x080049c0

080048d4 <_init>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr

080048e0 <_fini>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr

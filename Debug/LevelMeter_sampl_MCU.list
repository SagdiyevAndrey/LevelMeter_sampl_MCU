
LevelMeter_sampl_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d8c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008fc4  08008fc4  00009fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009094  08009094  0000a094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08009098  08009098  0000a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20000000  0800909c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00075524  2000000c  080090a5  0000b00c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20075530  080090a5  0000b530  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000b009  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e3e9  00000000  00000000  0000b03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003e54  00000000  00000000  00029428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a58  00000000  00000000  0002d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001431  00000000  00000000  0002ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000377aa  00000000  00000000  00030109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00022c98  00000000  00000000  000678b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015bfb2  00000000  00000000  0008a54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e64fd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006f1c  00000000  00000000  001e6540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005f  00000000  00000000  001ed45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08008fac 	.word	0x08008fac

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08008fac 	.word	0x08008fac

08000278 <ADF4351_setDATA>:

#define SEND_DATA_DELAY_MS				10
#define SETTINGS_REG_DELAY_MS			50

void ADF4351_setDATA(byte level)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADF4351_DATA_PORT, ADF4351_DATA_PIN, level);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	461a      	mov	r2, r3
 8000286:	2101      	movs	r1, #1
 8000288:	4803      	ldr	r0, [pc, #12]	@ (8000298 <ADF4351_setDATA+0x20>)
 800028a:	f005 fb8d 	bl	80059a8 <HAL_GPIO_WritePin>
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	42020000 	.word	0x42020000

0800029c <ADF4351_setCLK>:
void ADF4351_setCLK(byte level)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADF4351_CLK_PORT, ADF4351_CLK_PIN, level);
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	461a      	mov	r2, r3
 80002aa:	2102      	movs	r1, #2
 80002ac:	4803      	ldr	r0, [pc, #12]	@ (80002bc <ADF4351_setCLK+0x20>)
 80002ae:	f005 fb7b 	bl	80059a8 <HAL_GPIO_WritePin>
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	42020000 	.word	0x42020000

080002c0 <ADF4351_setLE>:
void ADF4351_setLE(byte level)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ADF4351_LE_PORT, ADF4351_LE_PIN, level);
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	461a      	mov	r2, r3
 80002ce:	2108      	movs	r1, #8
 80002d0:	4803      	ldr	r0, [pc, #12]	@ (80002e0 <ADF4351_setLE+0x20>)
 80002d2:	f005 fb69 	bl	80059a8 <HAL_GPIO_WritePin>
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	42020800 	.word	0x42020800

080002e4 <ADF4351_addSubReg>:
void ADF4351_addSubReg(uint* reg, uint subReg, byte pos)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	4613      	mov	r3, r2
 80002f0:	71fb      	strb	r3, [r7, #7]
	subReg <<= pos;
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	60bb      	str	r3, [r7, #8]
	*reg |= subReg;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	431a      	orrs	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <ADF4351_initPorts>:
void ADF4351_initPorts()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_initStruct = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]

	GPIO_initStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000328:	2302      	movs	r3, #2
 800032a:	613b      	str	r3, [r7, #16]
	GPIO_initStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]

	GPIO_initStruct.Pin = ADF4351_LD_PIN;
 8000330:	2304      	movs	r3, #4
 8000332:	607b      	str	r3, [r7, #4]
	GPIO_initStruct.Mode = GPIO_MODE_INPUT;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ADF4351_LD_PORT, &GPIO_initStruct);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	481f      	ldr	r0, [pc, #124]	@ (80003bc <ADF4351_initPorts+0xa8>)
 800033e:	f005 f95b 	bl	80055f8 <HAL_GPIO_Init>

	GPIO_initStruct.Pin = ADF4351_CLK_PIN;
 8000342:	2302      	movs	r3, #2
 8000344:	607b      	str	r3, [r7, #4]
	GPIO_initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ADF4351_CLK_PORT, &GPIO_initStruct);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4619      	mov	r1, r3
 800034e:	481b      	ldr	r0, [pc, #108]	@ (80003bc <ADF4351_initPorts+0xa8>)
 8000350:	f005 f952 	bl	80055f8 <HAL_GPIO_Init>

	GPIO_initStruct.Pin = ADF4351_DATA_PIN;
 8000354:	2301      	movs	r3, #1
 8000356:	607b      	str	r3, [r7, #4]
	GPIO_initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ADF4351_DATA_PORT, &GPIO_initStruct);
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4619      	mov	r1, r3
 8000360:	4816      	ldr	r0, [pc, #88]	@ (80003bc <ADF4351_initPorts+0xa8>)
 8000362:	f005 f949 	bl	80055f8 <HAL_GPIO_Init>

	GPIO_initStruct.Pin = ADF4351_LE_PIN;
 8000366:	2308      	movs	r3, #8
 8000368:	607b      	str	r3, [r7, #4]
	GPIO_initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036a:	2301      	movs	r3, #1
 800036c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ADF4351_LE_PORT, &GPIO_initStruct);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4619      	mov	r1, r3
 8000372:	4813      	ldr	r0, [pc, #76]	@ (80003c0 <ADF4351_initPorts+0xac>)
 8000374:	f005 f940 	bl	80055f8 <HAL_GPIO_Init>

	GPIO_initStruct.Pin = ADF4351_CE_PIN;
 8000378:	2304      	movs	r3, #4
 800037a:	607b      	str	r3, [r7, #4]
	GPIO_initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037c:	2301      	movs	r3, #1
 800037e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(ADF4351_CE_PORT, &GPIO_initStruct);
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	480e      	ldr	r0, [pc, #56]	@ (80003c0 <ADF4351_initPorts+0xac>)
 8000386:	f005 f937 	bl	80055f8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(ADF4351_CLK_PORT, ADF4351_CLK_PIN, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2102      	movs	r1, #2
 800038e:	480b      	ldr	r0, [pc, #44]	@ (80003bc <ADF4351_initPorts+0xa8>)
 8000390:	f005 fb0a 	bl	80059a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF4351_DATA_PORT, ADF4351_DATA_PIN, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2101      	movs	r1, #1
 8000398:	4808      	ldr	r0, [pc, #32]	@ (80003bc <ADF4351_initPorts+0xa8>)
 800039a:	f005 fb05 	bl	80059a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF4351_LE_PORT, ADF4351_LE_PIN, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2108      	movs	r1, #8
 80003a2:	4807      	ldr	r0, [pc, #28]	@ (80003c0 <ADF4351_initPorts+0xac>)
 80003a4:	f005 fb00 	bl	80059a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADF4351_CE_PORT, ADF4351_CE_PIN, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2104      	movs	r1, #4
 80003ac:	4804      	ldr	r0, [pc, #16]	@ (80003c0 <ADF4351_initPorts+0xac>)
 80003ae:	f005 fafb 	bl	80059a8 <HAL_GPIO_WritePin>
}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	42020000 	.word	0x42020000
 80003c0:	42020800 	.word	0x42020800

080003c4 <ADF4351_init>:
void ADF4351_init()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	ADF4351_initPorts();
 80003c8:	f7ff ffa4 	bl	8000314 <ADF4351_initPorts>
	HAL_Delay(20);
 80003cc:	2014      	movs	r0, #20
 80003ce:	f001 fcb1 	bl	8001d34 <HAL_Delay>
	ADF4351_enable();
 80003d2:	f000 faad 	bl	8000930 <ADF4351_enable>
	HAL_Delay(20);
 80003d6:	2014      	movs	r0, #20
 80003d8:	f001 fcac 	bl	8001d34 <HAL_Delay>
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}

080003e0 <ADF4351_sendData>:
void ADF4351_sendData(uint data)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	ADF4351_setCLK(PULSE_LOW);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f7ff ff57 	bl	800029c <ADF4351_setCLK>
	__asm__("NOP");
 80003ee:	bf00      	nop
	for (byte i = 0; i < 32; i++) {
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	e017      	b.n	8000426 <ADF4351_sendData+0x46>
		if (data & MASK_UINT_HIGH_BIT) {
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	da03      	bge.n	8000404 <ADF4351_sendData+0x24>
			ADF4351_setDATA(PULSE_HIGH);
 80003fc:	2001      	movs	r0, #1
 80003fe:	f7ff ff3b 	bl	8000278 <ADF4351_setDATA>
 8000402:	e002      	b.n	800040a <ADF4351_sendData+0x2a>
		} else {
			ADF4351_setDATA(PULSE_LOW);
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff ff37 	bl	8000278 <ADF4351_setDATA>
		}
		__asm__("NOP");
 800040a:	bf00      	nop
		ADF4351_setCLK(PULSE_HIGH);
 800040c:	2001      	movs	r0, #1
 800040e:	f7ff ff45 	bl	800029c <ADF4351_setCLK>
		data <<= 1;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
		__asm__("NOP");
 8000418:	bf00      	nop
		ADF4351_setCLK(PULSE_LOW);
 800041a:	2000      	movs	r0, #0
 800041c:	f7ff ff3e 	bl	800029c <ADF4351_setCLK>
	for (byte i = 0; i < 32; i++) {
 8000420:	7bfb      	ldrb	r3, [r7, #15]
 8000422:	3301      	adds	r3, #1
 8000424:	73fb      	strb	r3, [r7, #15]
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	2b1f      	cmp	r3, #31
 800042a:	d9e4      	bls.n	80003f6 <ADF4351_sendData+0x16>
	}
	__asm__("NOP");
 800042c:	bf00      	nop
	ADF4351_setLE(PULSE_HIGH);
 800042e:	2001      	movs	r0, #1
 8000430:	f7ff ff46 	bl	80002c0 <ADF4351_setLE>
	__asm__("NOP");
 8000434:	bf00      	nop
	__asm__("NOP");
 8000436:	bf00      	nop
	ADF4351_setLE(PULSE_LOW);
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff ff41 	bl	80002c0 <ADF4351_setLE>
}
 800043e:	bf00      	nop
 8000440:	3710      	adds	r7, #16
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <ADF4351_calcBandSelClkDivMax>:
byte ADF4351_calcBandSelClkDivMax(float REF_in, dByte R_count, byte refDbl, byte R_DIV2)
{
 8000446:	b480      	push	{r7}
 8000448:	b085      	sub	sp, #20
 800044a:	af00      	add	r7, sp, #0
 800044c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000450:	4603      	mov	r3, r0
 8000452:	817b      	strh	r3, [r7, #10]
 8000454:	460b      	mov	r3, r1
 8000456:	727b      	strb	r3, [r7, #9]
 8000458:	4613      	mov	r3, r2
 800045a:	723b      	strb	r3, [r7, #8]
	return REF_in * (float)(1 + refDbl) / (ADF4351_VCO_BANDSEL_FREQ_MAX * (float)R_count * (float)(1 + R_DIV2));
 800045c:	7a7b      	ldrb	r3, [r7, #9]
 800045e:	3301      	adds	r3, #1
 8000460:	ee07 3a90 	vmov	s15, r3
 8000464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000468:	edd7 7a03 	vldr	s15, [r7, #12]
 800046c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000470:	897b      	ldrh	r3, [r7, #10]
 8000472:	ee07 3a90 	vmov	s15, r3
 8000476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800047a:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 800047e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000482:	7a3b      	ldrb	r3, [r7, #8]
 8000484:	3301      	adds	r3, #1
 8000486:	ee07 3a90 	vmov	s15, r3
 800048a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800048e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800049a:	edc7 7a01 	vstr	s15, [r7, #4]
 800049e:	793b      	ldrb	r3, [r7, #4]
 80004a0:	b2db      	uxtb	r3, r3

}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <ADF4351_setRegister0>:
void ADF4351_setRegister0(dByte fracValue, dByte intValue)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b084      	sub	sp, #16
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	4603      	mov	r3, r0
 80004b6:	460a      	mov	r2, r1
 80004b8:	80fb      	strh	r3, [r7, #6]
 80004ba:	4613      	mov	r3, r2
 80004bc:	80bb      	strh	r3, [r7, #4]
	intValue &= MASK_16BIT;
	fracValue &= MASK_12BIT;
 80004be:	88fb      	ldrh	r3, [r7, #6]
 80004c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004c4:	80fb      	strh	r3, [r7, #6]
	uint data = ADF4351_CTRL_BITS_REG0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
	ADF4351_addSubReg(&data, (uint)fracValue, ADF4351_BITPOS_FRACVALUE);
 80004ca:	88f9      	ldrh	r1, [r7, #6]
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	2203      	movs	r2, #3
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff ff06 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)intValue, ADF4351_BITPOS_INTVALUE);
 80004d8:	88b9      	ldrh	r1, [r7, #4]
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	220f      	movs	r2, #15
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff feff 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ff79 	bl	80003e0 <ADF4351_sendData>
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <ADF4351_setRegister1>:
void ADF4351_setRegister1(dByte modValue, dByte phaseValue, byte psc, _bool phaseAdj)
{
 80004f6:	b590      	push	{r4, r7, lr}
 80004f8:	b085      	sub	sp, #20
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	4604      	mov	r4, r0
 80004fe:	4608      	mov	r0, r1
 8000500:	4611      	mov	r1, r2
 8000502:	461a      	mov	r2, r3
 8000504:	4623      	mov	r3, r4
 8000506:	80fb      	strh	r3, [r7, #6]
 8000508:	4603      	mov	r3, r0
 800050a:	80bb      	strh	r3, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
 8000510:	4613      	mov	r3, r2
 8000512:	70bb      	strb	r3, [r7, #2]
	modValue &= MASK_12BIT;
 8000514:	88fb      	ldrh	r3, [r7, #6]
 8000516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800051a:	80fb      	strh	r3, [r7, #6]
	phaseValue &= MASK_12BIT;
 800051c:	88bb      	ldrh	r3, [r7, #4]
 800051e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000522:	80bb      	strh	r3, [r7, #4]
	psc &= MASK_1BIT;
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	70fb      	strb	r3, [r7, #3]
	phaseAdj &= MASK_1BIT;
 800052c:	78bb      	ldrb	r3, [r7, #2]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	70bb      	strb	r3, [r7, #2]
	uint data = ADF4351_CTRL_BITS_REG1;
 8000534:	2301      	movs	r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
	ADF4351_addSubReg(&data, (uint)modValue, ADF4351_BITPOS_MODVALUE);
 8000538:	88f9      	ldrh	r1, [r7, #6]
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	2203      	movs	r2, #3
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fecf 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)phaseValue, ADF4351_BITPOS_PHASEVALUE);
 8000546:	88b9      	ldrh	r1, [r7, #4]
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	220f      	movs	r2, #15
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fec8 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)psc, ADF4351_BITPOS_PSC);
 8000554:	78f9      	ldrb	r1, [r7, #3]
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	221b      	movs	r2, #27
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fec1 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)phaseAdj, ADF4351_BITPOS_PHASEADJ);
 8000562:	78b9      	ldrb	r1, [r7, #2]
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	221c      	movs	r2, #28
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff feba 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff34 	bl	80003e0 <ADF4351_sendData>
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	bd90      	pop	{r4, r7, pc}

08000580 <ADF4351_setRegister2>:
void ADF4351_setRegister2(_bool countRst, _bool CP3state, _bool pwrDown, byte PD_polarity, byte LDP, byte LDF, byte chrgPumpCurSet,
		byte dblBuf, dByte R_count, _bool R_div2, _bool refDbl, byte muxOut, byte lowNoiseMode)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	4604      	mov	r4, r0
 8000588:	4608      	mov	r0, r1
 800058a:	4611      	mov	r1, r2
 800058c:	461a      	mov	r2, r3
 800058e:	4623      	mov	r3, r4
 8000590:	71fb      	strb	r3, [r7, #7]
 8000592:	4603      	mov	r3, r0
 8000594:	71bb      	strb	r3, [r7, #6]
 8000596:	460b      	mov	r3, r1
 8000598:	717b      	strb	r3, [r7, #5]
 800059a:	4613      	mov	r3, r2
 800059c:	713b      	strb	r3, [r7, #4]
	countRst &= MASK_1BIT;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
	CP3state &= MASK_1BIT;
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	71bb      	strb	r3, [r7, #6]
	pwrDown &= MASK_1BIT;
 80005ae:	797b      	ldrb	r3, [r7, #5]
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	717b      	strb	r3, [r7, #5]
	PD_polarity &= MASK_1BIT;
 80005b6:	793b      	ldrb	r3, [r7, #4]
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	713b      	strb	r3, [r7, #4]
	LDP &= MASK_1BIT;
 80005be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	f887 3020 	strb.w	r3, [r7, #32]
	LDF &= MASK_1BIT;
 80005ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	chrgPumpCurSet &= MASK_4BIT;
 80005d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	dblBuf &= MASK_1BIT;
 80005e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	R_count &= MASK_10BIT;
 80005ee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80005f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005f4:	863b      	strh	r3, [r7, #48]	@ 0x30
	R_div2 &= MASK_1BIT;
 80005f6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	refDbl &= MASK_1BIT;
 8000602:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	muxOut &= MASK_3BIT;
 800060e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	lowNoiseMode &= MASK_2BIT;
 800061a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800061e:	f003 0303 	and.w	r3, r3, #3
 8000622:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	uint data = ADF4351_CTRL_BITS_REG2;
 8000626:	2302      	movs	r3, #2
 8000628:	60fb      	str	r3, [r7, #12]
	ADF4351_addSubReg(&data, (uint)countRst, ADF4351_BITPOS_COUNTRST);
 800062a:	79f9      	ldrb	r1, [r7, #7]
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2203      	movs	r2, #3
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fe56 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)CP3state, ADF4351_BITPOS_CP3STATE);
 8000638:	79b9      	ldrb	r1, [r7, #6]
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2204      	movs	r2, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fe4f 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)pwrDown, ADF4351_BITPOS_PWRDOWN);
 8000646:	7979      	ldrb	r1, [r7, #5]
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2205      	movs	r2, #5
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fe48 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)PD_polarity, ADF4351_BITPOS_PDPOLARITY);
 8000654:	7939      	ldrb	r1, [r7, #4]
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2206      	movs	r2, #6
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fe41 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)LDP, ADF4351_BITPOS_LDP);
 8000662:	f897 1020 	ldrb.w	r1, [r7, #32]
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2207      	movs	r2, #7
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fe39 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)LDF, ADF4351_BITPOS_LDF);
 8000672:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2208      	movs	r2, #8
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fe31 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)chrgPumpCurSet, ADF4351_BITPOS_CHRGPUMPCURSET);
 8000682:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2209      	movs	r2, #9
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fe29 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)dblBuf, ADF4351_BITPOS_DBLBUF);
 8000692:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	220d      	movs	r2, #13
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fe21 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)R_count, ADF4351_BITPOS_RCOUNT);
 80006a2:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	220e      	movs	r2, #14
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fe1a 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)R_div2, ADF4351_BITPOS_RDIV2);
 80006b0:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2218      	movs	r2, #24
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fe12 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)refDbl, ADF4351_BITPOS_REFDBL);
 80006c0:	f897 1038 	ldrb.w	r1, [r7, #56]	@ 0x38
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2219      	movs	r2, #25
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fe0a 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)muxOut, ADF4351_BITPOS_MUXOUT);
 80006d0:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	221a      	movs	r2, #26
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fe02 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)lowNoiseMode, ADF4351_BITPOS_LOWNOISEMODE);
 80006e0:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	221d      	movs	r2, #29
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fdfa 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fe74 	bl	80003e0 <ADF4351_sendData>
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd90      	pop	{r4, r7, pc}

08000700 <ADF4351_setRegister3>:
void ADF4351_setRegister3(dByte clkDiv, byte clkDivMode, _bool CSR, _bool chrgCancel, byte ABP, byte bandSelClkMode)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	4604      	mov	r4, r0
 8000708:	4608      	mov	r0, r1
 800070a:	4611      	mov	r1, r2
 800070c:	461a      	mov	r2, r3
 800070e:	4623      	mov	r3, r4
 8000710:	80fb      	strh	r3, [r7, #6]
 8000712:	4603      	mov	r3, r0
 8000714:	717b      	strb	r3, [r7, #5]
 8000716:	460b      	mov	r3, r1
 8000718:	713b      	strb	r3, [r7, #4]
 800071a:	4613      	mov	r3, r2
 800071c:	70fb      	strb	r3, [r7, #3]
	clkDiv &= MASK_12BIT;
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000724:	80fb      	strh	r3, [r7, #6]
	clkDivMode &= MASK_2BIT;
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	f003 0303 	and.w	r3, r3, #3
 800072c:	717b      	strb	r3, [r7, #5]
	CSR &= MASK_1BIT;
 800072e:	793b      	ldrb	r3, [r7, #4]
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	713b      	strb	r3, [r7, #4]
	chrgCancel &= MASK_1BIT;
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	70fb      	strb	r3, [r7, #3]
	ABP &= MASK_1BIT;
 800073e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	f887 3020 	strb.w	r3, [r7, #32]
	bandSelClkMode &= MASK_1BIT;
 800074a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint data = ADF4351_CTRL_BITS_REG3;
 8000756:	2303      	movs	r3, #3
 8000758:	60fb      	str	r3, [r7, #12]
	ADF4351_addSubReg(&data, (uint)clkDiv, ADF4351_BITPOS_CLKDIV);
 800075a:	88f9      	ldrh	r1, [r7, #6]
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2203      	movs	r2, #3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fdbe 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)clkDivMode, ADF4351_BITPOS_CLKDIVMODE);
 8000768:	7979      	ldrb	r1, [r7, #5]
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	220f      	movs	r2, #15
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fdb7 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)CSR, ADF4351_BITPOS_CSR);
 8000776:	7939      	ldrb	r1, [r7, #4]
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2212      	movs	r2, #18
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fdb0 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)chrgCancel, ADF4351_BITPOS_CHRGCANCEL);
 8000784:	78f9      	ldrb	r1, [r7, #3]
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2215      	movs	r2, #21
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fda9 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)ABP, ADF4351_BITPOS_ABP);
 8000792:	f897 1020 	ldrb.w	r1, [r7, #32]
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2216      	movs	r2, #22
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fda1 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)bandSelClkMode, ADF4351_BITPOS_BANDSELCLKMODE);
 80007a2:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2217      	movs	r2, #23
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd99 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fe13 	bl	80003e0 <ADF4351_sendData>
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd90      	pop	{r4, r7, pc}

080007c2 <ADF4351_setRegister4>:
void ADF4351_setRegister4(byte outPwr, _bool RF_out, byte auxOutPwr, _bool auxOut, byte auxOutSel,
		byte MTLD, byte VCO_pwrDown, byte bandSelClkDiv, byte RF_divSel, byte fdbckSel)
{
 80007c2:	b590      	push	{r4, r7, lr}
 80007c4:	b085      	sub	sp, #20
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4604      	mov	r4, r0
 80007ca:	4608      	mov	r0, r1
 80007cc:	4611      	mov	r1, r2
 80007ce:	461a      	mov	r2, r3
 80007d0:	4623      	mov	r3, r4
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	4603      	mov	r3, r0
 80007d6:	71bb      	strb	r3, [r7, #6]
 80007d8:	460b      	mov	r3, r1
 80007da:	717b      	strb	r3, [r7, #5]
 80007dc:	4613      	mov	r3, r2
 80007de:	713b      	strb	r3, [r7, #4]
	outPwr &= MASK_2BIT;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	f003 0303 	and.w	r3, r3, #3
 80007e6:	71fb      	strb	r3, [r7, #7]
	RF_out &= MASK_1BIT;
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	71bb      	strb	r3, [r7, #6]
	auxOutPwr &= MASK_2BIT;
 80007f0:	797b      	ldrb	r3, [r7, #5]
 80007f2:	f003 0303 	and.w	r3, r3, #3
 80007f6:	717b      	strb	r3, [r7, #5]
	auxOut &= MASK_1BIT;
 80007f8:	793b      	ldrb	r3, [r7, #4]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	713b      	strb	r3, [r7, #4]
	auxOutSel &= MASK_1BIT;
 8000800:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	f887 3020 	strb.w	r3, [r7, #32]
	MTLD &= MASK_1BIT;
 800080c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	VCO_pwrDown &= MASK_1BIT;
 8000818:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	bandSelClkDiv &= MASK_8BIT;
	RF_divSel &= MASK_3BIT;
 8000824:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000828:	f003 0307 	and.w	r3, r3, #7
 800082c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	fdbckSel &= MASK_1BIT;
 8000830:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	uint data = ADF4351_CTRL_BITS_REG4;
 800083c:	2304      	movs	r3, #4
 800083e:	60fb      	str	r3, [r7, #12]
	ADF4351_addSubReg(&data, (uint)outPwr, ADF4351_BITPOS_OUTPWR);
 8000840:	79f9      	ldrb	r1, [r7, #7]
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2203      	movs	r2, #3
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fd4b 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)RF_out, ADF4351_BITPOS_RFOUT);
 800084e:	79b9      	ldrb	r1, [r7, #6]
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2205      	movs	r2, #5
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fd44 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)auxOutPwr, ADF4351_BITPOS_AUXOUTPWR);
 800085c:	7979      	ldrb	r1, [r7, #5]
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2206      	movs	r2, #6
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fd3d 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)auxOut, ADF4351_BITPOS_AUXOUT);
 800086a:	7939      	ldrb	r1, [r7, #4]
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2208      	movs	r2, #8
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fd36 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)auxOutSel, ADF4351_BITPOS_AUXOUTSEL);
 8000878:	f897 1020 	ldrb.w	r1, [r7, #32]
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2209      	movs	r2, #9
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fd2e 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)MTLD, ADF4351_BITPOS_MTLD);
 8000888:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	220a      	movs	r2, #10
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fd26 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)VCO_pwrDown, ADF4351_BITPOS_VCOPWRDOWN);
 8000898:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	220b      	movs	r2, #11
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fd1e 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)bandSelClkDiv, ADF4351_BITPOS_BANDSELCLKDIV);
 80008a8:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	220c      	movs	r2, #12
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fd16 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)RF_divSel, ADF4351_BITPOS_RFDIVSEL);
 80008b8:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2214      	movs	r2, #20
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fd0e 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)fdbckSel, ADF4351_BITPOS_FDBCKSEL);
 80008c8:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2217      	movs	r2, #23
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fd06 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fd80 	bl	80003e0 <ADF4351_sendData>
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd90      	pop	{r4, r7, pc}

080008e8 <ADF4351_setRegister5>:
void ADF4351_setRegister5(byte LD_pinMode)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	byte reserved = MASK_2BIT;
 80008f2:	2303      	movs	r3, #3
 80008f4:	73fb      	strb	r3, [r7, #15]
	LD_pinMode &= MASK_2BIT;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 0303 	and.w	r3, r3, #3
 80008fc:	71fb      	strb	r3, [r7, #7]
	uint data = ADF4351_CTRL_BITS_REG5;
 80008fe:	2305      	movs	r3, #5
 8000900:	60bb      	str	r3, [r7, #8]
	ADF4351_addSubReg(&data, (uint)reserved, ADF4351_BITPOS_REG5_RESERVED);
 8000902:	7bf9      	ldrb	r1, [r7, #15]
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	2213      	movs	r2, #19
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fcea 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_addSubReg(&data, (uint)LD_pinMode, ADF4351_BITPOS_LDPINMODE);
 8000910:	79f9      	ldrb	r1, [r7, #7]
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	2216      	movs	r2, #22
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fce3 	bl	80002e4 <ADF4351_addSubReg>
	ADF4351_sendData(data);
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fd5d 	bl	80003e0 <ADF4351_sendData>
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <ADF4351_enable>:
void ADF4351_enable()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ADF4351_CE_PORT, ADF4351_CE_PIN, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2104      	movs	r1, #4
 8000938:	4802      	ldr	r0, [pc, #8]	@ (8000944 <ADF4351_enable+0x14>)
 800093a:	f005 f835 	bl	80059a8 <HAL_GPIO_WritePin>
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	42020800 	.word	0x42020800

08000948 <ADF4351_settings>:
void ADF4351_disable()
{
	HAL_GPIO_WritePin(ADF4351_CE_PORT, ADF4351_CE_PIN, GPIO_PIN_RESET);
}
void ADF4351_settings(dByte INT, dByte FRAC, dByte MOD, dByte R_count, byte refDbl, byte R_DIV2, byte RF_div)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	ed2d 8b02 	vpush	{d8}
 800094e:	b08f      	sub	sp, #60	@ 0x3c
 8000950:	af0a      	add	r7, sp, #40	@ 0x28
 8000952:	4604      	mov	r4, r0
 8000954:	4608      	mov	r0, r1
 8000956:	4611      	mov	r1, r2
 8000958:	461a      	mov	r2, r3
 800095a:	4623      	mov	r3, r4
 800095c:	80fb      	strh	r3, [r7, #6]
 800095e:	4603      	mov	r3, r0
 8000960:	80bb      	strh	r3, [r7, #4]
 8000962:	460b      	mov	r3, r1
 8000964:	807b      	strh	r3, [r7, #2]
 8000966:	4613      	mov	r3, r2
 8000968:	803b      	strh	r3, [r7, #0]
	byte LDF = ADF4351_LDF_FRAC;
 800096a:	2300      	movs	r3, #0
 800096c:	73fb      	strb	r3, [r7, #15]
	byte APB = ADF4351_ABP_6NS;
 800096e:	2300      	movs	r3, #0
 8000970:	73bb      	strb	r3, [r7, #14]
	byte psc = ADF4351_PSC_4v5;
 8000972:	2300      	movs	r3, #0
 8000974:	737b      	strb	r3, [r7, #13]
	byte VCO_div = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	733b      	strb	r3, [r7, #12]
	if (FRAC == 0) {
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d103      	bne.n	8000988 <ADF4351_settings+0x40>
		LDF = ADF4351_LDF_INT;
 8000980:	2301      	movs	r3, #1
 8000982:	73fb      	strb	r3, [r7, #15]
		APB = ADF4351_ABP_3NS;
 8000984:	2301      	movs	r3, #1
 8000986:	73bb      	strb	r3, [r7, #14]
	}
	if (ADF4351_FDBCKSEL == ADF4351_FDBCKSEL_DIVIDED)
		VCO_div = RF_div;
	if ((ADF4351_VCO_freq(ADF4351_CLOCKREF, R_DIV2, refDbl, R_count, INT, FRAC, MOD) / (float)ADF4351_RF_div_val(VCO_div)) > 3600.0f)
 8000988:	88fc      	ldrh	r4, [r7, #6]
 800098a:	883a      	ldrh	r2, [r7, #0]
 800098c:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8000990:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	4623      	mov	r3, r4
 800099e:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8000aa4 <ADF4351_settings+0x15c>
 80009a2:	f000 f893 	bl	8000acc <ADF4351_VCO_freq>
 80009a6:	eeb0 8a40 	vmov.f32	s16, s0
 80009aa:	7b3b      	ldrb	r3, [r7, #12]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f87d 	bl	8000aac <ADF4351_RF_div_val>
 80009b2:	4603      	mov	r3, r0
 80009b4:	ee07 3a90 	vmov	s15, r3
 80009b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009bc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80009c0:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000aa8 <ADF4351_settings+0x160>
 80009c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009cc:	dd01      	ble.n	80009d2 <ADF4351_settings+0x8a>
		psc = ADF4351_PSC_8v9;
 80009ce:	2301      	movs	r3, #1
 80009d0:	737b      	strb	r3, [r7, #13]
	ADF4351_setRegister5(ADF4351_LDPINMODE_HIGH);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f7ff ff88 	bl	80008e8 <ADF4351_setRegister5>
	HAL_Delay(SETTINGS_REG_DELAY_MS);
 80009d8:	2032      	movs	r0, #50	@ 0x32
 80009da:	f001 f9ab 	bl	8001d34 <HAL_Delay>
	ADF4351_setRegister4(ADF4351_OUTPWR_p5DBM, ADF4351_RFOUT_ENABLED, ADF4351_AUXOUTPWR_n1DBM, ADF4351_AUXOUT_DISABLED,
 80009de:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80009e2:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80009e6:	883b      	ldrh	r3, [r7, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8000aa4 <ADF4351_settings+0x15c>
 80009ee:	f7ff fd2a 	bl	8000446 <ADF4351_calcBandSelClkDivMax>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	2301      	movs	r3, #1
 80009f8:	9305      	str	r3, [sp, #20]
 80009fa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80009fe:	9304      	str	r3, [sp, #16]
 8000a00:	9203      	str	r2, [sp, #12]
 8000a02:	2300      	movs	r3, #0
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	2300      	movs	r3, #0
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2201      	movs	r2, #1
 8000a12:	2101      	movs	r1, #1
 8000a14:	2003      	movs	r0, #3
 8000a16:	f7ff fed4 	bl	80007c2 <ADF4351_setRegister4>
			ADF4351_AUXOUTSEL_FUNDAMENTAL, ADF4351_MTLD_DISABLED, ADF4351_VCOPWRDOWN_PWRUP,
			ADF4351_calcBandSelClkDivMax(ADF4351_CLOCKREF, R_count, refDbl, R_DIV2), RF_div, ADF4351_FDBCKSEL);
	HAL_Delay(SETTINGS_REG_DELAY_MS);
 8000a1a:	2032      	movs	r0, #50	@ 0x32
 8000a1c:	f001 f98a 	bl	8001d34 <HAL_Delay>
	ADF4351_setRegister3(1, ADF4351_CLKDIVMODE_OFF, ADF4351_CSR_DISABLED, ADF4351_CHRGCANCEL_DISABLED, APB, ADF4351_BANDSELCLKMODE_LOW);
 8000a20:	2300      	movs	r3, #0
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	7bbb      	ldrb	r3, [r7, #14]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fe66 	bl	8000700 <ADF4351_setRegister3>
	HAL_Delay(SETTINGS_REG_DELAY_MS);
 8000a34:	2032      	movs	r0, #50	@ 0x32
 8000a36:	f001 f97d 	bl	8001d34 <HAL_Delay>
	ADF4351_setRegister2(ADF4351_COUNTRST_DISABLED, ADF4351_CP3STATE_DISABLED, ADF4351_PWRDOWN_DISABLED, ADF4351_PDPOLARITY_POSITIVE,
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9308      	str	r3, [sp, #32]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	9307      	str	r3, [sp, #28]
 8000a42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a46:	9306      	str	r3, [sp, #24]
 8000a48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000a4c:	9305      	str	r3, [sp, #20]
 8000a4e:	883b      	ldrh	r3, [r7, #0]
 8000a50:	9304      	str	r3, [sp, #16]
 8000a52:	2300      	movs	r3, #0
 8000a54:	9303      	str	r3, [sp, #12]
 8000a56:	2307      	movs	r3, #7
 8000a58:	9302      	str	r3, [sp, #8]
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2301      	movs	r3, #1
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fd89 	bl	8000580 <ADF4351_setRegister2>
			ADF4351_LDP_6NS, LDF, ADF4351_CHRGPUMPCURSET_2500U, ADF4351_DBLBUF_DISABLED, R_count, R_DIV2, refDbl, ADF4351_MUXOUT_DGND,
			ADF4351_LOWNOISEMODE_LOWNOISE);
	HAL_Delay(SETTINGS_REG_DELAY_MS);
 8000a6e:	2032      	movs	r0, #50	@ 0x32
 8000a70:	f001 f960 	bl	8001d34 <HAL_Delay>
	ADF4351_setRegister1(MOD, 1, psc, ADF4351_PHASEADJ_OFF);
 8000a74:	7b7a      	ldrb	r2, [r7, #13]
 8000a76:	8878      	ldrh	r0, [r7, #2]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	f7ff fd3b 	bl	80004f6 <ADF4351_setRegister1>
	HAL_Delay(SETTINGS_REG_DELAY_MS);
 8000a80:	2032      	movs	r0, #50	@ 0x32
 8000a82:	f001 f957 	bl	8001d34 <HAL_Delay>
	ADF4351_setRegister0(FRAC, INT);
 8000a86:	88fa      	ldrh	r2, [r7, #6]
 8000a88:	88bb      	ldrh	r3, [r7, #4]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd0e 	bl	80004ae <ADF4351_setRegister0>
	HAL_Delay(SETTINGS_REG_DELAY_MS);
 8000a92:	2032      	movs	r0, #50	@ 0x32
 8000a94:	f001 f94e 	bl	8001d34 <HAL_Delay>
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	ecbd 8b02 	vpop	{d8}
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	42480000 	.word	0x42480000
 8000aa8:	45610000 	.word	0x45610000

08000aac <ADF4351_RF_div_val>:
byte ADF4351_RF_div_val(byte RF_div)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	return (1 << RF_div);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	b2db      	uxtb	r3, r3
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <ADF4351_VCO_freq>:
float ADF4351_VCO_freq(float REF_in, _bool R_DIV2, _bool refDbl, dByte R_count, dByte INT, dByte FRAC, dByte MOD)
{
 8000acc:	b490      	push	{r4, r7}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	4608      	mov	r0, r1
 8000ada:	4611      	mov	r1, r2
 8000adc:	461a      	mov	r2, r3
 8000ade:	4623      	mov	r3, r4
 8000ae0:	72fb      	strb	r3, [r7, #11]
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	72bb      	strb	r3, [r7, #10]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	813b      	strh	r3, [r7, #8]
 8000aea:	4613      	mov	r3, r2
 8000aec:	80fb      	strh	r3, [r7, #6]
	return REF_in * (((float)(1 + refDbl)) / (((float)R_count) * ((float)(1 + R_DIV2)))) *
 8000aee:	7abb      	ldrb	r3, [r7, #10]
 8000af0:	3301      	adds	r3, #1
 8000af2:	ee07 3a90 	vmov	s15, r3
 8000af6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000afa:	893b      	ldrh	r3, [r7, #8]
 8000afc:	ee07 3a90 	vmov	s15, r3
 8000b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b04:	7afb      	ldrb	r3, [r7, #11]
 8000b06:	3301      	adds	r3, #1
 8000b08:	ee07 3a90 	vmov	s15, r3
 8000b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b18:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
		   (((float)INT) + ((float)FRAC) / ((float)MOD));
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000b2a:	8b3b      	ldrh	r3, [r7, #24]
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8000b34:	8bbb      	ldrh	r3, [r7, #28]
 8000b36:	ee07 3a90 	vmov	s15, r3
 8000b3a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8000b3e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8000b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
	return REF_in * (((float)(1 + refDbl)) / (((float)R_count) * ((float)(1 + R_DIV2)))) *
 8000b46:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc90      	pop	{r4, r7}
 8000b54:	4770      	bx	lr
	...

08000b58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2220      	movs	r2, #32
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f008 f9f5 	bl	8008f54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b6a:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000b6c:	4a30      	ldr	r2, [pc, #192]	@ (8000c30 <MX_ADC1_Init+0xd8>)
 8000b6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b82:	4b2a      	ldr	r3, [pc, #168]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b88:	4b28      	ldr	r3, [pc, #160]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b8e:	4b27      	ldr	r3, [pc, #156]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b94:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000b9c:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba2:	4b22      	ldr	r3, [pc, #136]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT15;
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000bac:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000bb0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000bb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000bca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bce:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be4:	4811      	ldr	r0, [pc, #68]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000be6:	f001 fc71 	bl	80024cc <HAL_ADC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000bf0:	f000 fa9f 	bl	8001132 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_ADC1_Init+0xdc>)
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c04:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c06:	2304      	movs	r3, #4
 8000c08:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	@ (8000c2c <MX_ADC1_Init+0xd4>)
 8000c14:	f002 fa78 	bl	8003108 <HAL_ADC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000c1e:	f000 fa88 	bl	8001132 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000028 	.word	0x20000028
 8000c30:	42028000 	.word	0x42028000
 8000c34:	04000002 	.word	0x04000002

08000c38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	22c0      	movs	r2, #192	@ 0xc0
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f008 f97b 	bl	8008f54 <memset>
  if(adcHandle->Instance==ADC1)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a4a      	ldr	r2, [pc, #296]	@ (8000d8c <HAL_ADC_MspInit+0x154>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	f040 808c 	bne.w	8000d82 <HAL_ADC_MspInit+0x14a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000c6a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSE;
 8000c76:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4618      	mov	r0, r3
 8000c84:	f006 f9e8 	bl	8007058 <HAL_RCCEx_PeriphCLKConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8000c8e:	f000 fa50 	bl	8001132 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c92:	4b3f      	ldr	r3, [pc, #252]	@ (8000d90 <HAL_ADC_MspInit+0x158>)
 8000c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c98:	4a3d      	ldr	r2, [pc, #244]	@ (8000d90 <HAL_ADC_MspInit+0x158>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8000d90 <HAL_ADC_MspInit+0x158>)
 8000ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	4b37      	ldr	r3, [pc, #220]	@ (8000d90 <HAL_ADC_MspInit+0x158>)
 8000cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb6:	4a36      	ldr	r2, [pc, #216]	@ (8000d90 <HAL_ADC_MspInit+0x158>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cc0:	4b33      	ldr	r3, [pc, #204]	@ (8000d90 <HAL_ADC_MspInit+0x158>)
 8000cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	482b      	ldr	r0, [pc, #172]	@ (8000d94 <HAL_ADC_MspInit+0x15c>)
 8000ce8:	f004 fc86 	bl	80055f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000cee:	4a2b      	ldr	r2, [pc, #172]	@ (8000d9c <HAL_ADC_MspInit+0x164>)
 8000cf0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_ADC1;
 8000cf2:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfe:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8000d04:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d0c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d10:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000d12:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d1e:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000d44:	4814      	ldr	r0, [pc, #80]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d46:	f003 fbff 	bl	8004548 <HAL_DMA_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_ADC_MspInit+0x11c>
    {
      Error_Handler();
 8000d50:	f000 f9ef 	bl	8001132 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel0);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d58:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000d60:	2110      	movs	r1, #16
 8000d62:	480d      	ldr	r0, [pc, #52]	@ (8000d98 <HAL_ADC_MspInit+0x160>)
 8000d64:	f003 ff82 	bl	8004c6c <HAL_DMA_ConfigChannelAttributes>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_ADC_MspInit+0x13a>
    {
      Error_Handler();
 8000d6e:	f000 f9e0 	bl	8001132 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2025      	movs	r0, #37	@ 0x25
 8000d78:	f003 fb0a 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000d7c:	2025      	movs	r0, #37	@ 0x25
 8000d7e:	f003 fb21 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d82:	bf00      	nop
 8000d84:	37e8      	adds	r7, #232	@ 0xe8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	42028000 	.word	0x42028000
 8000d90:	46020c00 	.word	0x46020c00
 8000d94:	42020800 	.word	0x42020800
 8000d98:	200000b4 	.word	0x200000b4
 8000d9c:	40020050 	.word	0x40020050

08000da0 <sync_enableGate>:
	sync_enableSync();
	HAL_Delay(RESET_PULSE_DELAY_MS);
	sync_disableSync();
}
void sync_enableGate()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SYNC_GATE_PORT, SYNC_GATE_PIN, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2180      	movs	r1, #128	@ 0x80
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <sync_enableGate+0x14>)
 8000daa:	f004 fdfd 	bl	80059a8 <HAL_GPIO_WritePin>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	42020c00 	.word	0x42020c00

08000db8 <sync_settings>:
void sync_disableGate()
{
	HAL_GPIO_WritePin(SYNC_GATE_PORT, SYNC_GATE_PIN, GPIO_PIN_RESET);
}
void sync_settings(byte div)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	byte reg = div;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	73fb      	strb	r3, [r7, #15]
	for (byte i = 0; i < 8; i++) {
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73bb      	strb	r3, [r7, #14]
 8000dca:	e027      	b.n	8000e1c <sync_settings+0x64>
		HAL_GPIO_WritePin(SYNC_SET_CLK_PORT, SYNC_SET_CLK_PIN, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2120      	movs	r1, #32
 8000dd0:	4816      	ldr	r0, [pc, #88]	@ (8000e2c <sync_settings+0x74>)
 8000dd2:	f004 fde9 	bl	80059a8 <HAL_GPIO_WritePin>
		HAL_Delay(SET_REG_DELAY_MS);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f000 ffac 	bl	8001d34 <HAL_Delay>
		if(REG_SETTINGS_LAST_BIT & reg) {
 8000ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	da05      	bge.n	8000df0 <sync_settings+0x38>
			HAL_GPIO_WritePin(SYNC_SET_DATA_PORT, SYNC_SET_DATA_PIN, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2110      	movs	r1, #16
 8000de8:	4810      	ldr	r0, [pc, #64]	@ (8000e2c <sync_settings+0x74>)
 8000dea:	f004 fddd 	bl	80059a8 <HAL_GPIO_WritePin>
 8000dee:	e004      	b.n	8000dfa <sync_settings+0x42>
		} else {
			HAL_GPIO_WritePin(SYNC_SET_DATA_PORT, SYNC_SET_DATA_PIN, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2110      	movs	r1, #16
 8000df4:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <sync_settings+0x74>)
 8000df6:	f004 fdd7 	bl	80059a8 <HAL_GPIO_WritePin>
		}
		HAL_Delay(SET_REG_DELAY_MS);
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 ff9a 	bl	8001d34 <HAL_Delay>
		HAL_GPIO_WritePin(SYNC_SET_CLK_PORT, SYNC_SET_CLK_PIN, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2120      	movs	r1, #32
 8000e04:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <sync_settings+0x74>)
 8000e06:	f004 fdcf 	bl	80059a8 <HAL_GPIO_WritePin>
		HAL_Delay(SET_REG_DELAY_MS);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f000 ff92 	bl	8001d34 <HAL_Delay>
		reg <<= 1;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
	for (byte i = 0; i < 8; i++) {
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	73bb      	strb	r3, [r7, #14]
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	2b07      	cmp	r3, #7
 8000e20:	d9d4      	bls.n	8000dcc <sync_settings+0x14>
	}
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	42020c00 	.word	0x42020c00

08000e30 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <MX_GPDMA1_Init+0x3c>)
 8000e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e6c <MX_GPDMA1_Init+0x3c>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <MX_GPDMA1_Init+0x3c>)
 8000e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	201d      	movs	r0, #29
 8000e5a:	f003 fa99 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000e5e:	201d      	movs	r0, #29
 8000e60:	f003 fab0 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	46020c00 	.word	0x46020c00

08000e70 <MX_GPIO_Init>:

/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b63      	ldr	r3, [pc, #396]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e8c:	4a61      	ldr	r2, [pc, #388]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e96:	4b5f      	ldr	r3, [pc, #380]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eaa:	4a5a      	ldr	r2, [pc, #360]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eb4:	4b57      	ldr	r3, [pc, #348]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b54      	ldr	r3, [pc, #336]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec8:	4a52      	ldr	r2, [pc, #328]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ed2:	4b50      	ldr	r3, [pc, #320]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee6:	4a4b      	ldr	r2, [pc, #300]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ef0:	4b48      	ldr	r3, [pc, #288]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efe:	4b45      	ldr	r3, [pc, #276]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f04:	4a43      	ldr	r2, [pc, #268]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f0e:	4b41      	ldr	r3, [pc, #260]	@ (8001014 <MX_GPIO_Init+0x1a4>)
 8000f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	210c      	movs	r1, #12
 8000f20:	483d      	ldr	r0, [pc, #244]	@ (8001018 <MX_GPIO_Init+0x1a8>)
 8000f22:	f004 fd41 	bl	80059a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2103      	movs	r1, #3
 8000f2a:	483c      	ldr	r0, [pc, #240]	@ (800101c <MX_GPIO_Init+0x1ac>)
 8000f2c:	f004 fd3c 	bl	80059a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	21f0      	movs	r1, #240	@ 0xf0
 8000f34:	483a      	ldr	r0, [pc, #232]	@ (8001020 <MX_GPIO_Init+0x1b0>)
 8000f36:	f004 fd37 	bl	80059a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4832      	ldr	r0, [pc, #200]	@ (8001018 <MX_GPIO_Init+0x1a8>)
 8000f50:	f004 fb52 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5a:	4b32      	ldr	r3, [pc, #200]	@ (8001024 <MX_GPIO_Init+0x1b4>)
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	482b      	ldr	r0, [pc, #172]	@ (8001018 <MX_GPIO_Init+0x1a8>)
 8000f6a:	f004 fb45 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f6e:	230c      	movs	r3, #12
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4824      	ldr	r0, [pc, #144]	@ (8001018 <MX_GPIO_Init+0x1a8>)
 8000f86:	f004 fb37 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481e      	ldr	r0, [pc, #120]	@ (800101c <MX_GPIO_Init+0x1ac>)
 8000fa2:	f004 fb29 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4818      	ldr	r0, [pc, #96]	@ (800101c <MX_GPIO_Init+0x1ac>)
 8000fba:	f004 fb1d 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <MX_GPIO_Init+0x1b4>)
 8000fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4815      	ldr	r0, [pc, #84]	@ (8001028 <MX_GPIO_Init+0x1b8>)
 8000fd4:	f004 fb10 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480d      	ldr	r0, [pc, #52]	@ (8001020 <MX_GPIO_Init+0x1b0>)
 8000fec:	f004 fb04 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ff0:	23f0      	movs	r3, #240	@ 0xf0
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	@ (8001020 <MX_GPIO_Init+0x1b0>)
 8001008:	f004 faf6 	bl	80055f8 <HAL_GPIO_Init>

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	@ 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	46020c00 	.word	0x46020c00
 8001018:	42020800 	.word	0x42020800
 800101c:	42020000 	.word	0x42020000
 8001020:	42020c00 	.word	0x42020c00
 8001024:	10110000 	.word	0x10110000
 8001028:	42021000 	.word	0x42021000

0800102c <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001030:	2000      	movs	r0, #0
 8001032:	f004 fcd1 	bl	80059d8 <HAL_ICACHE_ConfigAssociativityMode>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800103c:	f000 f879 	bl	8001132 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001040:	f004 fcea 	bl	8005a18 <HAL_ICACHE_Enable>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800104a:	f000 f872 	bl	8001132 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}

08001052 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f000 fda7 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 f811 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f7ff ff07 	bl	8000e70 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001062:	f7ff fee5 	bl	8000e30 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 8001066:	f7ff fd77 	bl	8000b58 <MX_ADC1_Init>
  MX_ICACHE_Init();
 800106a:	f7ff ffdf 	bl	800102c <MX_ICACHE_Init>
  MX_TIM6_Init();
 800106e:	f000 fd11 	bl	8001a94 <MX_TIM6_Init>
  MX_SPI3_Init();
 8001072:	f000 fb63 	bl	800173c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  main_init();
 8001076:	f000 f889 	bl	800118c <main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  main_cycle();
 800107a:	f000 f89b 	bl	80011b4 <main_cycle>
 800107e:	e7fc      	b.n	800107a <main+0x28>

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b09e      	sub	sp, #120	@ 0x78
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2260      	movs	r2, #96	@ 0x60
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f007 ff60 	bl	8008f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
 80010a2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80010a4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80010a8:	f004 fcc6 	bl	8005a38 <HAL_PWREx_ControlVoltageScaling>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80010b2:	f000 f83e 	bl	8001132 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 80010ba:	f44f 13a8 	mov.w	r3, #1376256	@ 0x150000
 80010be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c0:	2302      	movs	r3, #2
 80010c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c4:	2303      	movs	r3, #3
 80010c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80010c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010d2:	2310      	movs	r3, #16
 80010d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010da:	2304      	movs	r3, #4
 80010dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010de:	2302      	movs	r3, #2
 80010e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80010e2:	230c      	movs	r3, #12
 80010e4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fd3e 	bl	8005b70 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80010fa:	f000 f81a 	bl	8001132 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	231f      	movs	r3, #31
 8001100:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2303      	movs	r3, #3
 8001104:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	2103      	movs	r1, #3
 800111a:	4618      	mov	r0, r3
 800111c:	f005 fc04 	bl	8006928 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001126:	f000 f804 	bl	8001132 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3778      	adds	r7, #120	@ 0x78
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001136:	b672      	cpsid	i
}
 8001138:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113a:	bf00      	nop
 800113c:	e7fd      	b.n	800113a <Error_Handler+0x8>
	...

08001140 <HAL_TIM_PeriodElapsedCallback>:
#include "mainCycle.h"

_bool main_TIM6_isSec = FALSE;
uint16_t main_TIM6_ms = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d10f      	bne.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x32>
		main_TIM6_ms++;
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800115c:	801a      	strh	r2, [r3, #0]
		if (main_TIM6_ms >= 1) {
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x32>
			main_TIM6_isSec = TRUE;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
			main_TIM6_ms = 0;
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800116e:	2200      	movs	r2, #0
 8001170:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40001000 	.word	0x40001000
 8001184:	2000012e 	.word	0x2000012e
 8001188:	2000012c 	.word	0x2000012c

0800118c <main_init>:
void main_init()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	ref_init(&hadc1);
 8001190:	4806      	ldr	r0, [pc, #24]	@ (80011ac <main_init+0x20>)
 8001192:	f000 fa09 	bl	80015a8 <ref_init>
	ref_measure();
 8001196:	f000 fa89 	bl	80016ac <ref_measure>
	HAL_Delay(2000);
 800119a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800119e:	f000 fdc9 	bl	8001d34 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 80011a2:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <main_init+0x24>)
 80011a4:	f007 fab6 	bl	8008714 <HAL_TIM_Base_Start_IT>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000028 	.word	0x20000028
 80011b0:	200754e0 	.word	0x200754e0

080011b4 <main_cycle>:
void main_cmdProc(byte* data)
{

}
void main_cycle()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	ref_cycle();
 80011b8:	f000 fa16 	bl	80015e8 <ref_cycle>
    if(main_TIM6_isSec) {
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <main_cycle+0x1c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <main_cycle+0x16>

    	//ref_testValue();
		main_TIM6_isSec = FALSE;
 80011c4:	4b02      	ldr	r3, [pc, #8]	@ (80011d0 <main_cycle+0x1c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
    }
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000012c 	.word	0x2000012c

080011d4 <HAL_ADC_startDMAChannel>:
		float volt = (float)ref_adcData[i] * coef;
		ref_adcData[i] = *((uint32_t*)(&volt));
	}
}
HAL_StatusTypeDef HAL_ADC_startDMAChannel(ADC_HandleTypeDef* hadc, const uint32_t* pData, uint32_t Length)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b0a2      	sub	sp, #136	@ 0x88
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	uint32_t LengthInBytes;
	DMA_NodeConfTypeDef node_conf;
	HAL_StatusTypeDef tmp_hal_status;
	/* Check linked list mode */
	if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST) {
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d04f      	beq.n	800128e <HAL_ADC_startDMAChannel+0xba>
	    if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL)) {
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d046      	beq.n	8001286 <HAL_ADC_startDMAChannel+0xb2>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d040      	beq.n	8001286 <HAL_ADC_startDMAChannel+0xb2>
	    	/* Length should be converted to number of bytes */
	    	if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f004 f8a0 	bl	8005358 <HAL_DMAEx_List_GetNodeConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_ADC_startDMAChannel+0x4e>
	    		return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e05c      	b.n	80012dc <HAL_ADC_startDMAChannel+0x108>
	    	/* Length should be converted to number of bytes */
	    	if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD) {
 8001222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001224:	2b02      	cmp	r3, #2
 8001226:	d104      	bne.n	8001232 <HAL_ADC_startDMAChannel+0x5e>
	    		/* Word -> Bytes */
	            LengthInBytes = Length * 4U;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001230:	e00a      	b.n	8001248 <HAL_ADC_startDMAChannel+0x74>
	    	} else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD) {
 8001232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001234:	2b01      	cmp	r3, #1
 8001236:	d104      	bne.n	8001242 <HAL_ADC_startDMAChannel+0x6e>
	            /* Halfword -> Bytes */
	            LengthInBytes = Length * 2U;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001240:	e002      	b.n	8001248 <HAL_ADC_startDMAChannel+0x74>
	        } else { /* Bytes */
	            /* Same size already expressed in Bytes */
	            LengthInBytes = Length;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	        }
	    	hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800124c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001254:	609a      	str	r2, [r3, #8]
	    	hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hadc->Instance->DR;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60da      	str	r2, [r3, #12]
	    	hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800126c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	611a      	str	r2, [r3, #16]
	        tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001278:	4618      	mov	r0, r3
 800127a:	f003 ffd9 	bl	8005230 <HAL_DMAEx_List_Start_IT>
 800127e:	4603      	mov	r3, r0
 8001280:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001284:	e028      	b.n	80012d8 <HAL_ADC_startDMAChannel+0x104>
	    } else {
	        tmp_hal_status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800128c:	e024      	b.n	80012d8 <HAL_ADC_startDMAChannel+0x104>
	    }
	} else {
	    /* Length should be converted to number of bytes */
	    if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD) {
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d104      	bne.n	80012a2 <HAL_ADC_startDMAChannel+0xce>
	    	/* Word -> Bytes */
	        LengthInBytes = Length * 4U;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80012a0:	e00c      	b.n	80012bc <HAL_ADC_startDMAChannel+0xe8>
	    } else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD) {
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d104      	bne.n	80012b6 <HAL_ADC_startDMAChannel+0xe2>
	        /* Halfword -> Bytes */
	        LengthInBytes = Length * 2U;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80012b4:	e002      	b.n	80012bc <HAL_ADC_startDMAChannel+0xe8>
	    } else { /* Bytes */
	        /* Same size already expressed in Bytes */
	        LengthInBytes = Length;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	    }
	    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, LengthInBytes);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3340      	adds	r3, #64	@ 0x40
 80012c6:	4619      	mov	r1, r3
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012ce:	f003 fa67 	bl	80047a0 <HAL_DMA_Start_IT>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	}
	return tmp_hal_status;
 80012d8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3788      	adds	r7, #136	@ 0x88
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <ADC_startDMA>:
void ADC_startDMA(ADC_HandleTypeDef* hadc, const uint32_t* pData, uint32_t Length)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
	uint32_t LengthInBytes;
	if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d103      	bne.n	8001302 <ADC_startDMA+0x1e>
		/* Word -> Bytes */
		LengthInBytes = Length * 4U;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e00a      	b.n	8001318 <ADC_startDMA+0x34>
	} else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD) {
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d103      	bne.n	8001314 <ADC_startDMA+0x30>
		/* Halfword -> Bytes */
		LengthInBytes = Length * 2U;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e001      	b.n	8001318 <ADC_startDMA+0x34>
	} else { /* Bytes */
		/* Same size already expressed in Bytes */
		LengthInBytes = Length;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	617b      	str	r3, [r7, #20]
	}

	/* Configure the source address, destination address, the data size and clear flags */
	MODIFY_REG(hadc->DMA_Handle->Instance->CBR1, DMA_CBR1_BNDT, (LengthInBytes & DMA_CBR1_BNDT));
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001320:	0c1b      	lsrs	r3, r3, #16
 8001322:	041b      	lsls	r3, r3, #16
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	b291      	uxth	r1, r2
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	430b      	orrs	r3, r1
 8001330:	6493      	str	r3, [r2, #72]	@ 0x48
	/* Clear all interrupt flags */
	__HAL_DMA_CLEAR_FLAG(hadc->DMA_Handle, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP | DMA_FLAG_TO);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800133c:	60da      	str	r2, [r3, #12]
	/* Configure DMA channel source address */
	hadc->DMA_Handle->Instance->CSAR = (uint32_t)&hadc->Instance->DR;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	64da      	str	r2, [r3, #76]	@ 0x4c
	/* Configure DMA channel destination address */
	hadc->DMA_Handle->Instance->CDAR = (uint32_t)pData;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hadc->DMA_Handle, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800136a:	615a      	str	r2, [r3, #20]
    __HAL_DMA_ENABLE_IT(hadc->DMA_Handle, DMA_IT_HT);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	695a      	ldr	r2, [r3, #20]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800137e:	615a      	str	r2, [r3, #20]
    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hadc->DMA_Handle);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	615a      	str	r2, [r3, #20]

    MODIFY_REG(ref_hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8001394:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <ADC_startDMA+0x100>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013a4:	4a0f      	ldr	r2, [pc, #60]	@ (80013e4 <ADC_startDMA+0x100>)
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	6093      	str	r3, [r2, #8]

    hadc->DMA_Handle->State = HAL_DMA_STATE_BUSY;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b4:	2202      	movs	r2, #2
 80013b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        /* Update the DMA channel error code */
    hadc->DMA_Handle->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013be:	2200      	movs	r2, #0
 80013c0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_LOCK(hadc->DMA_Handle);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d004      	beq.n	80013d8 <ADC_startDMA+0xf4>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000134 	.word	0x20000134

080013e8 <ADC_measCpltCallback>:
void ADC_measCpltCallback()
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_DMA_TrsvCpltCallback>:
void HAL_DMA_TrsvCpltCallback(DMA_HandleTypeDef* hdma)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	if (ref_hadc->DMA_Handle->Instance != hdma->Instance)
 8001414:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_DMA_TrsvCpltCallback+0x4c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d113      	bne.n	800144c <HAL_DMA_TrsvCpltCallback+0x40>
		return;
	if (DMA_nextTrsvLen > 0) {
 8001424:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <HAL_DMA_TrsvCpltCallback+0x50>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d007      	beq.n	800143c <HAL_DMA_TrsvCpltCallback+0x30>
		SET_BIT(flags, FLAG_START_DMA);
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <HAL_DMA_TrsvCpltCallback+0x54>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <HAL_DMA_TrsvCpltCallback+0x54>)
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e008      	b.n	800144e <HAL_DMA_TrsvCpltCallback+0x42>
	} else {
		SET_BIT(flags, FLAG_STOP_ADC);
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <HAL_DMA_TrsvCpltCallback+0x54>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_DMA_TrsvCpltCallback+0x54>)
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e000      	b.n	800144e <HAL_DMA_TrsvCpltCallback+0x42>
		return;
 800144c:	bf00      	nop
	}
}
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	20000134 	.word	0x20000134
 800145c:	2007543c 	.word	0x2007543c
 8001460:	20000130 	.word	0x20000130

08001464 <meas_start_DMA>:

void meas_start_DMA(uint32_t dest_ptr_offset, uint32_t size)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	ref_hadc->DMA_Handle->XferCpltCallback = HAL_DMA_TrsvCpltCallback;
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <meas_start_DMA+0x30>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001474:	4a08      	ldr	r2, [pc, #32]	@ (8001498 <meas_start_DMA+0x34>)
 8001476:	661a      	str	r2, [r3, #96]	@ 0x60
	ADC_startDMA(ref_hadc, TO_UINT32_PTR(ref_adcData, dest_ptr_offset), size);
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <meas_start_DMA+0x30>)
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <meas_start_DMA+0x38>)
 8001482:	4413      	add	r3, r2
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff ff2c 	bl	80012e4 <ADC_startDMA>
	//__HAL_ADC_CLEAR_FLAG(ref_hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
	/* Disable all interruptions before enabling the desired ones */
	//__HAL_ADC_DISABLE_IT(ref_hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
	//__HAL_ADC_ENABLE_IT(ref_hadc, ADC_IT_EOC);
	//MODIFY_REG(ref_hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000134 	.word	0x20000134
 8001498:	0800140d 	.word	0x0800140d
 800149c:	20000138 	.word	0x20000138

080014a0 <meas_start_ADC_DMA>:
void meas_start_ADC_DMA(uint32_t size)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	ref_hadc->DMA_Handle->XferCpltCallback = HAL_DMA_TrsvCpltCallback;
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <meas_start_ADC_DMA+0x4c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ae:	4a10      	ldr	r2, [pc, #64]	@ (80014f0 <meas_start_ADC_DMA+0x50>)
 80014b0:	661a      	str	r2, [r3, #96]	@ 0x60
	if(HAL_ADC_startDMAChannel(ref_hadc, TO_UINT32_PTR(ref_adcData, 0), size) != HAL_OK)
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <meas_start_ADC_DMA+0x4c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	490e      	ldr	r1, [pc, #56]	@ (80014f4 <meas_start_ADC_DMA+0x54>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe8a 	bl	80011d4 <HAL_ADC_startDMAChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10e      	bne.n	80014e4 <meas_start_ADC_DMA+0x44>
		return;
	if(HAL_ADC_Start_IT(ref_hadc) != HAL_OK)
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <meas_start_ADC_DMA+0x4c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 fac8 	bl	8002a60 <HAL_ADC_Start_IT>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <meas_start_ADC_DMA+0x46>
		HAL_DMA_Abort(ref_hadc->DMA_Handle);
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <meas_start_ADC_DMA+0x4c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 f9bf 	bl	8004860 <HAL_DMA_Abort>
 80014e2:	e000      	b.n	80014e6 <meas_start_ADC_DMA+0x46>
		return;
 80014e4:	bf00      	nop

}
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000134 	.word	0x20000134
 80014f0:	0800140d 	.word	0x0800140d
 80014f4:	20000138 	.word	0x20000138

080014f8 <ref_sync_settings>:

		}
	}
}
void ref_sync_settings(byte div)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	sync_div = div;
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <ref_sync_settings+0x20>)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	7013      	strb	r3, [r2, #0]
	sync_settings(div);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fc54 	bl	8000db8 <sync_settings>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2007544f 	.word	0x2007544f

0800151c <ref_synt_settings>:
void ref_synt_settings(dByte INT, dByte FRAC, dByte MOD, dByte R_count, byte refDbl, byte R_DIV2, byte RF_div)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b087      	sub	sp, #28
 8001520:	af04      	add	r7, sp, #16
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	461a      	mov	r2, r3
 800152a:	4623      	mov	r3, r4
 800152c:	80fb      	strh	r3, [r7, #6]
 800152e:	4603      	mov	r3, r0
 8001530:	80bb      	strh	r3, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	807b      	strh	r3, [r7, #2]
 8001536:	4613      	mov	r3, r2
 8001538:	803b      	strh	r3, [r7, #0]
	synt_INT = INT;
 800153a:	4a14      	ldr	r2, [pc, #80]	@ (800158c <ref_synt_settings+0x70>)
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	8013      	strh	r3, [r2, #0]
	synt_FRAC = FRAC;
 8001540:	4a13      	ldr	r2, [pc, #76]	@ (8001590 <ref_synt_settings+0x74>)
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	8013      	strh	r3, [r2, #0]
	synt_MOD = MOD;
 8001546:	4a13      	ldr	r2, [pc, #76]	@ (8001594 <ref_synt_settings+0x78>)
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	8013      	strh	r3, [r2, #0]
	synt_R_count = R_count;
 800154c:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <ref_synt_settings+0x7c>)
 800154e:	883b      	ldrh	r3, [r7, #0]
 8001550:	8013      	strh	r3, [r2, #0]
	synt_refDbl = refDbl;
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <ref_synt_settings+0x80>)
 8001554:	7e3b      	ldrb	r3, [r7, #24]
 8001556:	7013      	strb	r3, [r2, #0]
	synt_R_div2 = R_DIV2;
 8001558:	4a11      	ldr	r2, [pc, #68]	@ (80015a0 <ref_synt_settings+0x84>)
 800155a:	7f3b      	ldrb	r3, [r7, #28]
 800155c:	7013      	strb	r3, [r2, #0]
	synt_RF_div = RF_div;
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <ref_synt_settings+0x88>)
 8001560:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001564:	7013      	strb	r3, [r2, #0]
	ADF4351_settings(INT, FRAC, MOD, R_count, refDbl, R_DIV2, RF_div);
 8001566:	883c      	ldrh	r4, [r7, #0]
 8001568:	887a      	ldrh	r2, [r7, #2]
 800156a:	88b9      	ldrh	r1, [r7, #4]
 800156c:	88f8      	ldrh	r0, [r7, #6]
 800156e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	7f3b      	ldrb	r3, [r7, #28]
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	7e3b      	ldrb	r3, [r7, #24]
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4623      	mov	r3, r4
 800157e:	f7ff f9e3 	bl	8000948 <ADF4351_settings>
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	20075444 	.word	0x20075444
 8001590:	20075446 	.word	0x20075446
 8001594:	20075448 	.word	0x20075448
 8001598:	2007544a 	.word	0x2007544a
 800159c:	2007544c 	.word	0x2007544c
 80015a0:	2007544d 	.word	0x2007544d
 80015a4:	2007544e 	.word	0x2007544e

080015a8 <ref_init>:
void ref_init(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af04      	add	r7, sp, #16
 80015ae:	6078      	str	r0, [r7, #4]
	ADF4351_init();
 80015b0:	f7fe ff08 	bl	80003c4 <ADF4351_init>
	ref_synt_settings(REF_SYNT_INT, REF_SYNT_FRAC, REF_SYNT_MOD, REF_SYNT_R_COUNT,
 80015b4:	2306      	movs	r3, #6
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	2301      	movs	r3, #1
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	2264      	movs	r2, #100	@ 0x64
 80015c4:	210a      	movs	r1, #10
 80015c6:	2080      	movs	r0, #128	@ 0x80
 80015c8:	f7ff ffa8 	bl	800151c <ref_synt_settings>
			          REF_SYNT_REF_DBL, REF_SYNT_R_DIV2, REF_SYNT_RF_DIV);
	sync_enableGate();
 80015cc:	f7ff fbe8 	bl	8000da0 <sync_enableGate>
	ref_sync_settings(REF_SYNC_DIV);
 80015d0:	20fa      	movs	r0, #250	@ 0xfa
 80015d2:	f7ff ff91 	bl	80014f8 <ref_sync_settings>
	ref_hadc = hadc;
 80015d6:	4a03      	ldr	r2, [pc, #12]	@ (80015e4 <ref_init+0x3c>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000134 	.word	0x20000134

080015e8 <ref_cycle>:
void ref_cycle()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	if (flags & FLAG_START_DMA) {
 80015ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001698 <ref_cycle+0xb0>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d038      	beq.n	800166a <ref_cycle+0x82>
		if (REF_DMA_TRSV_LEN_MAX < DMA_nextTrsvLen) {
 80015f8:	4b28      	ldr	r3, [pc, #160]	@ (800169c <ref_cycle+0xb4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001600:	d315      	bcc.n	800162e <ref_cycle+0x46>
			meas_start_DMA(ref_adcDataSize, REF_DMA_TRSV_LEN_MAX);
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <ref_cycle+0xb8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff2a 	bl	8001464 <meas_start_DMA>
			DMA_nextTrsvLen -= REF_DMA_TRSV_LEN_MAX;
 8001610:	4b22      	ldr	r3, [pc, #136]	@ (800169c <ref_cycle+0xb4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8001618:	3b3f      	subs	r3, #63	@ 0x3f
 800161a:	4a20      	ldr	r2, [pc, #128]	@ (800169c <ref_cycle+0xb4>)
 800161c:	6013      	str	r3, [r2, #0]
			ref_adcDataSize += REF_DMA_TRSV_LEN_MAX;
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <ref_cycle+0xb8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001626:	333f      	adds	r3, #63	@ 0x3f
 8001628:	4a1d      	ldr	r2, [pc, #116]	@ (80016a0 <ref_cycle+0xb8>)
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e011      	b.n	8001652 <ref_cycle+0x6a>
		} else {
			meas_start_DMA(ref_adcDataSize, DMA_nextTrsvLen);
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <ref_cycle+0xb8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <ref_cycle+0xb4>)
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff13 	bl	8001464 <meas_start_DMA>
			DMA_nextTrsvLen = 0;
 800163e:	4b17      	ldr	r3, [pc, #92]	@ (800169c <ref_cycle+0xb4>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
			ref_adcDataSize += DMA_nextTrsvLen;
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <ref_cycle+0xb8>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <ref_cycle+0xb4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4413      	add	r3, r2
 800164e:	4a14      	ldr	r2, [pc, #80]	@ (80016a0 <ref_cycle+0xb8>)
 8001650:	6013      	str	r3, [r2, #0]
		}
		ref_testVal++;
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <ref_cycle+0xbc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <ref_cycle+0xbc>)
 800165a:	6013      	str	r3, [r2, #0]
		CLEAR_BIT(flags, FLAG_START_DMA);
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <ref_cycle+0xb0>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <ref_cycle+0xb0>)
 8001668:	701a      	strb	r2, [r3, #0]
	}
	if (flags & FLAG_STOP_ADC) {
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <ref_cycle+0xb0>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00d      	beq.n	8001692 <ref_cycle+0xaa>
		HAL_ADC_Stop_IT(ref_hadc);
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <ref_cycle+0xc0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f001 faa4 	bl	8002bc8 <HAL_ADC_Stop_IT>
		ADC_measCpltCallback();
 8001680:	f7ff feb2 	bl	80013e8 <ADC_measCpltCallback>
		CLEAR_BIT(flags, FLAG_STOP_ADC);
 8001684:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <ref_cycle+0xb0>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f023 0302 	bic.w	r3, r3, #2
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b02      	ldr	r3, [pc, #8]	@ (8001698 <ref_cycle+0xb0>)
 8001690:	701a      	strb	r2, [r3, #0]
	}
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000130 	.word	0x20000130
 800169c:	2007543c 	.word	0x2007543c
 80016a0:	20075438 	.word	0x20075438
 80016a4:	20075440 	.word	0x20075440
 80016a8:	20000134 	.word	0x20000134

080016ac <ref_measure>:
void ref_measure()
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
	uint32_t measSize = 65538;
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <ref_measure+0x5c>)
 80016b4:	607b      	str	r3, [r7, #4]
	ref_dataClear();
 80016b6:	f000 f82f 	bl	8001718 <ref_dataClear>
	ref_testVal = 0;
 80016ba:	4b14      	ldr	r3, [pc, #80]	@ (800170c <ref_measure+0x60>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
	ref_adcDataSize = 0;
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <ref_measure+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
	DMA_nextTrsvLen = 0;
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <ref_measure+0x68>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
	if (REF_DMA_TRSV_LEN_MAX < measSize) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016d2:	d30e      	bcc.n	80016f2 <ref_measure+0x46>
		DMA_nextTrsvLen = measSize - REF_DMA_TRSV_LEN_MAX;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 80016da:	3b3f      	subs	r3, #63	@ 0x3f
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <ref_measure+0x68>)
 80016de:	6013      	str	r3, [r2, #0]
		meas_start_ADC_DMA(REF_DMA_TRSV_LEN_MAX);
 80016e0:	f643 70ff 	movw	r0, #16383	@ 0x3fff
 80016e4:	f7ff fedc 	bl	80014a0 <meas_start_ADC_DMA>
		ref_adcDataSize = REF_DMA_TRSV_LEN_MAX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <ref_measure+0x64>)
 80016ea:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 80016ee:	601a      	str	r2, [r3, #0]
	} else {
		ref_adcDataSize = measSize;
		meas_start_ADC_DMA(measSize);
	}
}
 80016f0:	e005      	b.n	80016fe <ref_measure+0x52>
		ref_adcDataSize = measSize;
 80016f2:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <ref_measure+0x64>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6013      	str	r3, [r2, #0]
		meas_start_ADC_DMA(measSize);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fed1 	bl	80014a0 <meas_start_ADC_DMA>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	00010002 	.word	0x00010002
 800170c:	20075440 	.word	0x20075440
 8001710:	20075438 	.word	0x20075438
 8001714:	2007543c 	.word	0x2007543c

08001718 <ref_dataClear>:
void ref_dataClear()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	memset(ref_adcData, 0, REF_ADC_DATA_LEN * sizeof(ref_adcData[0]));
 800171c:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <ref_dataClear+0x18>)
 800171e:	2100      	movs	r1, #0
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <ref_dataClear+0x1c>)
 8001722:	f007 fc17 	bl	8008f54 <memset>
	ref_adcDataSize = 0;
 8001726:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <ref_dataClear+0x20>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	00075300 	.word	0x00075300
 8001734:	20000138 	.word	0x20000138
 8001738:	20075438 	.word	0x20075438

0800173c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800174c:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <MX_SPI3_Init+0xcc>)
 800174e:	4a2f      	ldr	r2, [pc, #188]	@ (800180c <MX_SPI3_Init+0xd0>)
 8001750:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001752:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <MX_SPI3_Init+0xcc>)
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001758:	4b2b      	ldr	r3, [pc, #172]	@ (8001808 <MX_SPI3_Init+0xcc>)
 800175a:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 800175e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001760:	4b29      	ldr	r3, [pc, #164]	@ (8001808 <MX_SPI3_Init+0xcc>)
 8001762:	2207      	movs	r2, #7
 8001764:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001766:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <MX_SPI3_Init+0xcc>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176c:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <MX_SPI3_Init+0xcc>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001772:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <MX_SPI3_Init+0xcc>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001778:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <MX_SPI3_Init+0xcc>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800177e:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <MX_SPI3_Init+0xcc>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001784:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <MX_SPI3_Init+0xcc>)
 8001786:	2200      	movs	r2, #0
 8001788:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <MX_SPI3_Init+0xcc>)
 800178c:	2207      	movs	r2, #7
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <MX_SPI3_Init+0xcc>)
 8001792:	2200      	movs	r2, #0
 8001794:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <MX_SPI3_Init+0xcc>)
 8001798:	2200      	movs	r2, #0
 800179a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <MX_SPI3_Init+0xcc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <MX_SPI3_Init+0xcc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017a8:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <MX_SPI3_Init+0xcc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <MX_SPI3_Init+0xcc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_SPI3_Init+0xcc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <MX_SPI3_Init+0xcc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MX_SPI3_Init+0xcc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <MX_SPI3_Init+0xcc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017cc:	480e      	ldr	r0, [pc, #56]	@ (8001808 <MX_SPI3_Init+0xcc>)
 80017ce:	f006 fb17 	bl	8007e00 <HAL_SPI_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80017d8:	f7ff fcab 	bl	8001132 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 80017e0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80017e4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4806      	ldr	r0, [pc, #24]	@ (8001808 <MX_SPI3_Init+0xcc>)
 80017f0:	f006 fef7 	bl	80085e2 <HAL_SPIEx_SetConfigAutonomousMode>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_SPI3_Init+0xc2>
  {
    Error_Handler();
 80017fa:	f7ff fc9a 	bl	8001132 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20075450 	.word	0x20075450
 800180c:	46002000 	.word	0x46002000

08001810 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0bc      	sub	sp, #240	@ 0xf0
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	22c0      	movs	r2, #192	@ 0xc0
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f007 fb8f 	bl	8008f54 <memset>
  if(spiHandle->Instance==SPI3)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a3d      	ldr	r2, [pc, #244]	@ (8001930 <HAL_SPI_MspInit+0x120>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d173      	bne.n	8001928 <HAL_SPI_MspInit+0x118>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001840:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 800184c:	2308      	movs	r3, #8
 800184e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	4618      	mov	r0, r3
 8001858:	f005 fbfe 	bl	8007058 <HAL_RCCEx_PeriphCLKConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001862:	f7ff fc66 	bl	8001132 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001866:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <HAL_SPI_MspInit+0x124>)
 8001868:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800186c:	4a31      	ldr	r2, [pc, #196]	@ (8001934 <HAL_SPI_MspInit+0x124>)
 800186e:	f043 0320 	orr.w	r3, r3, #32
 8001872:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001876:	4b2f      	ldr	r3, [pc, #188]	@ (8001934 <HAL_SPI_MspInit+0x124>)
 8001878:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b2b      	ldr	r3, [pc, #172]	@ (8001934 <HAL_SPI_MspInit+0x124>)
 8001886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188a:	4a2a      	ldr	r2, [pc, #168]	@ (8001934 <HAL_SPI_MspInit+0x124>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001894:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <HAL_SPI_MspInit+0x124>)
 8001896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <HAL_SPI_MspInit+0x124>)
 80018a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a8:	4a22      	ldr	r2, [pc, #136]	@ (8001934 <HAL_SPI_MspInit+0x124>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <HAL_SPI_MspInit+0x124>)
 80018b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    PA15 (JTDI)     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018da:	2306      	movs	r3, #6
 80018dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018e4:	4619      	mov	r1, r3
 80018e6:	4814      	ldr	r0, [pc, #80]	@ (8001938 <HAL_SPI_MspInit+0x128>)
 80018e8:	f003 fe86 	bl	80055f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018ec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80018f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001906:	2306      	movs	r3, #6
 8001908:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001910:	4619      	mov	r1, r3
 8001912:	480a      	ldr	r0, [pc, #40]	@ (800193c <HAL_SPI_MspInit+0x12c>)
 8001914:	f003 fe70 	bl	80055f8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	2063      	movs	r0, #99	@ 0x63
 800191e:	f002 fd37 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001922:	2063      	movs	r0, #99	@ 0x63
 8001924:	f002 fd4e 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001928:	bf00      	nop
 800192a:	37f0      	adds	r7, #240	@ 0xf0
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	46002000 	.word	0x46002000
 8001934:	46020c00 	.word	0x46020c00
 8001938:	42020000 	.word	0x42020000
 800193c:	42020800 	.word	0x42020800

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <HAL_MspInit+0x30>)
 8001948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800194c:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <HAL_MspInit+0x30>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_MspInit+0x30>)
 8001958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001964:	f004 f8f4 	bl	8005b50 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	46020c00 	.word	0x46020c00

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <NMI_Handler+0x4>

0800197c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <MemManage_Handler+0x4>

0800198c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <UsageFault_Handler+0x4>

0800199c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ca:	f000 f993 	bl	8001cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <GPDMA1_Channel0_IRQHandler+0x10>)
 80019da:	f002 ffe6 	bl	80049aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200000b4 	.word	0x200000b4

080019e8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <ADC1_IRQHandler+0x10>)
 80019ee:	f001 f927 	bl	8002c40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000028 	.word	0x20000028

080019fc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <TIM6_IRQHandler+0x10>)
 8001a02:	f006 ff27 	bl	8008854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200754e0 	.word	0x200754e0

08001a10 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <SPI3_IRQHandler+0x10>)
 8001a16:	f006 fb09 	bl	800802c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20075450 	.word	0x20075450

08001a24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a28:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <SystemInit+0x68>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2e:	4a17      	ldr	r2, [pc, #92]	@ (8001a8c <SystemInit+0x68>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <SystemInit+0x6c>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <SystemInit+0x6c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a44:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <SystemInit+0x6c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <SystemInit+0x6c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001a50:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <SystemInit+0x6c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0e      	ldr	r2, [pc, #56]	@ (8001a90 <SystemInit+0x6c>)
 8001a56:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001a5a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001a5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <SystemInit+0x6c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <SystemInit+0x6c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a09      	ldr	r2, [pc, #36]	@ (8001a90 <SystemInit+0x6c>)
 8001a6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a72:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <SystemInit+0x6c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <SystemInit+0x68>)
 8001a7a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a7e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	46020c00 	.word	0x46020c00

08001a94 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <MX_TIM6_Init+0x68>)
 8001aa6:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <MX_TIM6_Init+0x6c>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <MX_TIM6_Init+0x68>)
 8001aac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ab0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab2:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <MX_TIM6_Init+0x68>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8001ab8:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <MX_TIM6_Init+0x68>)
 8001aba:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001abe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <MX_TIM6_Init+0x68>)
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ac6:	480d      	ldr	r0, [pc, #52]	@ (8001afc <MX_TIM6_Init+0x68>)
 8001ac8:	f006 fdcc 	bl	8008664 <HAL_TIM_Base_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ad2:	f7ff fb2e 	bl	8001132 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4806      	ldr	r0, [pc, #24]	@ (8001afc <MX_TIM6_Init+0x68>)
 8001ae4:	f007 f92e 	bl	8008d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001aee:	f7ff fb20 	bl	8001132 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200754e0 	.word	0x200754e0
 8001b00:	40001000 	.word	0x40001000

08001b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_TIM_Base_MspInit+0x48>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d116      	bne.n	8001b44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <HAL_TIM_Base_MspInit+0x4c>)
 8001b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b50 <HAL_TIM_Base_MspInit+0x4c>)
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_TIM_Base_MspInit+0x4c>)
 8001b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2031      	movs	r0, #49	@ 0x31
 8001b3a:	f002 fc29 	bl	8004390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001b3e:	2031      	movs	r0, #49	@ 0x31
 8001b40:	f002 fc40 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40001000 	.word	0x40001000
 8001b50:	46020c00 	.word	0x46020c00

08001b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b8c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b58:	f7ff ff64 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b5e:	e003      	b.n	8001b68 <LoopCopyDataInit>

08001b60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b66:	3104      	adds	r1, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b68:	480a      	ldr	r0, [pc, #40]	@ (8001b94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b70:	d3f6      	bcc.n	8001b60 <CopyDataInit>
	ldr	r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b74:	e002      	b.n	8001b7c <LoopFillZerobss>

08001b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b78:	f842 3b04 	str.w	r3, [r2], #4

08001b7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <LoopForever+0x16>)
	cmp	r2, r3
 8001b7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b80:	d3f9      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b82:	f007 f9ef 	bl	8008f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b86:	f7ff fa64 	bl	8001052 <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b8c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001b90:	0800909c 	.word	0x0800909c
	ldr	r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b98:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001b9c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001ba0:	20075530 	.word	0x20075530

08001ba4 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC4_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_Init+0x50>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a11      	ldr	r2, [pc, #68]	@ (8001bf8 <HAL_Init+0x50>)
 8001bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f002 fbde 	bl	800437a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001bbe:	f005 f8a5 	bl	8006d0c <HAL_RCC_GetSysClockFreq>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <HAL_Init+0x54>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	490c      	ldr	r1, [pc, #48]	@ (8001c00 <HAL_Init+0x58>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <HAL_Init+0x5c>)
 8001bd6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001bd8:	2004      	movs	r0, #4
 8001bda:	f002 fc23 	bl	8004424 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bde:	200e      	movs	r0, #14
 8001be0:	f000 f812 	bl	8001c08 <HAL_InitTick>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e002      	b.n	8001bf4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bee:	f7ff fea7 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	46020c00 	.word	0x46020c00
 8001c00:	08008fc4 	.word	0x08008fc4
 8001c04:	20000000 	.word	0x20000000

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c14:	4b33      	ldr	r3, [pc, #204]	@ (8001ce4 <HAL_InitTick+0xdc>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e05c      	b.n	8001cda <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001c20:	4b31      	ldr	r3, [pc, #196]	@ (8001ce8 <HAL_InitTick+0xe0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d10c      	bne.n	8001c46 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <HAL_InitTick+0xe4>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce4 <HAL_InitTick+0xdc>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e037      	b.n	8001cb6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001c46:	f002 fc45 	bl	80044d4 <HAL_SYSTICK_GetCLKSourceConfig>
 8001c4a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d023      	beq.n	8001c9a <HAL_InitTick+0x92>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d82d      	bhi.n	8001cb4 <HAL_InitTick+0xac>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_InitTick+0x5e>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d00d      	beq.n	8001c80 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001c64:	e026      	b.n	8001cb4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <HAL_InitTick+0xe4>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <HAL_InitTick+0xdc>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001c74:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	60fb      	str	r3, [r7, #12]
        break;
 8001c7e:	e01a      	b.n	8001cb6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c80:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <HAL_InitTick+0xdc>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c8e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	60fb      	str	r3, [r7, #12]
        break;
 8001c98:	e00d      	b.n	8001cb6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_InitTick+0xdc>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ca8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	60fb      	str	r3, [r7, #12]
        break;
 8001cb2:	e000      	b.n	8001cb6 <HAL_InitTick+0xae>
        break;
 8001cb4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f002 fb92 	bl	80043e0 <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e009      	b.n	8001cda <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	f04f 30ff 	mov.w	r0, #4294967295
 8001cce:	f002 fb5f 	bl	8004390 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001cd2:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <HAL_InitTick+0xe8>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	e000e010 	.word	0xe000e010
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_IncTick+0x20>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_IncTick+0x24>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <HAL_IncTick+0x24>)
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000008 	.word	0x20000008
 8001d18:	2007552c 	.word	0x2007552c

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <HAL_GetTick+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2007552c 	.word	0x2007552c

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff ffee 	bl	8001d1c <HAL_GetTick>
 8001d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d005      	beq.n	8001d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_Delay+0x44>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d5a:	bf00      	nop
 8001d5c:	f7ff ffde 	bl	8001d1c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d8f7      	bhi.n	8001d5c <HAL_Delay+0x28>
  {
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000008 	.word	0x20000008

08001d7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001d80:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <HAL_GetREVID+0x18>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	b29b      	uxth	r3, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e0044000 	.word	0xe0044000

08001d98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	601a      	str	r2, [r3, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <LL_ADC_SetResolution+0x3c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d104      	bne.n	8001e20 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f023 020c 	bic.w	r2, r3, #12
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	46021000 	.word	0x46021000

08001e40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3360      	adds	r3, #96	@ 0x60
 8001e52:	461a      	mov	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	431a      	orrs	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b085      	sub	sp, #20
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3360      	adds	r3, #96	@ 0x60
 8001e90:	461a      	mov	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Note: Value shift +1 for correspondence with channel definition using ADC_CHANNEL_ID_NUMBER_MASK */
  uint32_t ch_decimal = (READ_BIT(*preg, ADC_OFR1_OFFSET1_CH) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS + 1UL));
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0edb      	lsrs	r3, r3, #27
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	60bb      	str	r3, [r7, #8]
  return (uint32_t)__LL_ADC_DECIMAL_NB_TO_CHANNEL(ch_decimal);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b09      	cmp	r3, #9
 8001eaa:	d807      	bhi.n	8001ebc <LL_ADC_GetOffsetChannel+0x3a>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	069a      	lsls	r2, r3, #26
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	e008      	b.n	8001ece <LL_ADC_GetOffsetChannel+0x4c>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	069a      	lsls	r2, r3, #26
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b087      	sub	sp, #28
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3360      	adds	r3, #96	@ 0x60
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	601a      	str	r2, [r3, #0]
}
 8001f04:	bf00      	nop
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3360      	adds	r3, #96	@ 0x60
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	601a      	str	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b087      	sub	sp, #28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3360      	adds	r3, #96	@ 0x60
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	601a      	str	r2, [r3, #0]
}
 8001f70:	bf00      	nop
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f8e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	d002      	beq.n	8001fae <LL_ADC_SetGainCompensation+0x32>
 8001fa8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_SetGainCompensation+0x34>
 8001fae:	2200      	movs	r2, #0
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2107      	movs	r1, #7
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a2b      	ldr	r2, [pc, #172]	@ (80020e4 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d020      	beq.n	800207e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3330      	adds	r3, #48	@ 0x30
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	4413      	add	r3, r2
 800204e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	211f      	movs	r1, #31
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	401a      	ands	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	0e9b      	lsrs	r3, r3, #26
 8002068:	f003 011f 	and.w	r1, r3, #31
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	431a      	orrs	r2, r3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 800207c:	e02b      	b.n	80020d6 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	210f      	movs	r1, #15
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	401a      	ands	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d104      	bne.n	80020a6 <LL_ADC_REG_SetSequencerRanks+0x7e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0e9b      	lsrs	r3, r3, #26
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	e010      	b.n	80020c8 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	613b      	str	r3, [r7, #16]
  return result;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e003      	b.n	80020c8 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	f001 011f 	and.w	r1, r1, #31
 80020ce:	408b      	lsls	r3, r1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020d6:	bf00      	nop
 80020d8:	3724      	adds	r7, #36	@ 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	46021000 	.word	0x46021000

080020e8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <LL_ADC_REG_SetSequencerChAdd+0x24>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2201      	movs	r2, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	e015      	b.n	8002138 <LL_ADC_REG_SetSequencerChAdd+0x50>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	60fb      	str	r3, [r7, #12]
  return result;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002122:	2320      	movs	r3, #32
 8002124:	e003      	b.n	800212e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2201      	movs	r2, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f003 0303 	and.w	r3, r3, #3
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b08b      	sub	sp, #44	@ 0x2c
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002284 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d042      	beq.n	800225a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d104      	bne.n	80021e8 <LL_ADC_SetChannelSamplingTime+0x28>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	e011      	b.n	800220c <LL_ADC_SetChannelSamplingTime+0x4c>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	617b      	str	r3, [r7, #20]
  return result;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e003      	b.n	800220a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	0e5b      	lsrs	r3, r3, #25
 8002210:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002214:	460b      	mov	r3, r1
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	1ad2      	subs	r2, r2, r3
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3314      	adds	r3, #20
 800222a:	461a      	mov	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	0e5b      	lsrs	r3, r3, #25
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	4413      	add	r3, r2
 8002238:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	2107      	movs	r1, #7
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	401a      	ands	r2, r3
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	431a      	orrs	r2, r3
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002258:	e00e      	b.n	8002278 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	43db      	mvns	r3, r3
 8002264:	401a      	ands	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0219      	lsls	r1, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	400b      	ands	r3, r1
 800226e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002272:	431a      	orrs	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	615a      	str	r2, [r3, #20]
}
 8002278:	bf00      	nop
 800227a:	372c      	adds	r7, #44	@ 0x2c
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	46021000 	.word	0x46021000

08002288 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80022a0:	43db      	mvns	r3, r3
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0318 	and.w	r3, r3, #24
 80022aa:	4908      	ldr	r1, [pc, #32]	@ (80022cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80022ac:	40d9      	lsrs	r1, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	400b      	ands	r3, r1
 80022b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80022b6:	431a      	orrs	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	000fffff 	.word	0x000fffff

080022d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80022e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6093      	str	r3, [r2, #8]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002308:	d101      	bne.n	800230e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800232c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002330:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002358:	d101      	bne.n	800235e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800237c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023a8:	f043 0202 	orr.w	r2, r3, #2
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <LL_ADC_IsEnabled+0x18>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <LL_ADC_IsEnabled+0x1a>
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d101      	bne.n	80023fa <LL_ADC_IsDisableOngoing+0x18>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <LL_ADC_IsDisableOngoing+0x1a>
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002418:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800241c:	f043 0204 	orr.w	r2, r3, #4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	609a      	str	r2, [r3, #8]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002440:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002444:	f043 0210 	orr.w	r2, r3, #16
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d101      	bne.n	8002470 <LL_ADC_REG_IsConversionOngoing+0x18>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800248e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002492:	f043 0220 	orr.w	r2, r3, #32
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	609a      	str	r2, [r3, #8]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d101      	bne.n	80024be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e2b3      	b.n	8002a54 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a8b      	ldr	r2, [pc, #556]	@ (8002728 <HAL_ADC_Init+0x25c>)
 80024fa:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe fb97 	bl	8000c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fee9 	bl	80022f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fecf 	bl	80022d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff04 	bl	8002344 <LL_ADC_IsInternalRegulatorEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d115      	bne.n	800256e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fee8 	bl	800231c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800254c:	4b77      	ldr	r3, [pc, #476]	@ (800272c <HAL_ADC_Init+0x260>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	4a77      	ldr	r2, [pc, #476]	@ (8002730 <HAL_ADC_Init+0x264>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	3301      	adds	r3, #1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002560:	e002      	b.n	8002568 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3b01      	subs	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f9      	bne.n	8002562 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fee6 	bl	8002344 <LL_ADC_IsInternalRegulatorEnabled>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10e      	bne.n	800259c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002582:	f043 0210 	orr.w	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff59 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 80025a6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f040 8244 	bne.w	8002a3e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 8240 	bne.w	8002a3e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025c2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025c6:	f043 0202 	orr.w	r2, r3, #2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fef2 	bl	80023bc <LL_ADC_IsEnabled>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d140      	bne.n	8002660 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a51      	ldr	r2, [pc, #324]	@ (8002728 <HAL_ADC_Init+0x25c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d028      	beq.n	800263a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a51      	ldr	r2, [pc, #324]	@ (8002734 <HAL_ADC_Init+0x268>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d109      	bne.n	8002606 <HAL_ADC_Init+0x13a>
 80025f2:	4850      	ldr	r0, [pc, #320]	@ (8002734 <HAL_ADC_Init+0x268>)
 80025f4:	f7ff fee2 	bl	80023bc <LL_ADC_IsEnabled>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	e008      	b.n	8002618 <HAL_ADC_Init+0x14c>
 8002606:	4848      	ldr	r0, [pc, #288]	@ (8002728 <HAL_ADC_Init+0x25c>)
 8002608:	f7ff fed8 	bl	80023bc <LL_ADC_IsEnabled>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d021      	beq.n	8002660 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a44      	ldr	r2, [pc, #272]	@ (8002734 <HAL_ADC_Init+0x268>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_ADC_Init+0x15e>
 8002626:	4a44      	ldr	r2, [pc, #272]	@ (8002738 <HAL_ADC_Init+0x26c>)
 8002628:	e000      	b.n	800262c <HAL_ADC_Init+0x160>
 800262a:	4a44      	ldr	r2, [pc, #272]	@ (800273c <HAL_ADC_Init+0x270>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f7ff fbb0 	bl	8001d98 <LL_ADC_SetCommonClock>
 8002638:	e012      	b.n	8002660 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f7ff fbdb 	bl	8001e00 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800264a:	4b3c      	ldr	r3, [pc, #240]	@ (800273c <HAL_ADC_Init+0x270>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800265a:	4938      	ldr	r1, [pc, #224]	@ (800273c <HAL_ADC_Init+0x270>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a30      	ldr	r2, [pc, #192]	@ (8002728 <HAL_ADC_Init+0x25c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d010      	beq.n	800268c <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002670:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002676:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800267c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002684:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002686:	4313      	orrs	r3, r2
 8002688:	623b      	str	r3, [r7, #32]
 800268a:	e030      	b.n	80026ee <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7f1b      	ldrb	r3, [r3, #28]
 8002690:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002698:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800269a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	d002      	beq.n	80026aa <HAL_ADC_Init+0x1de>
 80026a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026a8:	e000      	b.n	80026ac <HAL_ADC_Init+0x1e0>
 80026aa:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80026ac:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80026b2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	da04      	bge.n	80026c6 <HAL_ADC_Init+0x1fa>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026c4:	e001      	b.n	80026ca <HAL_ADC_Init+0x1fe>
 80026c6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80026ca:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4918      	ldr	r1, [pc, #96]	@ (8002734 <HAL_ADC_Init+0x268>)
 80026d2:	428b      	cmp	r3, r1
 80026d4:	d103      	bne.n	80026de <HAL_ADC_Init+0x212>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026dc:	e003      	b.n	80026e6 <HAL_ADC_Init+0x21a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026e4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80026e6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026e8:	6a3a      	ldr	r2, [r7, #32]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d12f      	bne.n	8002758 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <HAL_ADC_Init+0x25c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d007      	beq.n	8002712 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	3b01      	subs	r3, #1
 8002708:	045b      	lsls	r3, r3, #17
 800270a:	6a3a      	ldr	r2, [r7, #32]
 800270c:	4313      	orrs	r3, r2
 800270e:	623b      	str	r3, [r7, #32]
 8002710:	e022      	b.n	8002758 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002718:	2b00      	cmp	r3, #0
 800271a:	d111      	bne.n	8002740 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002722:	623b      	str	r3, [r7, #32]
 8002724:	e018      	b.n	8002758 <HAL_ADC_Init+0x28c>
 8002726:	bf00      	nop
 8002728:	46021000 	.word	0x46021000
 800272c:	20000000 	.word	0x20000000
 8002730:	053e2d63 	.word	0x053e2d63
 8002734:	42028000 	.word	0x42028000
 8002738:	42028308 	.word	0x42028308
 800273c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a92      	ldr	r2, [pc, #584]	@ (80029a8 <HAL_ADC_Init+0x4dc>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d018      	beq.n	8002794 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002776:	4313      	orrs	r3, r2
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	4313      	orrs	r3, r2
 800277c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	4b89      	ldr	r3, [pc, #548]	@ (80029ac <HAL_ADC_Init+0x4e0>)
 8002786:	4013      	ands	r3, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	6a39      	ldr	r1, [r7, #32]
 800278e:	430b      	orrs	r3, r1
 8002790:	60d3      	str	r3, [r2, #12]
 8002792:	e031      	b.n	80027f8 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002798:	2b00      	cmp	r3, #0
 800279a:	d009      	beq.n	80027b0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a8:	4313      	orrs	r3, r2
 80027aa:	6a3a      	ldr	r2, [r7, #32]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	4b7e      	ldr	r3, [pc, #504]	@ (80029b0 <HAL_ADC_Init+0x4e4>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	6a39      	ldr	r1, [r7, #32]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1a      	ldr	r2, [r3, #32]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6a      	ldr	r2, [pc, #424]	@ (80029a8 <HAL_ADC_Init+0x4dc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	f000 8093 	beq.w	800292a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fe25 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 800280e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fe46 	bl	80024a6 <LL_ADC_INJ_IsConversionOngoing>
 800281a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d161      	bne.n	80028e6 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d15e      	bne.n	80028e6 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	7f1b      	ldrb	r3, [r3, #28]
 800282c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4960      	ldr	r1, [pc, #384]	@ (80029b4 <HAL_ADC_Init+0x4e8>)
 8002834:	428b      	cmp	r3, r1
 8002836:	d102      	bne.n	800283e <HAL_ADC_Init+0x372>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283c:	e002      	b.n	8002844 <HAL_ADC_Init+0x378>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002842:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002844:	4313      	orrs	r3, r2
 8002846:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	6a39      	ldr	r1, [r7, #32]
 800285c:	430b      	orrs	r3, r1
 800285e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f7ff fb82 	bl	8001f7c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800287e:	2b01      	cmp	r3, #1
 8002880:	d11e      	bne.n	80028c0 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002886:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	4b4a      	ldr	r3, [pc, #296]	@ (80029b8 <HAL_ADC_Init+0x4ec>)
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002896:	0411      	lsls	r1, r2, #16
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800289c:	4311      	orrs	r1, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80028a2:	4311      	orrs	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028ae:	0892      	lsrs	r2, r2, #2
 80028b0:	430a      	orrs	r2, r1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	611a      	str	r2, [r3, #16]
 80028be:	e007      	b.n	80028d0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d10c      	bne.n	8002908 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	f023 010f 	bic.w	r1, r3, #15
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	631a      	str	r2, [r3, #48]	@ 0x30
 8002906:	e007      	b.n	8002918 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 020f 	bic.w	r2, r2, #15
 8002916:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800291c:	f023 0303 	bic.w	r3, r3, #3
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002928:	e092      	b.n	8002a50 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002930:	2b01      	cmp	r3, #1
 8002932:	d111      	bne.n	8002958 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800293c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002942:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002948:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	4313      	orrs	r3, r2
 800294e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	4b17      	ldr	r3, [pc, #92]	@ (80029bc <HAL_ADC_Init+0x4f0>)
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	69f9      	ldr	r1, [r7, #28]
 8002968:	430b      	orrs	r3, r1
 800296a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002974:	461a      	mov	r2, r3
 8002976:	2100      	movs	r1, #0
 8002978:	f7ff fb23 	bl	8001fc2 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002984:	461a      	mov	r2, r3
 8002986:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800298a:	f7ff fb1a 	bl	8001fc2 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d114      	bne.n	80029c0 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f062 020f 	orn	r2, r2, #15
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80029a6:	e024      	b.n	80029f2 <HAL_ADC_Init+0x526>
 80029a8:	46021000 	.word	0x46021000
 80029ac:	fff0c013 	.word	0xfff0c013
 80029b0:	ffde800d 	.word	0xffde800d
 80029b4:	42028000 	.word	0x42028000
 80029b8:	fc00f81e 	.word	0xfc00f81e
 80029bc:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029c8:	d113      	bne.n	80029f2 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	f003 031c 	and.w	r3, r3, #28
 80029dc:	f06f 020f 	mvn.w	r2, #15
 80029e0:	fa02 f103 	lsl.w	r1, r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <HAL_ADC_Init+0x590>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	6a3a      	ldr	r2, [r7, #32]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d10b      	bne.n	8002a1a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a0c:	f023 0303 	bic.w	r3, r3, #3
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a18:	e01a      	b.n	8002a50 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a1e:	f023 0312 	bic.w	r3, r3, #18
 8002a22:	f043 0210 	orr.w	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a3c:	e008      	b.n	8002a50 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a42:	f043 0210 	orr.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3728      	adds	r7, #40	@ 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	833ffff3 	.word	0x833ffff3

08002a60 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fcf3 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 80a0 	bne.w	8002bba <HAL_ADC_Start_IT+0x15a>
  {
    __HAL_LOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_Start_IT+0x28>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e09b      	b.n	8002bc0 <HAL_ADC_Start_IT+0x160>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    tmp_hal_status = ADC_Enable(hadc);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f001 facd 	bl	8004030 <ADC_Enable>
 8002a96:	4603      	mov	r3, r0
 8002a98:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f040 8087 	bne.w	8002bb0 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aa6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	679a      	str	r2, [r3, #120]	@ 0x78
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ac6:	f023 0206 	bic.w	r2, r3, #6
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ace:	e002      	b.n	8002ad6 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	67da      	str	r2, [r3, #124]	@ 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	221c      	movs	r2, #28
 8002adc:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 021c 	bic.w	r2, r2, #28
 8002af4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d108      	bne.n	8002b10 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0208 	orr.w	r2, r2, #8
 8002b0c:	605a      	str	r2, [r3, #4]
          break;
 8002b0e:	e008      	b.n	8002b22 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0204 	orr.w	r2, r2, #4
 8002b1e:	605a      	str	r2, [r3, #4]
          break;
 8002b20:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d107      	bne.n	8002b3a <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0210 	orr.w	r2, r2, #16
 8002b38:	605a      	str	r2, [r3, #4]
              break;
          }
        }
      }
#else
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d02d      	beq.n	8002ba4 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b4c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b50:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d110      	bne.n	8002b82 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0220 	bic.w	r2, r2, #32
 8002b6e:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b7e:	605a      	str	r2, [r3, #4]
            break;
 8002b80:	e010      	b.n	8002ba4 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b90:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	605a      	str	r2, [r3, #4]
            break;
 8002ba2:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fc2d 	bl	8002408 <LL_ADC_REG_StartConversion>
 8002bae:	e006      	b.n	8002bbe <HAL_ADC_Start_IT+0x15e>

#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8002bb8:	e001      	b.n	8002bbe <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_Stop_IT+0x16>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e02b      	b.n	8002c36 <HAL_ADC_Stop_IT+0x6e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002be6:	2103      	movs	r1, #3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f001 f965 	bl	8003eb8 <ADC_ConversionStop>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d119      	bne.n	8002c2c <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 021c 	bic.w	r2, r2, #28
 8002c06:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f001 fa81 	bl	8004110 <ADC_Disable>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	f043 0201 	orr.w	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	679a      	str	r2, [r3, #120]	@ 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d017      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x56>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d012      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c80:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f001 fabe 	bl	800420a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2202      	movs	r2, #2
 8002c94:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <HAL_ADC_IRQHandler+0x6a>
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0x82>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a4 	beq.w	8002dfe <HAL_ADC_IRQHandler+0x1be>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 809e 	beq.w	8002dfe <HAL_ADC_IRQHandler+0x1be>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d105      	bne.n	8002cda <HAL_ADC_IRQHandler+0x9a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3d      	ldr	r2, [pc, #244]	@ (8002dd4 <HAL_ADC_IRQHandler+0x194>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d047      	beq.n	8002d74 <HAL_ADC_IRQHandler+0x134>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff f989 	bl	8002000 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d07d      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x1b0>
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
        }
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d174      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x1b0>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d16d      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x1b0>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fb9d 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d11a      	bne.n	8002d5a <HAL_ADC_IRQHandler+0x11a>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 020c 	bic.w	r2, r2, #12
 8002d32:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d151      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x1b0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	679a      	str	r2, [r3, #120]	@ 0x78
 8002d58:	e04a      	b.n	8002df0 <HAL_ADC_IRQHandler+0x1b0>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d5e:	f043 0210 	orr.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002d72:	e03d      	b.n	8002df0 <HAL_ADC_IRQHandler+0x1b0>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff f941 	bl	8002000 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d035      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x1b0>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d130      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x1b0>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d129      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x1b0>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fb59 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d115      	bne.n	8002dd8 <HAL_ADC_IRQHandler+0x198>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 020c 	bic.w	r2, r2, #12
 8002dba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	679a      	str	r2, [r3, #120]	@ 0x78
 8002dd0:	e00e      	b.n	8002df0 <HAL_ADC_IRQHandler+0x1b0>
 8002dd2:	bf00      	nop
 8002dd4:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fe fb00 	bl	80013f6 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6d      	ldr	r2, [pc, #436]	@ (8002fb8 <HAL_ADC_IRQHandler+0x378>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d06f      	beq.n	8002ee8 <HAL_ADC_IRQHandler+0x2a8>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_ADC_IRQHandler+0x1dc>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_ADC_IRQHandler+0x1f0>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d060      	beq.n	8002ee8 <HAL_ADC_IRQHandler+0x2a8>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d05b      	beq.n	8002ee8 <HAL_ADC_IRQHandler+0x2a8>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_ADC_IRQHandler+0x208>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e40:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff f9a4 	bl	800219a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e52:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f8d1 	bl	8002000 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e5e:	60b8      	str	r0, [r7, #8]
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	613b      	str	r3, [r7, #16]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d035      	beq.n	8002eda <HAL_ADC_IRQHandler+0x29a>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x248>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d02d      	beq.n	8002eda <HAL_ADC_IRQHandler+0x29a>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d128      	bne.n	8002eda <HAL_ADC_IRQHandler+0x29a>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e92:	2b40      	cmp	r3, #64	@ 0x40
 8002e94:	d121      	bne.n	8002eda <HAL_ADC_IRQHandler+0x29a>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fb03 	bl	80024a6 <LL_ADC_INJ_IsConversionOngoing>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d119      	bne.n	8002eda <HAL_ADC_IRQHandler+0x29a>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002eb4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d105      	bne.n	8002eda <HAL_ADC_IRQHandler+0x29a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f001 f977 	bl	80041ce <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2260      	movs	r2, #96	@ 0x60
 8002ee6:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <HAL_ADC_IRQHandler+0x2d6>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00c      	beq.n	8002f16 <HAL_ADC_IRQHandler+0x2d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f8cb 	bl	80030a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2280      	movs	r2, #128	@ 0x80
 8002f14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d012      	beq.n	8002f46 <HAL_ADC_IRQHandler+0x306>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <HAL_ADC_IRQHandler+0x306>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f001 f953 	bl	80041e2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d012      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x336>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x336>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f5e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f001 f945 	bl	80041f6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d03d      	beq.n	8002ffc <HAL_ADC_IRQHandler+0x3bc>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d038      	beq.n	8002ffc <HAL_ADC_IRQHandler+0x3bc>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <HAL_ADC_IRQHandler+0x358>
    {
      overrun_error = 1UL;
 8002f92:	2301      	movs	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e01b      	b.n	8002fd0 <HAL_ADC_IRQHandler+0x390>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a06      	ldr	r2, [pc, #24]	@ (8002fb8 <HAL_ADC_IRQHandler+0x378>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00c      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x37c>
            overrun_error = 1UL;
          }
        }
#else
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00f      	beq.n	8002fd0 <HAL_ADC_IRQHandler+0x390>
        {
          overrun_error = 1UL;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	e00c      	b.n	8002fd0 <HAL_ADC_IRQHandler+0x390>
 8002fb6:	bf00      	nop
 8002fb8:	46021000 	.word	0x46021000
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff f8dc 	bl	800217e <LL_ADC_REG_GetDMATransfer>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_ADC_IRQHandler+0x390>
        {
          overrun_error = 1UL;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_ADC_IRQHandler+0x3b4>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fda:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe6:	f043 0202 	orr.w	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f862 	bl	80030b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01b      	beq.n	800303e <HAL_ADC_IRQHandler+0x3fe>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d016      	beq.n	800303e <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <HAL_ADC_IRQHandler+0x3e8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003020:	f043 0201 	orr.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f863 	bl	80030f4 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a17      	ldr	r2, [pc, #92]	@ (80030a0 <HAL_ADC_IRQHandler+0x460>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d126      	bne.n	8003096 <HAL_ADC_IRQHandler+0x456>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_ADC_IRQHandler+0x42c>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_ADC_IRQHandler+0x42c>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f835 	bl	80030cc <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800306a:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00f      	beq.n	8003096 <HAL_ADC_IRQHandler+0x456>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_ADC_IRQHandler+0x456>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f82d 	bl	80030e0 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003094:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003096:	bf00      	nop
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	46021000 	.word	0x46021000

080030a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b0bc      	sub	sp, #240	@ 0xf0
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4aa8      	ldr	r2, [pc, #672]	@ (80033c4 <HAL_ADC_ConfigChannel+0x2bc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d103      	bne.n	800312e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_ADC_ConfigChannel+0x36>
 8003138:	2302      	movs	r3, #2
 800313a:	f000 beb5 	b.w	8003ea8 <HAL_ADC_ConfigChannel+0xda0>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f984 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 8695 	bne.w	8003e82 <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a99      	ldr	r2, [pc, #612]	@ (80033c4 <HAL_ADC_ConfigChannel+0x2bc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	f000 83ea 	beq.w	8003938 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d108      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x7a>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	2201      	movs	r2, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	e01d      	b.n	80031be <HAL_ADC_ConfigChannel+0xb6>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 8003196:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800319a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 800319e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80031a6:	2320      	movs	r3, #32
 80031a8:	e004      	b.n	80031b4 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80031aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2201      	movs	r2, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	69d1      	ldr	r1, [r2, #28]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	430b      	orrs	r3, r1
 80031ca:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	f7fe ff25 	bl	8002028 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f938 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 80031e8:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f958 	bl	80024a6 <LL_ADC_INJ_IsConversionOngoing>
 80031f6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 81ed 	bne.w	80035de <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003208:	2b00      	cmp	r3, #0
 800320a:	f040 81e8 	bne.w	80035de <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	461a      	mov	r2, r3
 800321c:	f7fe ffd0 	bl	80021c0 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d046      	beq.n	80032d0 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6919      	ldr	r1, [r3, #16]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003252:	f7fe fdf5 	bl	8001e40 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6919      	ldr	r1, [r3, #16]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	461a      	mov	r2, r3
 8003264:	f7fe fe39 	bl	8001eda <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	7e9b      	ldrb	r3, [r3, #26]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d11e      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x17e>
 8003280:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003284:	e000      	b.n	8003288 <HAL_ADC_ConfigChannel+0x180>
 8003286:	2300      	movs	r3, #0
 8003288:	461a      	mov	r2, r3
 800328a:	f7fe fe5c 	bl	8001f46 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800329a:	2b01      	cmp	r3, #1
 800329c:	d102      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x19c>
 800329e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80032a2:	e000      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x19e>
 80032a4:	2300      	movs	r3, #0
 80032a6:	461a      	mov	r2, r3
 80032a8:	f7fe fe32 	bl	8001f10 <LL_ADC_SetOffsetSignedSaturation>
 80032ac:	e197      	b.n	80035de <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2200      	movs	r2, #0
 80032b8:	4619      	mov	r1, r3
 80032ba:	f7fe fe44 	bl	8001f46 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2200      	movs	r2, #0
 80032c8:	4619      	mov	r1, r3
 80032ca:	f7fe fe21 	bl	8001f10 <LL_ADC_SetOffsetSignedSaturation>
 80032ce:	e186      	b.n	80035de <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fdd3 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 80032dc:	4603      	mov	r3, r0
 80032de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1f4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fdc8 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	f003 021f 	and.w	r2, r3, #31
 80032fa:	e01e      	b.n	800333a <HAL_ADC_ConfigChannel+0x232>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fdbd 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 8003308:	4603      	mov	r3, r0
 800330a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 800331a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800331e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8003322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800332a:	2320      	movs	r3, #32
 800332c:	e004      	b.n	8003338 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800332e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x24a>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	e018      	b.n	8003384 <HAL_ADC_ConfigChannel+0x27c>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800336a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800336e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003376:	2320      	movs	r3, #32
 8003378:	e004      	b.n	8003384 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800337a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003384:	429a      	cmp	r2, r3
 8003386:	d107      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	2300      	movs	r3, #0
 8003392:	2100      	movs	r1, #0
 8003394:	f7fe fd54 	bl	8001e40 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2101      	movs	r1, #1
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fd6f 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x2c0>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2101      	movs	r1, #1
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe fd64 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 80033ba:	4603      	mov	r3, r0
 80033bc:	0e9b      	lsrs	r3, r3, #26
 80033be:	f003 021f 	and.w	r2, r3, #31
 80033c2:	e020      	b.n	8003406 <HAL_ADC_ConfigChannel+0x2fe>
 80033c4:	46021000 	.word	0x46021000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fd57 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80033e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80033ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80033f6:	2320      	movs	r3, #32
 80033f8:	e004      	b.n	8003404 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80033fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_ADC_ConfigChannel+0x316>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	0e9b      	lsrs	r3, r3, #26
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	e018      	b.n	8003450 <HAL_ADC_ConfigChannel+0x348>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003432:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800343a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e004      	b.n	8003450 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8003446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003450:	429a      	cmp	r2, r3
 8003452:	d107      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	2300      	movs	r3, #0
 800345e:	2101      	movs	r1, #1
 8003460:	f7fe fcee 	bl	8001e40 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fd09 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 8003470:	4603      	mov	r3, r0
 8003472:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x388>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2102      	movs	r1, #2
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe fcfe 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 8003486:	4603      	mov	r3, r0
 8003488:	0e9b      	lsrs	r3, r3, #26
 800348a:	f003 021f 	and.w	r2, r3, #31
 800348e:	e01e      	b.n	80034ce <HAL_ADC_ConfigChannel+0x3c6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2102      	movs	r1, #2
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fcf3 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 800349c:	4603      	mov	r3, r0
 800349e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80034ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80034b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e004      	b.n	80034cc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80034c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d105      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x3de>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	e018      	b.n	8003518 <HAL_ADC_ConfigChannel+0x410>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80034fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 800350a:	2320      	movs	r3, #32
 800350c:	e004      	b.n	8003518 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 800350e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003518:	429a      	cmp	r2, r3
 800351a:	d107      	bne.n	800352c <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2300      	movs	r3, #0
 8003526:	2102      	movs	r1, #2
 8003528:	f7fe fc8a 	bl	8001e40 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2103      	movs	r1, #3
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe fca5 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 8003538:	4603      	mov	r3, r0
 800353a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x450>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2103      	movs	r1, #3
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fc9a 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 800354e:	4603      	mov	r3, r0
 8003550:	0e9b      	lsrs	r3, r3, #26
 8003552:	f003 021f 	and.w	r2, r3, #31
 8003556:	e01a      	b.n	800358e <HAL_ADC_ConfigChannel+0x486>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2103      	movs	r1, #3
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe fc8f 	bl	8001e82 <LL_ADC_GetOffsetChannel>
 8003564:	4603      	mov	r3, r0
 8003566:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003572:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003576:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 800357e:	2320      	movs	r3, #32
 8003580:	e004      	b.n	800358c <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8003582:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x49e>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0e9b      	lsrs	r3, r3, #26
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	e011      	b.n	80035ca <HAL_ADC_ConfigChannel+0x4c2>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80035b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80035b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 80035be:	2320      	movs	r3, #32
 80035c0:	e003      	b.n	80035ca <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 80035c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d107      	bne.n	80035de <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	2103      	movs	r1, #3
 80035da:	f7fe fc31 	bl	8001e40 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe feea 	bl	80023bc <LL_ADC_IsEnabled>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 8456 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	461a      	mov	r2, r3
 80035fe:	f7fe fe43 	bl	8002288 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800360a:	f040 80d6 	bne.w	80037ba <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x52a>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	0e9b      	lsrs	r3, r3, #26
 8003620:	3301      	adds	r3, #1
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2b09      	cmp	r3, #9
 8003628:	bf94      	ite	ls
 800362a:	2301      	movls	r3, #1
 800362c:	2300      	movhi	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	e019      	b.n	8003666 <HAL_ADC_ConfigChannel+0x55e>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003640:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003642:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 800364a:	2320      	movs	r3, #32
 800364c:	e003      	b.n	8003656 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 800364e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2b09      	cmp	r3, #9
 800365e:	bf94      	ite	ls
 8003660:	2301      	movls	r3, #1
 8003662:	2300      	movhi	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d04d      	beq.n	8003706 <HAL_ADC_ConfigChannel+0x5fe>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x57e>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	0e9b      	lsrs	r3, r3, #26
 800367c:	3301      	adds	r3, #1
 800367e:	069b      	lsls	r3, r3, #26
 8003680:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003684:	e015      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x5aa>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003696:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 800369e:	2320      	movs	r3, #32
 80036a0:	e003      	b.n	80036aa <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 80036a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a4:	fab3 f383 	clz	r3, r3
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	3301      	adds	r3, #1
 80036ac:	069b      	lsls	r3, r3, #26
 80036ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x5ca>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	0e9b      	lsrs	r3, r3, #26
 80036c4:	3301      	adds	r3, #1
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	2101      	movs	r1, #1
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	e017      	b.n	8003702 <HAL_ADC_ConfigChannel+0x5fa>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80036e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80036e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 80036ea:	2320      	movs	r3, #32
 80036ec:	e003      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 80036ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	4313      	orrs	r3, r2
 8003704:	e04e      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x69c>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d107      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x61a>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	0e9b      	lsrs	r3, r3, #26
 8003718:	3301      	adds	r3, #1
 800371a:	069b      	lsls	r3, r3, #26
 800371c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003720:	e015      	b.n	800374e <HAL_ADC_ConfigChannel+0x646>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003732:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 800373a:	2320      	movs	r3, #32
 800373c:	e003      	b.n	8003746 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 800373e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	3301      	adds	r3, #1
 8003748:	069b      	lsls	r3, r3, #26
 800374a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_ADC_ConfigChannel+0x666>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	0e9b      	lsrs	r3, r3, #26
 8003760:	3301      	adds	r3, #1
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2101      	movs	r1, #1
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	e017      	b.n	800379e <HAL_ADC_ConfigChannel+0x696>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8003786:	2320      	movs	r3, #32
 8003788:	e003      	b.n	8003792 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 800378a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378c:	fab3 f383 	clz	r3, r3
 8003790:	b2db      	uxtb	r3, r3
 8003792:	3301      	adds	r3, #1
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	4313      	orrs	r3, r2
 80037a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	461a      	mov	r2, r3
 80037b2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80037b6:	f7fe fd03 	bl	80021c0 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f280 836c 	bge.w	8003e9c <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a97      	ldr	r2, [pc, #604]	@ (8003a28 <HAL_ADC_ConfigChannel+0x920>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x6ca>
 80037ce:	4b97      	ldr	r3, [pc, #604]	@ (8003a2c <HAL_ADC_ConfigChannel+0x924>)
 80037d0:	e000      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x6cc>
 80037d2:	4b97      	ldr	r3, [pc, #604]	@ (8003a30 <HAL_ADC_ConfigChannel+0x928>)
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fb05 	bl	8001de4 <LL_ADC_GetCommonPathInternalCh>
 80037da:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a91      	ldr	r2, [pc, #580]	@ (8003a28 <HAL_ADC_ConfigChannel+0x920>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d109      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x6f4>
 80037e8:	488f      	ldr	r0, [pc, #572]	@ (8003a28 <HAL_ADC_ConfigChannel+0x920>)
 80037ea:	f7fe fde7 	bl	80023bc <LL_ADC_IsEnabled>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e008      	b.n	800380e <HAL_ADC_ConfigChannel+0x706>
 80037fc:	488d      	ldr	r0, [pc, #564]	@ (8003a34 <HAL_ADC_ConfigChannel+0x92c>)
 80037fe:	f7fe fddd 	bl	80023bc <LL_ADC_IsEnabled>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8088 	beq.w	8003924 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a87      	ldr	r2, [pc, #540]	@ (8003a38 <HAL_ADC_ConfigChannel+0x930>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d132      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003822:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d12c      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a28 <HAL_ADC_ConfigChannel+0x920>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d005      	beq.n	8003840 <HAL_ADC_ConfigChannel+0x738>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7e      	ldr	r2, [pc, #504]	@ (8003a34 <HAL_ADC_ConfigChannel+0x92c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	f040 832b 	bne.w	8003e96 <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a78      	ldr	r2, [pc, #480]	@ (8003a28 <HAL_ADC_ConfigChannel+0x920>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x746>
 800384a:	4a78      	ldr	r2, [pc, #480]	@ (8003a2c <HAL_ADC_ConfigChannel+0x924>)
 800384c:	e000      	b.n	8003850 <HAL_ADC_ConfigChannel+0x748>
 800384e:	4a78      	ldr	r2, [pc, #480]	@ (8003a30 <HAL_ADC_ConfigChannel+0x928>)
 8003850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003854:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7fe faaf 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003860:	4b76      	ldr	r3, [pc, #472]	@ (8003a3c <HAL_ADC_ConfigChannel+0x934>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	4a76      	ldr	r2, [pc, #472]	@ (8003a40 <HAL_ADC_ConfigChannel+0x938>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	099b      	lsrs	r3, r3, #6
 800386e:	3301      	adds	r3, #1
 8003870:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003872:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003874:	e002      	b.n	800387c <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	3b01      	subs	r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f9      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003882:	e308      	b.n	8003e96 <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	@ (8003a44 <HAL_ADC_ConfigChannel+0x93c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d121      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003892:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003896:	2b00      	cmp	r3, #0
 8003898:	d11b      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a62      	ldr	r2, [pc, #392]	@ (8003a28 <HAL_ADC_ConfigChannel+0x920>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d005      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0x7a8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a62      	ldr	r2, [pc, #392]	@ (8003a34 <HAL_ADC_ConfigChannel+0x92c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	f040 82f5 	bne.w	8003e9a <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a5c      	ldr	r2, [pc, #368]	@ (8003a28 <HAL_ADC_ConfigChannel+0x920>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_ADC_ConfigChannel+0x7b6>
 80038ba:	4a5c      	ldr	r2, [pc, #368]	@ (8003a2c <HAL_ADC_ConfigChannel+0x924>)
 80038bc:	e000      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x7b8>
 80038be:	4a5c      	ldr	r2, [pc, #368]	@ (8003a30 <HAL_ADC_ConfigChannel+0x928>)
 80038c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7fe fa77 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038d0:	e2e3      	b.n	8003e9a <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003a48 <HAL_ADC_ConfigChannel+0x940>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	f040 82df 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f040 82d8 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003a28 <HAL_ADC_ConfigChannel+0x920>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d005      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x7fa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a4e      	ldr	r2, [pc, #312]	@ (8003a34 <HAL_ADC_ConfigChannel+0x92c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	f040 82cd 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a48      	ldr	r2, [pc, #288]	@ (8003a28 <HAL_ADC_ConfigChannel+0x920>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x808>
 800390c:	4a47      	ldr	r2, [pc, #284]	@ (8003a2c <HAL_ADC_ConfigChannel+0x924>)
 800390e:	e000      	b.n	8003912 <HAL_ADC_ConfigChannel+0x80a>
 8003910:	4a47      	ldr	r2, [pc, #284]	@ (8003a30 <HAL_ADC_ConfigChannel+0x928>)
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003916:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f7fe fa4e 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
 8003922:	e2bb      	b.n	8003e9c <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8003936:	e2b1      	b.n	8003e9c <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 8003940:	f7fe fa1c 	bl	8001d7c <HAL_GetREVID>
 8003944:	4603      	mov	r3, r0
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394a:	d130      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3e      	ldr	r2, [pc, #248]	@ (8003a4c <HAL_ADC_ConfigChannel+0x944>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d103      	bne.n	800395e <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003956:	4b3e      	ldr	r3, [pc, #248]	@ (8003a50 <HAL_ADC_ConfigChannel+0x948>)
 8003958:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800395c:	e027      	b.n	80039ae <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3c      	ldr	r2, [pc, #240]	@ (8003a54 <HAL_ADC_ConfigChannel+0x94c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d103      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003968:	4b3b      	ldr	r3, [pc, #236]	@ (8003a58 <HAL_ADC_ConfigChannel+0x950>)
 800396a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800396e:	e01e      	b.n	80039ae <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a39      	ldr	r2, [pc, #228]	@ (8003a5c <HAL_ADC_ConfigChannel+0x954>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d103      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 800397a:	4b39      	ldr	r3, [pc, #228]	@ (8003a60 <HAL_ADC_ConfigChannel+0x958>)
 800397c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003980:	e015      	b.n	80039ae <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a37      	ldr	r2, [pc, #220]	@ (8003a64 <HAL_ADC_ConfigChannel+0x95c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 800398c:	4b36      	ldr	r3, [pc, #216]	@ (8003a68 <HAL_ADC_ConfigChannel+0x960>)
 800398e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003992:	e00c      	b.n	80039ae <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a34      	ldr	r2, [pc, #208]	@ (8003a6c <HAL_ADC_ConfigChannel+0x964>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d103      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 800399e:	4b31      	ldr	r3, [pc, #196]	@ (8003a64 <HAL_ADC_ConfigChannel+0x95c>)
 80039a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039a4:	e003      	b.n	80039ae <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	f000 81a2 	beq.w	8003cfc <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039c0:	d004      	beq.n	80039cc <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80039c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a70 <HAL_ADC_ConfigChannel+0x968>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d107      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe fb87 	bl	80020e8 <LL_ADC_REG_SetSequencerChAdd>
 80039da:	e0c1      	b.n	8003b60 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	210f      	movs	r1, #15
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80039f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d105      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x904>
 8003a00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a04:	0e9b      	lsrs	r3, r3, #26
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	e037      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x974>
 8003a0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d127      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 8003a24:	2320      	movs	r3, #32
 8003a26:	e029      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x974>
 8003a28:	42028000 	.word	0x42028000
 8003a2c:	42028308 	.word	0x42028308
 8003a30:	46021308 	.word	0x46021308
 8003a34:	46021000 	.word	0x46021000
 8003a38:	ce080000 	.word	0xce080000
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	053e2d63 	.word	0x053e2d63
 8003a44:	ca040000 	.word	0xca040000
 8003a48:	80000001 	.word	0x80000001
 8003a4c:	b6002000 	.word	0xb6002000
 8003a50:	da400000 	.word	0xda400000
 8003a54:	ba004000 	.word	0xba004000
 8003a58:	de800000 	.word	0xde800000
 8003a5c:	b2001000 	.word	0xb2001000
 8003a60:	81000001 	.word	0x81000001
 8003a64:	d6200000 	.word	0xd6200000
 8003a68:	d2100000 	.word	0xd2100000
 8003a6c:	d7200000 	.word	0xd7200000
 8003a70:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	6839      	ldr	r1, [r7, #0]
 8003a7e:	6849      	ldr	r1, [r1, #4]
 8003a80:	f001 011f 	and.w	r1, r1, #31
 8003a84:	408b      	lsls	r3, r1
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	089b      	lsrs	r3, r3, #2
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d860      	bhi.n	8003b60 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003a9e:	f7fe f96d 	bl	8001d7c <HAL_GetREVID>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa8:	d851      	bhi.n	8003b4e <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8003aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003aae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x9c4>
 8003ab6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003aba:	0e9b      	lsrs	r3, r3, #26
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2b13      	cmp	r3, #19
 8003ac2:	bf8c      	ite	hi
 8003ac4:	2301      	movhi	r3, #1
 8003ac6:	2300      	movls	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e016      	b.n	8003afa <HAL_ADC_ConfigChannel+0x9f2>
 8003acc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003ad0:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa93 f3a3 	rbit	r3, r3
 8003ad8:	61bb      	str	r3, [r7, #24]
  return result;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 8003ae4:	2320      	movs	r3, #32
 8003ae6:	e003      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b13      	cmp	r3, #19
 8003af2:	bf8c      	ite	hi
 8003af4:	2301      	movhi	r3, #1
 8003af6:	2300      	movls	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d027      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8003afe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003b02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0xa16>
 8003b0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003b0e:	0e9b      	lsrs	r3, r3, #26
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	3b09      	subs	r3, #9
 8003b16:	2201      	movs	r2, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	e015      	b.n	8003b4a <HAL_ADC_ConfigChannel+0xa42>
 8003b1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003b22:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	60fb      	str	r3, [r7, #12]
  return result;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 8003b36:	2320      	movs	r3, #32
 8003b38:	e003      	b.n	8003b42 <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	fab3 f383 	clz	r3, r3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	3b09      	subs	r3, #9
 8003b44:	2201      	movs	r2, #1
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f7fe fa64 	bl	8002028 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003b6e:	f7fe fb27 	bl	80021c0 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f280 8190 	bge.w	8003e9c <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a97      	ldr	r2, [pc, #604]	@ (8003de0 <HAL_ADC_ConfigChannel+0xcd8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0xa82>
 8003b86:	4b97      	ldr	r3, [pc, #604]	@ (8003de4 <HAL_ADC_ConfigChannel+0xcdc>)
 8003b88:	e000      	b.n	8003b8c <HAL_ADC_ConfigChannel+0xa84>
 8003b8a:	4b97      	ldr	r3, [pc, #604]	@ (8003de8 <HAL_ADC_ConfigChannel+0xce0>)
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe f929 	bl	8001de4 <LL_ADC_GetCommonPathInternalCh>
 8003b92:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a94      	ldr	r2, [pc, #592]	@ (8003dec <HAL_ADC_ConfigChannel+0xce4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d126      	bne.n	8003bee <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d120      	bne.n	8003bee <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a8b      	ldr	r2, [pc, #556]	@ (8003de0 <HAL_ADC_ConfigChannel+0xcd8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_ConfigChannel+0xab2>
 8003bb6:	4a8b      	ldr	r2, [pc, #556]	@ (8003de4 <HAL_ADC_ConfigChannel+0xcdc>)
 8003bb8:	e000      	b.n	8003bbc <HAL_ADC_ConfigChannel+0xab4>
 8003bba:	4a8b      	ldr	r2, [pc, #556]	@ (8003de8 <HAL_ADC_ConfigChannel+0xce0>)
 8003bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7fe f8f9 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003bcc:	4b88      	ldr	r3, [pc, #544]	@ (8003df0 <HAL_ADC_ConfigChannel+0xce8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	099b      	lsrs	r3, r3, #6
 8003bd2:	4a88      	ldr	r2, [pc, #544]	@ (8003df4 <HAL_ADC_ConfigChannel+0xcec>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003bde:	e002      	b.n	8003be6 <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f9      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003bec:	e067      	b.n	8003cbe <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a81      	ldr	r2, [pc, #516]	@ (8003df8 <HAL_ADC_ConfigChannel+0xcf0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d116      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d110      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a75      	ldr	r2, [pc, #468]	@ (8003de0 <HAL_ADC_ConfigChannel+0xcd8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0xb0a>
 8003c0e:	4a75      	ldr	r2, [pc, #468]	@ (8003de4 <HAL_ADC_ConfigChannel+0xcdc>)
 8003c10:	e000      	b.n	8003c14 <HAL_ADC_ConfigChannel+0xb0c>
 8003c12:	4a75      	ldr	r2, [pc, #468]	@ (8003de8 <HAL_ADC_ConfigChannel+0xce0>)
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f7fe f8cd 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
 8003c24:	e04b      	b.n	8003cbe <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a74      	ldr	r2, [pc, #464]	@ (8003dfc <HAL_ADC_ConfigChannel+0xcf4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d116      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d110      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a67      	ldr	r2, [pc, #412]	@ (8003de0 <HAL_ADC_ConfigChannel+0xcd8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0xb42>
 8003c46:	4a67      	ldr	r2, [pc, #412]	@ (8003de4 <HAL_ADC_ConfigChannel+0xcdc>)
 8003c48:	e000      	b.n	8003c4c <HAL_ADC_ConfigChannel+0xb44>
 8003c4a:	4a67      	ldr	r2, [pc, #412]	@ (8003de8 <HAL_ADC_ConfigChannel+0xce0>)
 8003c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f7fe f8b1 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
 8003c5c:	e02f      	b.n	8003cbe <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a67      	ldr	r2, [pc, #412]	@ (8003e00 <HAL_ADC_ConfigChannel+0xcf8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d12a      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d124      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a62      	ldr	r2, [pc, #392]	@ (8003e04 <HAL_ADC_ConfigChannel+0xcfc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d11f      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a57      	ldr	r2, [pc, #348]	@ (8003de0 <HAL_ADC_ConfigChannel+0xcd8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d101      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0xb84>
 8003c88:	4a56      	ldr	r2, [pc, #344]	@ (8003de4 <HAL_ADC_ConfigChannel+0xcdc>)
 8003c8a:	e000      	b.n	8003c8e <HAL_ADC_ConfigChannel+0xb86>
 8003c8c:	4a56      	ldr	r2, [pc, #344]	@ (8003de8 <HAL_ADC_ConfigChannel+0xce0>)
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c96:	4619      	mov	r1, r3
 8003c98:	4610      	mov	r0, r2
 8003c9a:	f7fe f890 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003c9e:	f7fe f86d 	bl	8001d7c <HAL_GetREVID>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca8:	d809      	bhi.n	8003cbe <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003cbe:	f7fe f85d 	bl	8001d7c <HAL_GetREVID>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc8:	f040 80e8 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a4d      	ldr	r2, [pc, #308]	@ (8003e08 <HAL_ADC_ConfigChannel+0xd00>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	f040 80e2 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f040 80db 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003cfa:	e0cf      	b.n	8003e9c <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d04:	d004      	beq.n	8003d10 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003d0a:	4a40      	ldr	r2, [pc, #256]	@ (8003e0c <HAL_ADC_ConfigChannel+0xd04>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d106      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe fa18 	bl	800214e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f280 80ba 	bge.w	8003e9c <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8003de0 <HAL_ADC_ConfigChannel+0xcd8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0xc2e>
 8003d32:	4b2c      	ldr	r3, [pc, #176]	@ (8003de4 <HAL_ADC_ConfigChannel+0xcdc>)
 8003d34:	e000      	b.n	8003d38 <HAL_ADC_ConfigChannel+0xc30>
 8003d36:	4b2c      	ldr	r3, [pc, #176]	@ (8003de8 <HAL_ADC_ConfigChannel+0xce0>)
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe f853 	bl	8001de4 <LL_ADC_GetCommonPathInternalCh>
 8003d3e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a32      	ldr	r2, [pc, #200]	@ (8003e10 <HAL_ADC_ConfigChannel+0xd08>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d110      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a23      	ldr	r2, [pc, #140]	@ (8003de0 <HAL_ADC_ConfigChannel+0xcd8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0xc52>
 8003d56:	4a23      	ldr	r2, [pc, #140]	@ (8003de4 <HAL_ADC_ConfigChannel+0xcdc>)
 8003d58:	e000      	b.n	8003d5c <HAL_ADC_ConfigChannel+0xc54>
 8003d5a:	4a23      	ldr	r2, [pc, #140]	@ (8003de8 <HAL_ADC_ConfigChannel+0xce0>)
 8003d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f7fe f829 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
 8003d6c:	e06d      	b.n	8003e4a <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a28      	ldr	r2, [pc, #160]	@ (8003e14 <HAL_ADC_ConfigChannel+0xd0c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d110      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a18      	ldr	r2, [pc, #96]	@ (8003de0 <HAL_ADC_ConfigChannel+0xcd8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0xc7e>
 8003d82:	4a18      	ldr	r2, [pc, #96]	@ (8003de4 <HAL_ADC_ConfigChannel+0xcdc>)
 8003d84:	e000      	b.n	8003d88 <HAL_ADC_ConfigChannel+0xc80>
 8003d86:	4a18      	ldr	r2, [pc, #96]	@ (8003de8 <HAL_ADC_ConfigChannel+0xce0>)
 8003d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f7fe f813 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
 8003d98:	e057      	b.n	8003e4a <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a17      	ldr	r2, [pc, #92]	@ (8003dfc <HAL_ADC_ConfigChannel+0xcf4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d110      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0d      	ldr	r2, [pc, #52]	@ (8003de0 <HAL_ADC_ConfigChannel+0xcd8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0xcaa>
 8003dae:	4a0d      	ldr	r2, [pc, #52]	@ (8003de4 <HAL_ADC_ConfigChannel+0xcdc>)
 8003db0:	e000      	b.n	8003db4 <HAL_ADC_ConfigChannel+0xcac>
 8003db2:	4a0d      	ldr	r2, [pc, #52]	@ (8003de8 <HAL_ADC_ConfigChannel+0xce0>)
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f7fd fffd 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
 8003dc4:	e041      	b.n	8003e4a <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a0d      	ldr	r2, [pc, #52]	@ (8003e00 <HAL_ADC_ConfigChannel+0xcf8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d13c      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a02      	ldr	r2, [pc, #8]	@ (8003de0 <HAL_ADC_ConfigChannel+0xcd8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d11e      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0xd10>
 8003dda:	4a02      	ldr	r2, [pc, #8]	@ (8003de4 <HAL_ADC_ConfigChannel+0xcdc>)
 8003ddc:	e01d      	b.n	8003e1a <HAL_ADC_ConfigChannel+0xd12>
 8003dde:	bf00      	nop
 8003de0:	42028000 	.word	0x42028000
 8003de4:	42028308 	.word	0x42028308
 8003de8:	46021308 	.word	0x46021308
 8003dec:	b6002000 	.word	0xb6002000
 8003df0:	20000000 	.word	0x20000000
 8003df4:	053e2d63 	.word	0x053e2d63
 8003df8:	ba004000 	.word	0xba004000
 8003dfc:	80000001 	.word	0x80000001
 8003e00:	b2001000 	.word	0xb2001000
 8003e04:	46021000 	.word	0x46021000
 8003e08:	d7200000 	.word	0xd7200000
 8003e0c:	80000010 	.word	0x80000010
 8003e10:	ce080000 	.word	0xce080000
 8003e14:	ca040000 	.word	0xca040000
 8003e18:	4a25      	ldr	r2, [pc, #148]	@ (8003eb0 <HAL_ADC_ConfigChannel+0xda8>)
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003e22:	4619      	mov	r1, r3
 8003e24:	4610      	mov	r0, r2
 8003e26:	f7fd ffca 	bl	8001dbe <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003e2a:	f7fd ffa7 	bl	8001d7c <HAL_GetREVID>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e34:	d809      	bhi.n	8003e4a <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8003e4a:	f7fd ff97 	bl	8001d7c <HAL_GetREVID>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e54:	d122      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a16      	ldr	r2, [pc, #88]	@ (8003eb4 <HAL_ADC_ConfigChannel+0xdac>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d11d      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d117      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003e80:	e00c      	b.n	8003e9c <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8003e94:	e002      	b.n	8003e9c <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e9a:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8003ea4:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	37f0      	adds	r7, #240	@ 0xf0
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	46021308 	.word	0x46021308
 8003eb4:	d7200000 	.word	0xd7200000

08003eb8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fac2 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 8003ed4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fae3 	bl	80024a6 <LL_ADC_INJ_IsConversionOngoing>
 8003ee0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <ADC_ConversionStop+0x38>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8099 	beq.w	8004022 <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d02b      	beq.n	8003f56 <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d126      	bne.n	8003f56 <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	7f1b      	ldrb	r3, [r3, #28]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d122      	bne.n	8003f56 <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003f10:	2301      	movs	r3, #1
 8003f12:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f14:	e014      	b.n	8003f40 <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4a44      	ldr	r2, [pc, #272]	@ (800402c <ADC_ConversionStop+0x174>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d90d      	bls.n	8003f3a <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f22:	f043 0210 	orr.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e074      	b.n	8004024 <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4a:	2b40      	cmp	r3, #64	@ 0x40
 8003f4c:	d1e3      	bne.n	8003f16 <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2240      	movs	r2, #64	@ 0x40
 8003f54:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d014      	beq.n	8003f86 <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fa79 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00c      	beq.n	8003f86 <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe fa36 	bl	80023e2 <LL_ADC_IsDisableOngoing>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d104      	bne.n	8003f86 <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe fa55 	bl	8002430 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d014      	beq.n	8003fb6 <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fa88 	bl	80024a6 <LL_ADC_INJ_IsConversionOngoing>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00c      	beq.n	8003fb6 <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fa1e 	bl	80023e2 <LL_ADC_IsDisableOngoing>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe fa64 	bl	800247e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d005      	beq.n	8003fc8 <ADC_ConversionStop+0x110>
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d105      	bne.n	8003fce <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	617b      	str	r3, [r7, #20]
        break;
 8003fc6:	e005      	b.n	8003fd4 <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 8003fc8:	2308      	movs	r3, #8
 8003fca:	617b      	str	r3, [r7, #20]
        break;
 8003fcc:	e002      	b.n	8003fd4 <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 8003fce:	2304      	movs	r3, #4
 8003fd0:	617b      	str	r3, [r7, #20]
        break;
 8003fd2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003fd4:	f7fd fea2 	bl	8001d1c <HAL_GetTick>
 8003fd8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003fda:	e01b      	b.n	8004014 <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003fdc:	f7fd fe9e 	bl	8001d1c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d914      	bls.n	8004014 <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ffc:	f043 0210 	orr.w	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e007      	b.n	8004024 <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1dc      	bne.n	8003fdc <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3720      	adds	r7, #32
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	000cdbff 	.word	0x000cdbff

08004030 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe f9bd 	bl	80023bc <LL_ADC_IsEnabled>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d15a      	bne.n	80040fe <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	4b2e      	ldr	r3, [pc, #184]	@ (8004108 <ADC_Enable+0xd8>)
 8004050:	4013      	ands	r3, r2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800405a:	f043 0210 	orr.w	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e046      	b.n	8004100 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe f974 	bl	800236c <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <ADC_Enable+0x66>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1e      	ldr	r2, [pc, #120]	@ (800410c <ADC_Enable+0xdc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d033      	beq.n	80040fe <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004096:	f7fd fe41 	bl	8001d1c <HAL_GetTick>
 800409a:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800409c:	e028      	b.n	80040f0 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe f98a 	bl	80023bc <LL_ADC_IsEnabled>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe f95a 	bl	800236c <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040b8:	f7fd fe30 	bl	8001d1c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d914      	bls.n	80040f0 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d00d      	beq.n	80040f0 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040d8:	f043 0210 	orr.w	r2, r3, #16
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040e4:	f043 0201 	orr.w	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e007      	b.n	8004100 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d1cf      	bne.n	800409e <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	8000003f 	.word	0x8000003f
 800410c:	46021000 	.word	0x46021000

08004110 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe f960 	bl	80023e2 <LL_ADC_IsDisableOngoing>
 8004122:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe f947 	bl	80023bc <LL_ADC_IsEnabled>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d047      	beq.n	80041c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d144      	bne.n	80041c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030d 	and.w	r3, r3, #13
 8004144:	2b01      	cmp	r3, #1
 8004146:	d10c      	bne.n	8004162 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe f921 	bl	8002394 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2203      	movs	r2, #3
 8004158:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800415a:	f7fd fddf 	bl	8001d1c <HAL_GetTick>
 800415e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004160:	e029      	b.n	80041b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004166:	f043 0210 	orr.w	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	679a      	str	r2, [r3, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	67da      	str	r2, [r3, #124]	@ 0x7c
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e023      	b.n	80041c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800417e:	f7fd fdcd 	bl	8001d1c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d914      	bls.n	80041b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00d      	beq.n	80041b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800419e:	f043 0210 	orr.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041aa:	f043 0201 	orr.w	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e007      	b.n	80041c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1dc      	bne.n	800417e <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800423c:	4013      	ands	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800424c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004252:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	60d3      	str	r3, [r2, #12]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800426c:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <__NVIC_GetPriorityGrouping+0x18>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 0307 	and.w	r3, r3, #7
}
 8004276:	4618      	mov	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db0b      	blt.n	80042ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	4907      	ldr	r1, [pc, #28]	@ (80042bc <__NVIC_EnableIRQ+0x38>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2001      	movs	r0, #1
 80042a6:	fa00 f202 	lsl.w	r2, r0, r2
 80042aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000e100 	.word	0xe000e100

080042c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db0a      	blt.n	80042ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	490c      	ldr	r1, [pc, #48]	@ (800430c <__NVIC_SetPriority+0x4c>)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	440b      	add	r3, r1
 80042e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e8:	e00a      	b.n	8004300 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4908      	ldr	r1, [pc, #32]	@ (8004310 <__NVIC_SetPriority+0x50>)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	3b04      	subs	r3, #4
 80042f8:	0112      	lsls	r2, r2, #4
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	440b      	add	r3, r1
 80042fe:	761a      	strb	r2, [r3, #24]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000e100 	.word	0xe000e100
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	@ 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f1c3 0307 	rsb	r3, r3, #7
 800432e:	2b04      	cmp	r3, #4
 8004330:	bf28      	it	cs
 8004332:	2304      	movcs	r3, #4
 8004334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3304      	adds	r3, #4
 800433a:	2b06      	cmp	r3, #6
 800433c:	d902      	bls.n	8004344 <NVIC_EncodePriority+0x30>
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3b03      	subs	r3, #3
 8004342:	e000      	b.n	8004346 <NVIC_EncodePriority+0x32>
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	f04f 32ff 	mov.w	r2, #4294967295
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	401a      	ands	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800435c:	f04f 31ff 	mov.w	r1, #4294967295
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	43d9      	mvns	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800436c:	4313      	orrs	r3, r2
         );
}
 800436e:	4618      	mov	r0, r3
 8004370:	3724      	adds	r7, #36	@ 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff4c 	bl	8004220 <__NVIC_SetPriorityGrouping>
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800439e:	f7ff ff63 	bl	8004268 <__NVIC_GetPriorityGrouping>
 80043a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	f7ff ffb3 	bl	8004314 <NVIC_EncodePriority>
 80043ae:	4602      	mov	r2, r0
 80043b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff82 	bl	80042c0 <__NVIC_SetPriority>
}
 80043bc:	bf00      	nop
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ff56 	bl	8004284 <__NVIC_EnableIRQ>
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043f0:	d301      	bcc.n	80043f6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80043f2:	2301      	movs	r3, #1
 80043f4:	e00d      	b.n	8004412 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80043f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004420 <HAL_SYSTICK_Config+0x40>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80043fe:	4b08      	ldr	r3, [pc, #32]	@ (8004420 <HAL_SYSTICK_Config+0x40>)
 8004400:	2200      	movs	r2, #0
 8004402:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <HAL_SYSTICK_Config+0x40>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a05      	ldr	r2, [pc, #20]	@ (8004420 <HAL_SYSTICK_Config+0x40>)
 800440a:	f043 0303 	orr.w	r3, r3, #3
 800440e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	e000e010 	.word	0xe000e010

08004424 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b04      	cmp	r3, #4
 8004430:	d844      	bhi.n	80044bc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004432:	a201      	add	r2, pc, #4	@ (adr r2, 8004438 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	0800445b 	.word	0x0800445b
 800443c:	08004479 	.word	0x08004479
 8004440:	0800449b 	.word	0x0800449b
 8004444:	080044bd 	.word	0x080044bd
 8004448:	0800444d 	.word	0x0800444d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800444c:	4b1f      	ldr	r3, [pc, #124]	@ (80044cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1e      	ldr	r2, [pc, #120]	@ (80044cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004452:	f043 0304 	orr.w	r3, r3, #4
 8004456:	6013      	str	r3, [r2, #0]
      break;
 8004458:	e031      	b.n	80044be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800445a:	4b1c      	ldr	r3, [pc, #112]	@ (80044cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1b      	ldr	r2, [pc, #108]	@ (80044cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004460:	f023 0304 	bic.w	r3, r3, #4
 8004464:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004466:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800446c:	4a18      	ldr	r2, [pc, #96]	@ (80044d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800446e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004472:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004476:	e022      	b.n	80044be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004478:	4b14      	ldr	r3, [pc, #80]	@ (80044cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a13      	ldr	r2, [pc, #76]	@ (80044cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800447e:	f023 0304 	bic.w	r3, r3, #4
 8004482:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004484:	4b12      	ldr	r3, [pc, #72]	@ (80044d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800448a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800448e:	4a10      	ldr	r2, [pc, #64]	@ (80044d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004490:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004494:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004498:	e011      	b.n	80044be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800449a:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a0b      	ldr	r2, [pc, #44]	@ (80044cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80044a0:	f023 0304 	bic.w	r3, r3, #4
 80044a4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80044a6:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80044a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044ac:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80044b0:	4a07      	ldr	r2, [pc, #28]	@ (80044d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80044b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80044ba:	e000      	b.n	80044be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80044bc:	bf00      	nop
  }
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	e000e010 	.word	0xe000e010
 80044d0:	46020c00 	.word	0x46020c00

080044d4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80044da:	4b19      	ldr	r3, [pc, #100]	@ (8004540 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80044e6:	2304      	movs	r3, #4
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	e021      	b.n	8004530 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80044ec:	4b15      	ldr	r3, [pc, #84]	@ (8004544 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80044ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044f2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80044f6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044fe:	d011      	beq.n	8004524 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004506:	d810      	bhi.n	800452a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d004      	beq.n	8004518 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004514:	d003      	beq.n	800451e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004516:	e008      	b.n	800452a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004518:	2300      	movs	r3, #0
 800451a:	607b      	str	r3, [r7, #4]
        break;
 800451c:	e008      	b.n	8004530 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800451e:	2301      	movs	r3, #1
 8004520:	607b      	str	r3, [r7, #4]
        break;
 8004522:	e005      	b.n	8004530 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004524:	2302      	movs	r3, #2
 8004526:	607b      	str	r3, [r7, #4]
        break;
 8004528:	e002      	b.n	8004530 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
        break;
 800452e:	bf00      	nop
    }
  }
  return systick_source;
 8004530:	687b      	ldr	r3, [r7, #4]
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000e010 	.word	0xe000e010
 8004544:	46020c00 	.word	0x46020c00

08004548 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8004550:	f7fd fbe4 	bl	8001d1c <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0db      	b.n	8004718 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6e      	ldr	r2, [pc, #440]	@ (8004720 <HAL_DMA_Init+0x1d8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	f000 809f 	beq.w	80046aa <HAL_DMA_Init+0x162>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6c      	ldr	r2, [pc, #432]	@ (8004724 <HAL_DMA_Init+0x1dc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	f000 8099 	beq.w	80046aa <HAL_DMA_Init+0x162>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a6a      	ldr	r2, [pc, #424]	@ (8004728 <HAL_DMA_Init+0x1e0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	f000 8093 	beq.w	80046aa <HAL_DMA_Init+0x162>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a68      	ldr	r2, [pc, #416]	@ (800472c <HAL_DMA_Init+0x1e4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	f000 808d 	beq.w	80046aa <HAL_DMA_Init+0x162>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a66      	ldr	r2, [pc, #408]	@ (8004730 <HAL_DMA_Init+0x1e8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	f000 8087 	beq.w	80046aa <HAL_DMA_Init+0x162>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a64      	ldr	r2, [pc, #400]	@ (8004734 <HAL_DMA_Init+0x1ec>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	f000 8081 	beq.w	80046aa <HAL_DMA_Init+0x162>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a62      	ldr	r2, [pc, #392]	@ (8004738 <HAL_DMA_Init+0x1f0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d07b      	beq.n	80046aa <HAL_DMA_Init+0x162>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a61      	ldr	r2, [pc, #388]	@ (800473c <HAL_DMA_Init+0x1f4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d076      	beq.n	80046aa <HAL_DMA_Init+0x162>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a5f      	ldr	r2, [pc, #380]	@ (8004740 <HAL_DMA_Init+0x1f8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d071      	beq.n	80046aa <HAL_DMA_Init+0x162>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004744 <HAL_DMA_Init+0x1fc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d06c      	beq.n	80046aa <HAL_DMA_Init+0x162>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a5c      	ldr	r2, [pc, #368]	@ (8004748 <HAL_DMA_Init+0x200>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d067      	beq.n	80046aa <HAL_DMA_Init+0x162>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a5b      	ldr	r2, [pc, #364]	@ (800474c <HAL_DMA_Init+0x204>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d062      	beq.n	80046aa <HAL_DMA_Init+0x162>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a59      	ldr	r2, [pc, #356]	@ (8004750 <HAL_DMA_Init+0x208>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d05d      	beq.n	80046aa <HAL_DMA_Init+0x162>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a58      	ldr	r2, [pc, #352]	@ (8004754 <HAL_DMA_Init+0x20c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d058      	beq.n	80046aa <HAL_DMA_Init+0x162>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a56      	ldr	r2, [pc, #344]	@ (8004758 <HAL_DMA_Init+0x210>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d053      	beq.n	80046aa <HAL_DMA_Init+0x162>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a55      	ldr	r2, [pc, #340]	@ (800475c <HAL_DMA_Init+0x214>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d04e      	beq.n	80046aa <HAL_DMA_Init+0x162>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a53      	ldr	r2, [pc, #332]	@ (8004760 <HAL_DMA_Init+0x218>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d049      	beq.n	80046aa <HAL_DMA_Init+0x162>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a52      	ldr	r2, [pc, #328]	@ (8004764 <HAL_DMA_Init+0x21c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d044      	beq.n	80046aa <HAL_DMA_Init+0x162>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a50      	ldr	r2, [pc, #320]	@ (8004768 <HAL_DMA_Init+0x220>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d03f      	beq.n	80046aa <HAL_DMA_Init+0x162>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a4f      	ldr	r2, [pc, #316]	@ (800476c <HAL_DMA_Init+0x224>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d03a      	beq.n	80046aa <HAL_DMA_Init+0x162>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a4d      	ldr	r2, [pc, #308]	@ (8004770 <HAL_DMA_Init+0x228>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d035      	beq.n	80046aa <HAL_DMA_Init+0x162>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a4c      	ldr	r2, [pc, #304]	@ (8004774 <HAL_DMA_Init+0x22c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d030      	beq.n	80046aa <HAL_DMA_Init+0x162>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a4a      	ldr	r2, [pc, #296]	@ (8004778 <HAL_DMA_Init+0x230>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d02b      	beq.n	80046aa <HAL_DMA_Init+0x162>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a49      	ldr	r2, [pc, #292]	@ (800477c <HAL_DMA_Init+0x234>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d026      	beq.n	80046aa <HAL_DMA_Init+0x162>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a47      	ldr	r2, [pc, #284]	@ (8004780 <HAL_DMA_Init+0x238>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d021      	beq.n	80046aa <HAL_DMA_Init+0x162>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a46      	ldr	r2, [pc, #280]	@ (8004784 <HAL_DMA_Init+0x23c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d01c      	beq.n	80046aa <HAL_DMA_Init+0x162>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a44      	ldr	r2, [pc, #272]	@ (8004788 <HAL_DMA_Init+0x240>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d017      	beq.n	80046aa <HAL_DMA_Init+0x162>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a43      	ldr	r2, [pc, #268]	@ (800478c <HAL_DMA_Init+0x244>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d012      	beq.n	80046aa <HAL_DMA_Init+0x162>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a41      	ldr	r2, [pc, #260]	@ (8004790 <HAL_DMA_Init+0x248>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_DMA_Init+0x162>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a40      	ldr	r2, [pc, #256]	@ (8004794 <HAL_DMA_Init+0x24c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d008      	beq.n	80046aa <HAL_DMA_Init+0x162>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a3e      	ldr	r2, [pc, #248]	@ (8004798 <HAL_DMA_Init+0x250>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d003      	beq.n	80046aa <HAL_DMA_Init+0x162>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a3d      	ldr	r2, [pc, #244]	@ (800479c <HAL_DMA_Init+0x254>)
 80046a8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0206 	orr.w	r2, r2, #6
 80046c8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80046ca:	e00f      	b.n	80046ec <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80046cc:	f7fd fb26 	bl	8001d1c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d908      	bls.n	80046ec <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2210      	movs	r2, #16
 80046de:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2203      	movs	r2, #3
 80046e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e015      	b.n	8004718 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e8      	bne.n	80046cc <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fb18 	bl	8004d30 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40020050 	.word	0x40020050
 8004724:	50020050 	.word	0x50020050
 8004728:	400200d0 	.word	0x400200d0
 800472c:	500200d0 	.word	0x500200d0
 8004730:	40020150 	.word	0x40020150
 8004734:	50020150 	.word	0x50020150
 8004738:	400201d0 	.word	0x400201d0
 800473c:	500201d0 	.word	0x500201d0
 8004740:	40020250 	.word	0x40020250
 8004744:	50020250 	.word	0x50020250
 8004748:	400202d0 	.word	0x400202d0
 800474c:	500202d0 	.word	0x500202d0
 8004750:	40020350 	.word	0x40020350
 8004754:	50020350 	.word	0x50020350
 8004758:	400203d0 	.word	0x400203d0
 800475c:	500203d0 	.word	0x500203d0
 8004760:	40020450 	.word	0x40020450
 8004764:	50020450 	.word	0x50020450
 8004768:	400204d0 	.word	0x400204d0
 800476c:	500204d0 	.word	0x500204d0
 8004770:	40020550 	.word	0x40020550
 8004774:	50020550 	.word	0x50020550
 8004778:	400205d0 	.word	0x400205d0
 800477c:	500205d0 	.word	0x500205d0
 8004780:	40020650 	.word	0x40020650
 8004784:	50020650 	.word	0x50020650
 8004788:	400206d0 	.word	0x400206d0
 800478c:	500206d0 	.word	0x500206d0
 8004790:	40020750 	.word	0x40020750
 8004794:	50020750 	.word	0x50020750
 8004798:	400207d0 	.word	0x400207d0
 800479c:	500207d0 	.word	0x500207d0

080047a0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e04f      	b.n	8004858 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_DMA_Start_IT+0x26>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e048      	b.n	8004858 <HAL_DMA_Start_IT+0xb8>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d136      	bne.n	8004848 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fa78 	bl	8004ce4 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004802:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800481a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004832:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e007      	b.n	8004858 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004868:	f7fd fa58 	bl	8001d1c <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e06b      	b.n	8004950 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d008      	beq.n	8004896 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e05c      	b.n	8004950 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0204 	orr.w	r2, r2, #4
 80048a4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2205      	movs	r2, #5
 80048aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80048ae:	e020      	b.n	80048f2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80048b0:	f7fd fa34 	bl	8001d1c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d919      	bls.n	80048f2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	f043 0210 	orr.w	r2, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2203      	movs	r2, #3
 80048ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e2:	2201      	movs	r2, #1
 80048e4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e02e      	b.n	8004950 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0d7      	beq.n	80048b0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0202 	orr.w	r2, r2, #2
 800490e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2204      	movs	r2, #4
 8004914:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004920:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800492e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493a:	2201      	movs	r2, #1
 800493c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2200      	movs	r2, #0
 8004944:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e019      	b.n	800499e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d004      	beq.n	8004980 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e00e      	b.n	800499e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2204      	movs	r2, #4
 8004984:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80049ba:	f023 030f 	bic.w	r3, r3, #15
 80049be:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c8:	3b50      	subs	r3, #80	@ 0x50
 80049ca:	09db      	lsrs	r3, r3, #7
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2201      	movs	r2, #1
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4013      	ands	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 813b 	beq.w	8004c60 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d011      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a0e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a14:	f043 0201 	orr.w	r2, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d011      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a40:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a46:	f043 0202 	orr.w	r2, r3, #2
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d011      	beq.n	8004a80 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a72:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a78:	f043 0204 	orr.w	r2, r3, #4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d011      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004aa4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aaa:	f043 0208 	orr.w	r2, r3, #8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00c      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ad6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d04c      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d045      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b0c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d12e      	bne.n	8004b78 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b28:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0202 	orr.w	r2, r2, #2
 8004b38:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b52:	2201      	movs	r2, #1
 8004b54:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d07a      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
        }

        return;
 8004b76:	e075      	b.n	8004c64 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2205      	movs	r2, #5
 8004b7c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d039      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d032      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d012      	beq.n	8004bde <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d116      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d111      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd8:	2201      	movs	r2, #1
 8004bda:	731a      	strb	r2, [r3, #12]
 8004bdc:	e008      	b.n	8004bf0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d103      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004bf8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d025      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0202 	orr.w	r2, r2, #2
 8004c28:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c42:	2201      	movs	r2, #1
 8004c44:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
 8004c5e:	e002      	b.n	8004c66 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004c64:	bf00      	nop
    }
  }
}
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e02b      	b.n	8004cd8 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004c88:	f023 030f 	bic.w	r3, r3, #15
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c96:	3b50      	subs	r3, #80	@ 0x50
 8004c98:	09db      	lsrs	r3, r3, #7
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d012      	beq.n	8004cd6 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f003 0311 	and.w	r3, r3, #17
 8004cb6:	2b11      	cmp	r3, #17
 8004cb8:	d106      	bne.n	8004cc8 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	e006      	b.n	8004cd6 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	b291      	uxth	r1, r2
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004d10:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a53      	ldr	r2, [pc, #332]	@ (8004ebc <DMA_Init+0x18c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	f000 80a0 	beq.w	8004eb6 <DMA_Init+0x186>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a51      	ldr	r2, [pc, #324]	@ (8004ec0 <DMA_Init+0x190>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	f000 809a 	beq.w	8004eb6 <DMA_Init+0x186>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a4f      	ldr	r2, [pc, #316]	@ (8004ec4 <DMA_Init+0x194>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	f000 8094 	beq.w	8004eb6 <DMA_Init+0x186>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a4d      	ldr	r2, [pc, #308]	@ (8004ec8 <DMA_Init+0x198>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	f000 808e 	beq.w	8004eb6 <DMA_Init+0x186>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4b      	ldr	r2, [pc, #300]	@ (8004ecc <DMA_Init+0x19c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	f000 8088 	beq.w	8004eb6 <DMA_Init+0x186>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a49      	ldr	r2, [pc, #292]	@ (8004ed0 <DMA_Init+0x1a0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	f000 8082 	beq.w	8004eb6 <DMA_Init+0x186>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a47      	ldr	r2, [pc, #284]	@ (8004ed4 <DMA_Init+0x1a4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d07c      	beq.n	8004eb6 <DMA_Init+0x186>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a45      	ldr	r2, [pc, #276]	@ (8004ed8 <DMA_Init+0x1a8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d077      	beq.n	8004eb6 <DMA_Init+0x186>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a44      	ldr	r2, [pc, #272]	@ (8004edc <DMA_Init+0x1ac>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d072      	beq.n	8004eb6 <DMA_Init+0x186>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a42      	ldr	r2, [pc, #264]	@ (8004ee0 <DMA_Init+0x1b0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d06d      	beq.n	8004eb6 <DMA_Init+0x186>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a41      	ldr	r2, [pc, #260]	@ (8004ee4 <DMA_Init+0x1b4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d068      	beq.n	8004eb6 <DMA_Init+0x186>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3f      	ldr	r2, [pc, #252]	@ (8004ee8 <DMA_Init+0x1b8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d063      	beq.n	8004eb6 <DMA_Init+0x186>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3e      	ldr	r2, [pc, #248]	@ (8004eec <DMA_Init+0x1bc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d05e      	beq.n	8004eb6 <DMA_Init+0x186>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8004ef0 <DMA_Init+0x1c0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d059      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef4 <DMA_Init+0x1c4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d054      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a39      	ldr	r2, [pc, #228]	@ (8004ef8 <DMA_Init+0x1c8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d04f      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a38      	ldr	r2, [pc, #224]	@ (8004efc <DMA_Init+0x1cc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d04a      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a36      	ldr	r2, [pc, #216]	@ (8004f00 <DMA_Init+0x1d0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d045      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a35      	ldr	r2, [pc, #212]	@ (8004f04 <DMA_Init+0x1d4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d040      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a33      	ldr	r2, [pc, #204]	@ (8004f08 <DMA_Init+0x1d8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d03b      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a32      	ldr	r2, [pc, #200]	@ (8004f0c <DMA_Init+0x1dc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d036      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a30      	ldr	r2, [pc, #192]	@ (8004f10 <DMA_Init+0x1e0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d031      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2f      	ldr	r2, [pc, #188]	@ (8004f14 <DMA_Init+0x1e4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d02c      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2d      	ldr	r2, [pc, #180]	@ (8004f18 <DMA_Init+0x1e8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d027      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f1c <DMA_Init+0x1ec>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d022      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2a      	ldr	r2, [pc, #168]	@ (8004f20 <DMA_Init+0x1f0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01d      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a29      	ldr	r2, [pc, #164]	@ (8004f24 <DMA_Init+0x1f4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d018      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a27      	ldr	r2, [pc, #156]	@ (8004f28 <DMA_Init+0x1f8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a26      	ldr	r2, [pc, #152]	@ (8004f2c <DMA_Init+0x1fc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00e      	beq.n	8004eb6 <DMA_Init+0x186>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a24      	ldr	r2, [pc, #144]	@ (8004f30 <DMA_Init+0x200>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d009      	beq.n	8004eb6 <DMA_Init+0x186>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a23      	ldr	r2, [pc, #140]	@ (8004f34 <DMA_Init+0x204>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <DMA_Init+0x186>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a21      	ldr	r2, [pc, #132]	@ (8004f38 <DMA_Init+0x208>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d142      	bne.n	8004f3c <DMA_Init+0x20c>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e041      	b.n	8004f3e <DMA_Init+0x20e>
 8004eba:	bf00      	nop
 8004ebc:	40020050 	.word	0x40020050
 8004ec0:	50020050 	.word	0x50020050
 8004ec4:	400200d0 	.word	0x400200d0
 8004ec8:	500200d0 	.word	0x500200d0
 8004ecc:	40020150 	.word	0x40020150
 8004ed0:	50020150 	.word	0x50020150
 8004ed4:	400201d0 	.word	0x400201d0
 8004ed8:	500201d0 	.word	0x500201d0
 8004edc:	40020250 	.word	0x40020250
 8004ee0:	50020250 	.word	0x50020250
 8004ee4:	400202d0 	.word	0x400202d0
 8004ee8:	500202d0 	.word	0x500202d0
 8004eec:	40020350 	.word	0x40020350
 8004ef0:	50020350 	.word	0x50020350
 8004ef4:	400203d0 	.word	0x400203d0
 8004ef8:	500203d0 	.word	0x500203d0
 8004efc:	40020450 	.word	0x40020450
 8004f00:	50020450 	.word	0x50020450
 8004f04:	400204d0 	.word	0x400204d0
 8004f08:	500204d0 	.word	0x500204d0
 8004f0c:	40020550 	.word	0x40020550
 8004f10:	50020550 	.word	0x50020550
 8004f14:	400205d0 	.word	0x400205d0
 8004f18:	500205d0 	.word	0x500205d0
 8004f1c:	40020650 	.word	0x40020650
 8004f20:	50020650 	.word	0x50020650
 8004f24:	400206d0 	.word	0x400206d0
 8004f28:	500206d0 	.word	0x500206d0
 8004f2c:	40020750 	.word	0x40020750
 8004f30:	50020750 	.word	0x50020750
 8004f34:	400207d0 	.word	0x400207d0
 8004f38:	500207d0 	.word	0x500207d0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d012      	beq.n	8004f68 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	051b      	lsls	r3, r3, #20
 8004f4e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004f52:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004f60:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f9a:	f040 80b0 	bne.w	80050fe <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a82      	ldr	r2, [pc, #520]	@ (80051ac <DMA_Init+0x47c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	f000 80a0 	beq.w	80050ea <DMA_Init+0x3ba>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a80      	ldr	r2, [pc, #512]	@ (80051b0 <DMA_Init+0x480>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	f000 809a 	beq.w	80050ea <DMA_Init+0x3ba>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7e      	ldr	r2, [pc, #504]	@ (80051b4 <DMA_Init+0x484>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	f000 8094 	beq.w	80050ea <DMA_Init+0x3ba>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a7c      	ldr	r2, [pc, #496]	@ (80051b8 <DMA_Init+0x488>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	f000 808e 	beq.w	80050ea <DMA_Init+0x3ba>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a7a      	ldr	r2, [pc, #488]	@ (80051bc <DMA_Init+0x48c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	f000 8088 	beq.w	80050ea <DMA_Init+0x3ba>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a78      	ldr	r2, [pc, #480]	@ (80051c0 <DMA_Init+0x490>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	f000 8082 	beq.w	80050ea <DMA_Init+0x3ba>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a76      	ldr	r2, [pc, #472]	@ (80051c4 <DMA_Init+0x494>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d07c      	beq.n	80050ea <DMA_Init+0x3ba>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a74      	ldr	r2, [pc, #464]	@ (80051c8 <DMA_Init+0x498>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d077      	beq.n	80050ea <DMA_Init+0x3ba>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a73      	ldr	r2, [pc, #460]	@ (80051cc <DMA_Init+0x49c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d072      	beq.n	80050ea <DMA_Init+0x3ba>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a71      	ldr	r2, [pc, #452]	@ (80051d0 <DMA_Init+0x4a0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d06d      	beq.n	80050ea <DMA_Init+0x3ba>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a70      	ldr	r2, [pc, #448]	@ (80051d4 <DMA_Init+0x4a4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d068      	beq.n	80050ea <DMA_Init+0x3ba>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a6e      	ldr	r2, [pc, #440]	@ (80051d8 <DMA_Init+0x4a8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d063      	beq.n	80050ea <DMA_Init+0x3ba>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a6d      	ldr	r2, [pc, #436]	@ (80051dc <DMA_Init+0x4ac>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d05e      	beq.n	80050ea <DMA_Init+0x3ba>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a6b      	ldr	r2, [pc, #428]	@ (80051e0 <DMA_Init+0x4b0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d059      	beq.n	80050ea <DMA_Init+0x3ba>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a6a      	ldr	r2, [pc, #424]	@ (80051e4 <DMA_Init+0x4b4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d054      	beq.n	80050ea <DMA_Init+0x3ba>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a68      	ldr	r2, [pc, #416]	@ (80051e8 <DMA_Init+0x4b8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d04f      	beq.n	80050ea <DMA_Init+0x3ba>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a67      	ldr	r2, [pc, #412]	@ (80051ec <DMA_Init+0x4bc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d04a      	beq.n	80050ea <DMA_Init+0x3ba>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a65      	ldr	r2, [pc, #404]	@ (80051f0 <DMA_Init+0x4c0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d045      	beq.n	80050ea <DMA_Init+0x3ba>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a64      	ldr	r2, [pc, #400]	@ (80051f4 <DMA_Init+0x4c4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d040      	beq.n	80050ea <DMA_Init+0x3ba>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a62      	ldr	r2, [pc, #392]	@ (80051f8 <DMA_Init+0x4c8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d03b      	beq.n	80050ea <DMA_Init+0x3ba>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a61      	ldr	r2, [pc, #388]	@ (80051fc <DMA_Init+0x4cc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d036      	beq.n	80050ea <DMA_Init+0x3ba>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a5f      	ldr	r2, [pc, #380]	@ (8005200 <DMA_Init+0x4d0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d031      	beq.n	80050ea <DMA_Init+0x3ba>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a5e      	ldr	r2, [pc, #376]	@ (8005204 <DMA_Init+0x4d4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d02c      	beq.n	80050ea <DMA_Init+0x3ba>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a5c      	ldr	r2, [pc, #368]	@ (8005208 <DMA_Init+0x4d8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d027      	beq.n	80050ea <DMA_Init+0x3ba>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a5b      	ldr	r2, [pc, #364]	@ (800520c <DMA_Init+0x4dc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d022      	beq.n	80050ea <DMA_Init+0x3ba>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a59      	ldr	r2, [pc, #356]	@ (8005210 <DMA_Init+0x4e0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01d      	beq.n	80050ea <DMA_Init+0x3ba>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a58      	ldr	r2, [pc, #352]	@ (8005214 <DMA_Init+0x4e4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d018      	beq.n	80050ea <DMA_Init+0x3ba>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a56      	ldr	r2, [pc, #344]	@ (8005218 <DMA_Init+0x4e8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <DMA_Init+0x3ba>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a55      	ldr	r2, [pc, #340]	@ (800521c <DMA_Init+0x4ec>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00e      	beq.n	80050ea <DMA_Init+0x3ba>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a53      	ldr	r2, [pc, #332]	@ (8005220 <DMA_Init+0x4f0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d009      	beq.n	80050ea <DMA_Init+0x3ba>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a52      	ldr	r2, [pc, #328]	@ (8005224 <DMA_Init+0x4f4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <DMA_Init+0x3ba>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a50      	ldr	r2, [pc, #320]	@ (8005228 <DMA_Init+0x4f8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d101      	bne.n	80050ee <DMA_Init+0x3be>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <DMA_Init+0x3c0>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00d      	beq.n	8005110 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e008      	b.n	8005110 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005106:	d103      	bne.n	8005110 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800510e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005116:	4b45      	ldr	r3, [pc, #276]	@ (800522c <DMA_Init+0x4fc>)
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	430b      	orrs	r3, r1
 8005122:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2200      	movs	r2, #0
 800512a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a36      	ldr	r2, [pc, #216]	@ (800520c <DMA_Init+0x4dc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d022      	beq.n	800517c <DMA_Init+0x44c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a35      	ldr	r2, [pc, #212]	@ (8005210 <DMA_Init+0x4e0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d01d      	beq.n	800517c <DMA_Init+0x44c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a33      	ldr	r2, [pc, #204]	@ (8005214 <DMA_Init+0x4e4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d018      	beq.n	800517c <DMA_Init+0x44c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a32      	ldr	r2, [pc, #200]	@ (8005218 <DMA_Init+0x4e8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <DMA_Init+0x44c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a30      	ldr	r2, [pc, #192]	@ (800521c <DMA_Init+0x4ec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <DMA_Init+0x44c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2f      	ldr	r2, [pc, #188]	@ (8005220 <DMA_Init+0x4f0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d009      	beq.n	800517c <DMA_Init+0x44c>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2d      	ldr	r2, [pc, #180]	@ (8005224 <DMA_Init+0x4f4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <DMA_Init+0x44c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a2c      	ldr	r2, [pc, #176]	@ (8005228 <DMA_Init+0x4f8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d101      	bne.n	8005180 <DMA_Init+0x450>
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <DMA_Init+0x452>
 8005180:	2300      	movs	r3, #0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2200      	movs	r2, #0
 8005194:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40020050 	.word	0x40020050
 80051b0:	50020050 	.word	0x50020050
 80051b4:	400200d0 	.word	0x400200d0
 80051b8:	500200d0 	.word	0x500200d0
 80051bc:	40020150 	.word	0x40020150
 80051c0:	50020150 	.word	0x50020150
 80051c4:	400201d0 	.word	0x400201d0
 80051c8:	500201d0 	.word	0x500201d0
 80051cc:	40020250 	.word	0x40020250
 80051d0:	50020250 	.word	0x50020250
 80051d4:	400202d0 	.word	0x400202d0
 80051d8:	500202d0 	.word	0x500202d0
 80051dc:	40020350 	.word	0x40020350
 80051e0:	50020350 	.word	0x50020350
 80051e4:	400203d0 	.word	0x400203d0
 80051e8:	500203d0 	.word	0x500203d0
 80051ec:	40020450 	.word	0x40020450
 80051f0:	50020450 	.word	0x50020450
 80051f4:	400204d0 	.word	0x400204d0
 80051f8:	500204d0 	.word	0x500204d0
 80051fc:	40020550 	.word	0x40020550
 8005200:	50020550 	.word	0x50020550
 8005204:	400205d0 	.word	0x400205d0
 8005208:	500205d0 	.word	0x500205d0
 800520c:	40020650 	.word	0x40020650
 8005210:	50020650 	.word	0x50020650
 8005214:	400206d0 	.word	0x400206d0
 8005218:	500206d0 	.word	0x500206d0
 800521c:	40020750 	.word	0x40020750
 8005220:	50020750 	.word	0x50020750
 8005224:	400207d0 	.word	0x400207d0
 8005228:	500207d0 	.word	0x500207d0
 800522c:	3cc03180 	.word	0x3cc03180

08005230 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_DMAEx_List_Start_IT+0x16>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e082      	b.n	8005350 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005250:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800525c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d005      	beq.n	8005270 <HAL_DMAEx_List_Start_IT+0x40>
 8005264:	7dfb      	ldrb	r3, [r7, #23]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d16a      	bne.n	8005340 <HAL_DMAEx_List_Start_IT+0x110>
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d067      	beq.n	8005340 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d157      	bne.n	800532c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_DMAEx_List_Start_IT+0x5a>
 8005286:	2302      	movs	r3, #2
 8005288:	e062      	b.n	8005350 <HAL_DMAEx_List_Start_IT+0x120>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529e:	2202      	movs	r2, #2
 80052a0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ac:	2200      	movs	r2, #0
 80052ae:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80052be:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052ee:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f107 010c 	add.w	r1, r7, #12
 80052fa:	2200      	movs	r2, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f94b 	bl	8005598 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4619      	mov	r1, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	0c0b      	lsrs	r3, r1, #16
 8005310:	041b      	lsls	r3, r3, #16
 8005312:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005320:	4013      	ands	r3, r2
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	430b      	orrs	r3, r1
 800532a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e007      	b.n	8005350 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2240      	movs	r2, #64	@ 0x40
 8005344:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <HAL_DMAEx_List_GetNodeConfig+0x16>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e004      	b.n	800537c <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8005372:	6839      	ldr	r1, [r7, #0]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f805 	bl	8005384 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	b2da      	uxtb	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0208 	and.w	r2, r3, #8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0203 	and.w	r2, r3, #3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053d2:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80053dc:	0d1b      	lsrs	r3, r3, #20
 80053de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e2:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b66      	ldr	r3, [pc, #408]	@ (8005594 <DMA_List_GetNodeConfig+0x210>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800541e:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005426:	60da      	str	r2, [r3, #12]
 8005428:	e013      	b.n	8005452 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	e002      	b.n	8005452 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	b29a      	uxth	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d008      	beq.n	80054b8 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0c1b      	lsrs	r3, r3, #16
 80054ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054b0:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80054b6:	e002      	b.n	80054be <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d04a      	beq.n	8005570 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054e4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80054e6:	89fa      	ldrh	r2, [r7, #14]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	0c1b      	lsrs	r3, r3, #16
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054f8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80054fa:	89fa      	ldrh	r2, [r7, #14]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005510:	425a      	negs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005526:	425a      	negs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8005532:	89fa      	ldrh	r2, [r7, #14]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8005540:	89fa      	ldrh	r2, [r7, #14]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005556:	425a      	negs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	da11      	bge.n	8005588 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005568:	425a      	negs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800556e:	e00b      	b.n	8005588 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005588:	bf00      	nop
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	0c002000 	.word	0x0c002000

08005598 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00c      	beq.n	80055ca <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4a0d      	ldr	r2, [pc, #52]	@ (80055f0 <DMA_List_GetCLLRNodeInfo+0x58>)
 80055ba:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00f      	beq.n	80055e2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2207      	movs	r2, #7
 80055c6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80055c8:	e00b      	b.n	80055e2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a08      	ldr	r2, [pc, #32]	@ (80055f4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80055d4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2205      	movs	r2, #5
 80055e0:	601a      	str	r2, [r3, #0]
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	fe010000 	.word	0xfe010000
 80055f4:	f8010000 	.word	0xf8010000

080055f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b089      	sub	sp, #36	@ 0x24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800560a:	e1ba      	b.n	8005982 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	2101      	movs	r1, #1
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	fa01 f303 	lsl.w	r3, r1, r3
 8005618:	4013      	ands	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 81aa 	beq.w	800597c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a55      	ldr	r2, [pc, #340]	@ (8005780 <HAL_GPIO_Init+0x188>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d15d      	bne.n	80056ec <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005636:	2201      	movs	r2, #1
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	43db      	mvns	r3, r3
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	4013      	ands	r3, r2
 8005644:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f003 0201 	and.w	r2, r3, #1
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	4313      	orrs	r3, r2
 8005658:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005660:	4a48      	ldr	r2, [pc, #288]	@ (8005784 <HAL_GPIO_Init+0x18c>)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005668:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800566a:	4a46      	ldr	r2, [pc, #280]	@ (8005784 <HAL_GPIO_Init+0x18c>)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4413      	add	r3, r2
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	08da      	lsrs	r2, r3, #3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3208      	adds	r2, #8
 800567e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005682:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	220f      	movs	r2, #15
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43db      	mvns	r3, r3
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	4013      	ands	r3, r2
 8005698:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	220b      	movs	r2, #11
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	08da      	lsrs	r2, r3, #3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3208      	adds	r2, #8
 80056b6:	69f9      	ldr	r1, [r7, #28]
 80056b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	2203      	movs	r2, #3
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	2202      	movs	r2, #2
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	e067      	b.n	80057bc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d003      	beq.n	80056fc <HAL_GPIO_Init+0x104>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b12      	cmp	r3, #18
 80056fa:	d145      	bne.n	8005788 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	08da      	lsrs	r2, r3, #3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3208      	adds	r2, #8
 8005704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005708:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	220f      	movs	r2, #15
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	4013      	ands	r3, r2
 800571e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 020f 	and.w	r2, r3, #15
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	4313      	orrs	r3, r2
 8005738:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	08da      	lsrs	r2, r3, #3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3208      	adds	r2, #8
 8005742:	69f9      	ldr	r1, [r7, #28]
 8005744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	2203      	movs	r2, #3
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	43db      	mvns	r3, r3
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	4013      	ands	r3, r2
 800575e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f003 0203 	and.w	r2, r3, #3
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	4313      	orrs	r3, r2
 8005774:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	e01e      	b.n	80057bc <HAL_GPIO_Init+0x1c4>
 800577e:	bf00      	nop
 8005780:	46020000 	.word	0x46020000
 8005784:	08009014 	.word	0x08009014
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	2203      	movs	r2, #3
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	43db      	mvns	r3, r3
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	4013      	ands	r3, r2
 800579e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 0203 	and.w	r2, r3, #3
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d00b      	beq.n	80057dc <HAL_GPIO_Init+0x1e4>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d007      	beq.n	80057dc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057d0:	2b11      	cmp	r3, #17
 80057d2:	d003      	beq.n	80057dc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b12      	cmp	r3, #18
 80057da:	d130      	bne.n	800583e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	2203      	movs	r2, #3
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	4313      	orrs	r3, r2
 8005804:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005812:	2201      	movs	r2, #1
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	43db      	mvns	r3, r3
 800581c:	69fa      	ldr	r2, [r7, #28]
 800581e:	4013      	ands	r3, r2
 8005820:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 0201 	and.w	r2, r3, #1
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	4313      	orrs	r3, r2
 8005836:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b03      	cmp	r3, #3
 8005844:	d017      	beq.n	8005876 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	2203      	movs	r2, #3
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	4013      	ands	r3, r2
 800585c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	4313      	orrs	r3, r2
 800586e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d07c      	beq.n	800597c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005882:	4a47      	ldr	r2, [pc, #284]	@ (80059a0 <HAL_GPIO_Init+0x3a8>)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	3318      	adds	r3, #24
 800588a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	220f      	movs	r2, #15
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	0a9a      	lsrs	r2, r3, #10
 80058aa:	4b3e      	ldr	r3, [pc, #248]	@ (80059a4 <HAL_GPIO_Init+0x3ac>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	f002 0203 	and.w	r2, r2, #3
 80058b4:	00d2      	lsls	r2, r2, #3
 80058b6:	4093      	lsls	r3, r2
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80058be:	4938      	ldr	r1, [pc, #224]	@ (80059a0 <HAL_GPIO_Init+0x3a8>)
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	089b      	lsrs	r3, r3, #2
 80058c4:	3318      	adds	r3, #24
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80058cc:	4b34      	ldr	r3, [pc, #208]	@ (80059a0 <HAL_GPIO_Init+0x3a8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	43db      	mvns	r3, r3
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	4013      	ands	r3, r2
 80058da:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80058f0:	4a2b      	ldr	r2, [pc, #172]	@ (80059a0 <HAL_GPIO_Init+0x3a8>)
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80058f6:	4b2a      	ldr	r3, [pc, #168]	@ (80059a0 <HAL_GPIO_Init+0x3a8>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	43db      	mvns	r3, r3
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	4013      	ands	r3, r2
 8005904:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800591a:	4a21      	ldr	r2, [pc, #132]	@ (80059a0 <HAL_GPIO_Init+0x3a8>)
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005920:	4b1f      	ldr	r3, [pc, #124]	@ (80059a0 <HAL_GPIO_Init+0x3a8>)
 8005922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005926:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	43db      	mvns	r3, r3
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	4013      	ands	r3, r2
 8005930:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005946:	4a16      	ldr	r2, [pc, #88]	@ (80059a0 <HAL_GPIO_Init+0x3a8>)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800594e:	4b14      	ldr	r3, [pc, #80]	@ (80059a0 <HAL_GPIO_Init+0x3a8>)
 8005950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005954:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	43db      	mvns	r3, r3
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	4013      	ands	r3, r2
 800595e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005974:	4a0a      	ldr	r2, [pc, #40]	@ (80059a0 <HAL_GPIO_Init+0x3a8>)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3301      	adds	r3, #1
 8005980:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	f47f ae3d 	bne.w	800560c <HAL_GPIO_Init+0x14>
  }
}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	3724      	adds	r7, #36	@ 0x24
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	46022000 	.word	0x46022000
 80059a4:	002f7f7f 	.word	0x002f7f7f

080059a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	807b      	strh	r3, [r7, #2]
 80059b4:	4613      	mov	r3, r2
 80059b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059b8:	787b      	ldrb	r3, [r7, #1]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059be:	887a      	ldrh	r2, [r7, #2]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80059c4:	e002      	b.n	80059cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80059c6:	887a      	ldrh	r2, [r7, #2]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80059e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
 80059f4:	e007      	b.n	8005a06 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80059f6:	4b07      	ldr	r3, [pc, #28]	@ (8005a14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 0204 	bic.w	r2, r3, #4
 80059fe:	4905      	ldr	r1, [pc, #20]	@ (8005a14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40030400 	.word	0x40030400

08005a18 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005a1c:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <HAL_ICACHE_Enable+0x1c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a04      	ldr	r2, [pc, #16]	@ (8005a34 <HAL_ICACHE_Enable+0x1c>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	40030400 	.word	0x40030400

08005a38 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005a40:	4b39      	ldr	r3, [pc, #228]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a48:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d10b      	bne.n	8005a6a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a58:	d905      	bls.n	8005a66 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a5a:	4b33      	ldr	r3, [pc, #204]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	4a32      	ldr	r2, [pc, #200]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a64:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e057      	b.n	8005b1a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a70:	d90a      	bls.n	8005a88 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005a72:	4b2d      	ldr	r3, [pc, #180]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a84:	60d3      	str	r3, [r2, #12]
 8005a86:	e007      	b.n	8005a98 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005a88:	4b27      	ldr	r3, [pc, #156]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005a90:	4925      	ldr	r1, [pc, #148]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005a98:	4b24      	ldr	r3, [pc, #144]	@ (8005b2c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a24      	ldr	r2, [pc, #144]	@ (8005b30 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	2232      	movs	r2, #50	@ 0x32
 8005aa6:	fb02 f303 	mul.w	r3, r2, r3
 8005aaa:	4a21      	ldr	r2, [pc, #132]	@ (8005b30 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	099b      	lsrs	r3, r3, #6
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005ab6:	e002      	b.n	8005abe <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005abe:	4b1a      	ldr	r3, [pc, #104]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f3      	bne.n	8005ab8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01b      	beq.n	8005b0e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005ad6:	4b15      	ldr	r3, [pc, #84]	@ (8005b2c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a15      	ldr	r2, [pc, #84]	@ (8005b30 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005adc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae0:	099b      	lsrs	r3, r3, #6
 8005ae2:	2232      	movs	r2, #50	@ 0x32
 8005ae4:	fb02 f303 	mul.w	r3, r2, r3
 8005ae8:	4a11      	ldr	r2, [pc, #68]	@ (8005b30 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	099b      	lsrs	r3, r3, #6
 8005af0:	3301      	adds	r3, #1
 8005af2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005af4:	e002      	b.n	8005afc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005afc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f3      	bne.n	8005af6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e000      	b.n	8005b1a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	46020800 	.word	0x46020800
 8005b2c:	20000000 	.word	0x20000000
 8005b30:	10624dd3 	.word	0x10624dd3

08005b34 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005b38:	4b04      	ldr	r3, [pc, #16]	@ (8005b4c <HAL_PWREx_GetVoltageRange+0x18>)
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	46020800 	.word	0x46020800

08005b50 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8005b54:	4b05      	ldr	r3, [pc, #20]	@ (8005b6c <HAL_PWREx_EnableVddA+0x1c>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	4a04      	ldr	r2, [pc, #16]	@ (8005b6c <HAL_PWREx_EnableVddA+0x1c>)
 8005b5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b5e:	6113      	str	r3, [r2, #16]
}
 8005b60:	bf00      	nop
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	46020800 	.word	0x46020800

08005b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08e      	sub	sp, #56	@ 0x38
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f000 bec8 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b8a:	4b99      	ldr	r3, [pc, #612]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b94:	4b96      	ldr	r3, [pc, #600]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 816c 	beq.w	8005e84 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x52>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb4:	2b0c      	cmp	r3, #12
 8005bb6:	f040 80de 	bne.w	8005d76 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	f040 80da 	bne.w	8005d76 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d102      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f000 bea5 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bd4:	4b86      	ldr	r3, [pc, #536]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <HAL_RCC_OscConfig+0x7a>
 8005be0:	4b83      	ldr	r3, [pc, #524]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005be8:	e005      	b.n	8005bf6 <HAL_RCC_OscConfig+0x86>
 8005bea:	4b81      	ldr	r3, [pc, #516]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d255      	bcs.n	8005ca6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 f9a1 	bl	8006f4c <RCC_SetFlashLatencyFromMSIRange>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f000 be82 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005c16:	4b76      	ldr	r3, [pc, #472]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	4a75      	ldr	r2, [pc, #468]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c20:	6093      	str	r3, [r2, #8]
 8005c22:	4b73      	ldr	r3, [pc, #460]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	4970      	ldr	r1, [pc, #448]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c38:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005c3c:	d309      	bcc.n	8005c52 <HAL_RCC_OscConfig+0xe2>
 8005c3e:	4b6c      	ldr	r3, [pc, #432]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f023 021f 	bic.w	r2, r3, #31
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	4969      	ldr	r1, [pc, #420]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60cb      	str	r3, [r1, #12]
 8005c50:	e07e      	b.n	8005d50 <HAL_RCC_OscConfig+0x1e0>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da0a      	bge.n	8005c70 <HAL_RCC_OscConfig+0x100>
 8005c5a:	4b65      	ldr	r3, [pc, #404]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	015b      	lsls	r3, r3, #5
 8005c68:	4961      	ldr	r1, [pc, #388]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60cb      	str	r3, [r1, #12]
 8005c6e:	e06f      	b.n	8005d50 <HAL_RCC_OscConfig+0x1e0>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c78:	d30a      	bcc.n	8005c90 <HAL_RCC_OscConfig+0x120>
 8005c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	029b      	lsls	r3, r3, #10
 8005c88:	4959      	ldr	r1, [pc, #356]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60cb      	str	r3, [r1, #12]
 8005c8e:	e05f      	b.n	8005d50 <HAL_RCC_OscConfig+0x1e0>
 8005c90:	4b57      	ldr	r3, [pc, #348]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	03db      	lsls	r3, r3, #15
 8005c9e:	4954      	ldr	r1, [pc, #336]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60cb      	str	r3, [r1, #12]
 8005ca4:	e054      	b.n	8005d50 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005ca6:	4b52      	ldr	r3, [pc, #328]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	4a51      	ldr	r2, [pc, #324]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005cac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cb0:	6093      	str	r3, [r2, #8]
 8005cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbe:	494c      	ldr	r1, [pc, #304]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005ccc:	d309      	bcc.n	8005ce2 <HAL_RCC_OscConfig+0x172>
 8005cce:	4b48      	ldr	r3, [pc, #288]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f023 021f 	bic.w	r2, r3, #31
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	4945      	ldr	r1, [pc, #276]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60cb      	str	r3, [r1, #12]
 8005ce0:	e028      	b.n	8005d34 <HAL_RCC_OscConfig+0x1c4>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	da0a      	bge.n	8005d00 <HAL_RCC_OscConfig+0x190>
 8005cea:	4b41      	ldr	r3, [pc, #260]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	015b      	lsls	r3, r3, #5
 8005cf8:	493d      	ldr	r1, [pc, #244]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60cb      	str	r3, [r1, #12]
 8005cfe:	e019      	b.n	8005d34 <HAL_RCC_OscConfig+0x1c4>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d08:	d30a      	bcc.n	8005d20 <HAL_RCC_OscConfig+0x1b0>
 8005d0a:	4b39      	ldr	r3, [pc, #228]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	4935      	ldr	r1, [pc, #212]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60cb      	str	r3, [r1, #12]
 8005d1e:	e009      	b.n	8005d34 <HAL_RCC_OscConfig+0x1c4>
 8005d20:	4b33      	ldr	r3, [pc, #204]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	03db      	lsls	r3, r3, #15
 8005d2e:	4930      	ldr	r1, [pc, #192]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 f904 	bl	8006f4c <RCC_SetFlashLatencyFromMSIRange>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f000 bde5 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005d50:	f001 f8e2 	bl	8006f18 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d54:	4b27      	ldr	r3, [pc, #156]	@ (8005df4 <HAL_RCC_OscConfig+0x284>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fb ff55 	bl	8001c08 <HAL_InitTick>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 808a 	beq.w	8005e82 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d72:	f000 bdd2 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d066      	beq.n	8005e4c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1b      	ldr	r2, [pc, #108]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005d84:	f043 0301 	orr.w	r3, r3, #1
 8005d88:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005d8a:	f7fb ffc7 	bl	8001d1c <HAL_GetTick>
 8005d8e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005d90:	e009      	b.n	8005da6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d92:	f7fb ffc3 	bl	8001d1c <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d902      	bls.n	8005da6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	f000 bdba 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005da6:	4b12      	ldr	r3, [pc, #72]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0ef      	beq.n	8005d92 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005db2:	4b0f      	ldr	r3, [pc, #60]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	4a0e      	ldr	r2, [pc, #56]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005db8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005dbc:	6093      	str	r3, [r2, #8]
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dca:	4909      	ldr	r1, [pc, #36]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005dd8:	d30e      	bcc.n	8005df8 <HAL_RCC_OscConfig+0x288>
 8005dda:	4b05      	ldr	r3, [pc, #20]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f023 021f 	bic.w	r2, r3, #31
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	4902      	ldr	r1, [pc, #8]	@ (8005df0 <HAL_RCC_OscConfig+0x280>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60cb      	str	r3, [r1, #12]
 8005dec:	e04a      	b.n	8005e84 <HAL_RCC_OscConfig+0x314>
 8005dee:	bf00      	nop
 8005df0:	46020c00 	.word	0x46020c00
 8005df4:	20000004 	.word	0x20000004
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	da0a      	bge.n	8005e16 <HAL_RCC_OscConfig+0x2a6>
 8005e00:	4b98      	ldr	r3, [pc, #608]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	015b      	lsls	r3, r3, #5
 8005e0e:	4995      	ldr	r1, [pc, #596]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60cb      	str	r3, [r1, #12]
 8005e14:	e036      	b.n	8005e84 <HAL_RCC_OscConfig+0x314>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1e:	d30a      	bcc.n	8005e36 <HAL_RCC_OscConfig+0x2c6>
 8005e20:	4b90      	ldr	r3, [pc, #576]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	029b      	lsls	r3, r3, #10
 8005e2e:	498d      	ldr	r1, [pc, #564]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60cb      	str	r3, [r1, #12]
 8005e34:	e026      	b.n	8005e84 <HAL_RCC_OscConfig+0x314>
 8005e36:	4b8b      	ldr	r3, [pc, #556]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	03db      	lsls	r3, r3, #15
 8005e44:	4987      	ldr	r1, [pc, #540]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60cb      	str	r3, [r1, #12]
 8005e4a:	e01b      	b.n	8005e84 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005e4c:	4b85      	ldr	r3, [pc, #532]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a84      	ldr	r2, [pc, #528]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005e58:	f7fb ff60 	bl	8001d1c <HAL_GetTick>
 8005e5c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005e5e:	e009      	b.n	8005e74 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e60:	f7fb ff5c 	bl	8001d1c <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d902      	bls.n	8005e74 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	f000 bd53 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005e74:	4b7b      	ldr	r3, [pc, #492]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1ef      	bne.n	8005e60 <HAL_RCC_OscConfig+0x2f0>
 8005e80:	e000      	b.n	8005e84 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 808b 	beq.w	8005fa8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x334>
 8005e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9a:	2b0c      	cmp	r3, #12
 8005e9c:	d109      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d106      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d17d      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f000 bd34 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eba:	d106      	bne.n	8005eca <HAL_RCC_OscConfig+0x35a>
 8005ebc:	4b69      	ldr	r3, [pc, #420]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a68      	ldr	r2, [pc, #416]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	e041      	b.n	8005f4e <HAL_RCC_OscConfig+0x3de>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ed2:	d112      	bne.n	8005efa <HAL_RCC_OscConfig+0x38a>
 8005ed4:	4b63      	ldr	r3, [pc, #396]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a62      	ldr	r2, [pc, #392]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005eda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	4b60      	ldr	r3, [pc, #384]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005ee6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	4b5d      	ldr	r3, [pc, #372]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a5c      	ldr	r2, [pc, #368]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	e029      	b.n	8005f4e <HAL_RCC_OscConfig+0x3de>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005f02:	d112      	bne.n	8005f2a <HAL_RCC_OscConfig+0x3ba>
 8005f04:	4b57      	ldr	r3, [pc, #348]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a56      	ldr	r2, [pc, #344]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	4b54      	ldr	r3, [pc, #336]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a53      	ldr	r2, [pc, #332]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	4b51      	ldr	r3, [pc, #324]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a50      	ldr	r2, [pc, #320]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	e011      	b.n	8005f4e <HAL_RCC_OscConfig+0x3de>
 8005f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	4b4b      	ldr	r3, [pc, #300]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	4b48      	ldr	r3, [pc, #288]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a47      	ldr	r2, [pc, #284]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d014      	beq.n	8005f80 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005f56:	f7fb fee1 	bl	8001d1c <HAL_GetTick>
 8005f5a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f5c:	e009      	b.n	8005f72 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f5e:	f7fb fedd 	bl	8001d1c <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b64      	cmp	r3, #100	@ 0x64
 8005f6a:	d902      	bls.n	8005f72 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	f000 bcd4 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f72:	4b3c      	ldr	r3, [pc, #240]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0ef      	beq.n	8005f5e <HAL_RCC_OscConfig+0x3ee>
 8005f7e:	e013      	b.n	8005fa8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005f80:	f7fb fecc 	bl	8001d1c <HAL_GetTick>
 8005f84:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f86:	e009      	b.n	8005f9c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fb fec8 	bl	8001d1c <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	@ 0x64
 8005f94:	d902      	bls.n	8005f9c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	f000 bcbf 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f9c:	4b31      	ldr	r3, [pc, #196]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1ef      	bne.n	8005f88 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d05f      	beq.n	8006074 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d005      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x456>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	2b0c      	cmp	r3, #12
 8005fbe:	d114      	bne.n	8005fea <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d111      	bne.n	8005fea <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	f000 bca3 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005fd4:	4b23      	ldr	r3, [pc, #140]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	4920      	ldr	r1, [pc, #128]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005fe8:	e044      	b.n	8006074 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d024      	beq.n	800603c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8005ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ffc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005ffe:	f7fb fe8d 	bl	8001d1c <HAL_GetTick>
 8006002:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006004:	e009      	b.n	800601a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006006:	f7fb fe89 	bl	8001d1c <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d902      	bls.n	800601a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	f000 bc80 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800601a:	4b12      	ldr	r3, [pc, #72]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ef      	beq.n	8006006 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006026:	4b0f      	ldr	r3, [pc, #60]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	490b      	ldr	r1, [pc, #44]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8006036:	4313      	orrs	r3, r2
 8006038:	610b      	str	r3, [r1, #16]
 800603a:	e01b      	b.n	8006074 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800603c:	4b09      	ldr	r3, [pc, #36]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a08      	ldr	r2, [pc, #32]	@ (8006064 <HAL_RCC_OscConfig+0x4f4>)
 8006042:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006046:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006048:	f7fb fe68 	bl	8001d1c <HAL_GetTick>
 800604c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800604e:	e00b      	b.n	8006068 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006050:	f7fb fe64 	bl	8001d1c <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d904      	bls.n	8006068 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	f000 bc5b 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
 8006064:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006068:	4baf      	ldr	r3, [pc, #700]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1ed      	bne.n	8006050 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80c8 	beq.w	8006212 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006082:	2300      	movs	r3, #0
 8006084:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006088:	4ba7      	ldr	r3, [pc, #668]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 800608a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d111      	bne.n	80060ba <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006096:	4ba4      	ldr	r3, [pc, #656]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800609c:	4aa2      	ldr	r2, [pc, #648]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 800609e:	f043 0304 	orr.w	r3, r3, #4
 80060a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80060a6:	4ba0      	ldr	r3, [pc, #640]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80060a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80060ba:	4b9c      	ldr	r3, [pc, #624]	@ (800632c <HAL_RCC_OscConfig+0x7bc>)
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d119      	bne.n	80060fa <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80060c6:	4b99      	ldr	r3, [pc, #612]	@ (800632c <HAL_RCC_OscConfig+0x7bc>)
 80060c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ca:	4a98      	ldr	r2, [pc, #608]	@ (800632c <HAL_RCC_OscConfig+0x7bc>)
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d2:	f7fb fe23 	bl	8001d1c <HAL_GetTick>
 80060d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80060d8:	e009      	b.n	80060ee <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060da:	f7fb fe1f 	bl	8001d1c <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d902      	bls.n	80060ee <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	f000 bc16 	b.w	800691a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80060ee:	4b8f      	ldr	r3, [pc, #572]	@ (800632c <HAL_RCC_OscConfig+0x7bc>)
 80060f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0ef      	beq.n	80060da <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d05f      	beq.n	80061c2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006102:	4b89      	ldr	r3, [pc, #548]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006108:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006114:	429a      	cmp	r2, r3
 8006116:	d037      	beq.n	8006188 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d006      	beq.n	8006130 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e3f4      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01b      	beq.n	8006172 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800613a:	4b7b      	ldr	r3, [pc, #492]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 800613c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006140:	4a79      	ldr	r2, [pc, #484]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006142:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006146:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800614a:	f7fb fde7 	bl	8001d1c <HAL_GetTick>
 800614e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006150:	e008      	b.n	8006164 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006152:	f7fb fde3 	bl	8001d1c <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b05      	cmp	r3, #5
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e3da      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006164:	4b70      	ldr	r3, [pc, #448]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800616a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1ef      	bne.n	8006152 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006172:	4b6d      	ldr	r3, [pc, #436]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006178:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	4969      	ldr	r1, [pc, #420]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006188:	4b67      	ldr	r3, [pc, #412]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 800618a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800618e:	4a66      	ldr	r2, [pc, #408]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006190:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006194:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006198:	f7fb fdc0 	bl	8001d1c <HAL_GetTick>
 800619c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a0:	f7fb fdbc 	bl	8001d1c <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b05      	cmp	r3, #5
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e3b3      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80061b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80061b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0ef      	beq.n	80061a0 <HAL_RCC_OscConfig+0x630>
 80061c0:	e01b      	b.n	80061fa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80061c2:	4b59      	ldr	r3, [pc, #356]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80061c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061c8:	4a57      	ldr	r2, [pc, #348]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80061ca:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80061ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80061d2:	f7fb fda3 	bl	8001d1c <HAL_GetTick>
 80061d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061da:	f7fb fd9f 	bl	8001d1c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b05      	cmp	r3, #5
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e396      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80061ec:	4b4e      	ldr	r3, [pc, #312]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80061ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ef      	bne.n	80061da <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061fa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d107      	bne.n	8006212 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006202:	4b49      	ldr	r3, [pc, #292]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006208:	4a47      	ldr	r2, [pc, #284]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 800620a:	f023 0304 	bic.w	r3, r3, #4
 800620e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 8111 	beq.w	8006442 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006220:	2300      	movs	r3, #0
 8006222:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006226:	4b40      	ldr	r3, [pc, #256]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d111      	bne.n	8006258 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006234:	4b3c      	ldr	r3, [pc, #240]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800623a:	4a3b      	ldr	r2, [pc, #236]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 800623c:	f043 0304 	orr.w	r3, r3, #4
 8006240:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006244:	4b38      	ldr	r3, [pc, #224]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 8006246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800624a:	f003 0304 	and.w	r3, r3, #4
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006258:	4b34      	ldr	r3, [pc, #208]	@ (800632c <HAL_RCC_OscConfig+0x7bc>)
 800625a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d118      	bne.n	8006296 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006264:	4b31      	ldr	r3, [pc, #196]	@ (800632c <HAL_RCC_OscConfig+0x7bc>)
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	4a30      	ldr	r2, [pc, #192]	@ (800632c <HAL_RCC_OscConfig+0x7bc>)
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006270:	f7fb fd54 	bl	8001d1c <HAL_GetTick>
 8006274:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006278:	f7fb fd50 	bl	8001d1c <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e347      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800628a:	4b28      	ldr	r3, [pc, #160]	@ (800632c <HAL_RCC_OscConfig+0x7bc>)
 800628c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01f      	beq.n	80062e2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d010      	beq.n	80062d0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80062ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80062b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80062b6:	f043 0304 	orr.w	r3, r3, #4
 80062ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062be:	4b1a      	ldr	r3, [pc, #104]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80062c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062c4:	4a18      	ldr	r2, [pc, #96]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062ce:	e018      	b.n	8006302 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062d0:	4b15      	ldr	r3, [pc, #84]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80062d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062d6:	4a14      	ldr	r2, [pc, #80]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062e0:	e00f      	b.n	8006302 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062e2:	4b11      	ldr	r3, [pc, #68]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80062e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062e8:	4a0f      	ldr	r2, [pc, #60]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80062ea:	f023 0301 	bic.w	r3, r3, #1
 80062ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80062f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062f8:	4a0b      	ldr	r2, [pc, #44]	@ (8006328 <HAL_RCC_OscConfig+0x7b8>)
 80062fa:	f023 0304 	bic.w	r3, r3, #4
 80062fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d057      	beq.n	80063ba <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800630a:	f7fb fd07 	bl	8001d1c <HAL_GetTick>
 800630e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006310:	e00e      	b.n	8006330 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006312:	f7fb fd03 	bl	8001d1c <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006320:	4293      	cmp	r3, r2
 8006322:	d905      	bls.n	8006330 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e2f8      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
 8006328:	46020c00 	.word	0x46020c00
 800632c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006330:	4b9c      	ldr	r3, [pc, #624]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0e9      	beq.n	8006312 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01b      	beq.n	8006382 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800634a:	4b96      	ldr	r3, [pc, #600]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800634c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006350:	4a94      	ldr	r2, [pc, #592]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006356:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800635a:	e00a      	b.n	8006372 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635c:	f7fb fcde 	bl	8001d1c <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800636a:	4293      	cmp	r3, r2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e2d3      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006372:	4b8c      	ldr	r3, [pc, #560]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0ed      	beq.n	800635c <HAL_RCC_OscConfig+0x7ec>
 8006380:	e053      	b.n	800642a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006382:	4b88      	ldr	r3, [pc, #544]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006388:	4a86      	ldr	r2, [pc, #536]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800638a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800638e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006392:	e00a      	b.n	80063aa <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006394:	f7fb fcc2 	bl	8001d1c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e2b7      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80063aa:	4b7e      	ldr	r3, [pc, #504]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 80063ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1ed      	bne.n	8006394 <HAL_RCC_OscConfig+0x824>
 80063b8:	e037      	b.n	800642a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80063ba:	f7fb fcaf 	bl	8001d1c <HAL_GetTick>
 80063be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063c0:	e00a      	b.n	80063d8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c2:	f7fb fcab 	bl	8001d1c <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e2a0      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063d8:	4b72      	ldr	r3, [pc, #456]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 80063da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1ed      	bne.n	80063c2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80063e6:	4b6f      	ldr	r3, [pc, #444]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 80063e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01a      	beq.n	800642a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80063f4:	4b6b      	ldr	r3, [pc, #428]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 80063f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063fa:	4a6a      	ldr	r2, [pc, #424]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 80063fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006400:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006404:	e00a      	b.n	800641c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006406:	f7fb fc89 	bl	8001d1c <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006414:	4293      	cmp	r3, r2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e27e      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800641c:	4b61      	ldr	r3, [pc, #388]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800641e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1ed      	bne.n	8006406 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800642a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800642e:	2b01      	cmp	r3, #1
 8006430:	d107      	bne.n	8006442 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006432:	4b5c      	ldr	r3, [pc, #368]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006438:	4a5a      	ldr	r2, [pc, #360]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800643a:	f023 0304 	bic.w	r3, r3, #4
 800643e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d036      	beq.n	80064bc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d019      	beq.n	800648a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006456:	4b53      	ldr	r3, [pc, #332]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a52      	ldr	r2, [pc, #328]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800645c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006460:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006462:	f7fb fc5b 	bl	8001d1c <HAL_GetTick>
 8006466:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800646a:	f7fb fc57 	bl	8001d1c <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e24e      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800647c:	4b49      	ldr	r3, [pc, #292]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f0      	beq.n	800646a <HAL_RCC_OscConfig+0x8fa>
 8006488:	e018      	b.n	80064bc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800648a:	4b46      	ldr	r3, [pc, #280]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a45      	ldr	r2, [pc, #276]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006490:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006494:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006496:	f7fb fc41 	bl	8001d1c <HAL_GetTick>
 800649a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800649c:	e008      	b.n	80064b0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800649e:	f7fb fc3d 	bl	8001d1c <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e234      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80064b0:	4b3c      	ldr	r3, [pc, #240]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f0      	bne.n	800649e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d036      	beq.n	8006536 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d019      	beq.n	8006504 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80064d0:	4b34      	ldr	r3, [pc, #208]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a33      	ldr	r2, [pc, #204]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 80064d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80064dc:	f7fb fc1e 	bl	8001d1c <HAL_GetTick>
 80064e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80064e4:	f7fb fc1a 	bl	8001d1c <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e211      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80064f6:	4b2b      	ldr	r3, [pc, #172]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f0      	beq.n	80064e4 <HAL_RCC_OscConfig+0x974>
 8006502:	e018      	b.n	8006536 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006504:	4b27      	ldr	r3, [pc, #156]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a26      	ldr	r2, [pc, #152]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800650a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800650e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006510:	f7fb fc04 	bl	8001d1c <HAL_GetTick>
 8006514:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006518:	f7fb fc00 	bl	8001d1c <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e1f7      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800652a:	4b1e      	ldr	r3, [pc, #120]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d07f      	beq.n	8006642 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006546:	2b00      	cmp	r3, #0
 8006548:	d062      	beq.n	8006610 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800654a:	4b16      	ldr	r3, [pc, #88]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	4a15      	ldr	r2, [pc, #84]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006550:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006554:	6093      	str	r3, [r2, #8]
 8006556:	4b13      	ldr	r3, [pc, #76]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006562:	4910      	ldr	r1, [pc, #64]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006564:	4313      	orrs	r3, r2
 8006566:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006570:	d309      	bcc.n	8006586 <HAL_RCC_OscConfig+0xa16>
 8006572:	4b0c      	ldr	r3, [pc, #48]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f023 021f 	bic.w	r2, r3, #31
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	4909      	ldr	r1, [pc, #36]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006580:	4313      	orrs	r3, r2
 8006582:	60cb      	str	r3, [r1, #12]
 8006584:	e02a      	b.n	80065dc <HAL_RCC_OscConfig+0xa6c>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	da0c      	bge.n	80065a8 <HAL_RCC_OscConfig+0xa38>
 800658e:	4b05      	ldr	r3, [pc, #20]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	015b      	lsls	r3, r3, #5
 800659c:	4901      	ldr	r1, [pc, #4]	@ (80065a4 <HAL_RCC_OscConfig+0xa34>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	60cb      	str	r3, [r1, #12]
 80065a2:	e01b      	b.n	80065dc <HAL_RCC_OscConfig+0xa6c>
 80065a4:	46020c00 	.word	0x46020c00
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b0:	d30a      	bcc.n	80065c8 <HAL_RCC_OscConfig+0xa58>
 80065b2:	4ba1      	ldr	r3, [pc, #644]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	029b      	lsls	r3, r3, #10
 80065c0:	499d      	ldr	r1, [pc, #628]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60cb      	str	r3, [r1, #12]
 80065c6:	e009      	b.n	80065dc <HAL_RCC_OscConfig+0xa6c>
 80065c8:	4b9b      	ldr	r3, [pc, #620]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	03db      	lsls	r3, r3, #15
 80065d6:	4998      	ldr	r1, [pc, #608]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80065dc:	4b96      	ldr	r3, [pc, #600]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a95      	ldr	r2, [pc, #596]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80065e2:	f043 0310 	orr.w	r3, r3, #16
 80065e6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80065e8:	f7fb fb98 	bl	8001d1c <HAL_GetTick>
 80065ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80065f0:	f7fb fb94 	bl	8001d1c <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e18b      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006602:	4b8d      	ldr	r3, [pc, #564]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0f0      	beq.n	80065f0 <HAL_RCC_OscConfig+0xa80>
 800660e:	e018      	b.n	8006642 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006610:	4b89      	ldr	r3, [pc, #548]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a88      	ldr	r2, [pc, #544]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006616:	f023 0310 	bic.w	r3, r3, #16
 800661a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800661c:	f7fb fb7e 	bl	8001d1c <HAL_GetTick>
 8006620:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006624:	f7fb fb7a 	bl	8001d1c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e171      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006636:	4b80      	ldr	r3, [pc, #512]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f0      	bne.n	8006624 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 8166 	beq.w	8006918 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800664c:	2300      	movs	r3, #0
 800664e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006652:	4b79      	ldr	r3, [pc, #484]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f003 030c 	and.w	r3, r3, #12
 800665a:	2b0c      	cmp	r3, #12
 800665c:	f000 80f2 	beq.w	8006844 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006664:	2b02      	cmp	r3, #2
 8006666:	f040 80c5 	bne.w	80067f4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800666a:	4b73      	ldr	r3, [pc, #460]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a72      	ldr	r2, [pc, #456]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006670:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006674:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006676:	f7fb fb51 	bl	8001d1c <HAL_GetTick>
 800667a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800667e:	f7fb fb4d 	bl	8001d1c <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e144      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006690:	4b69      	ldr	r3, [pc, #420]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f0      	bne.n	800667e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800669c:	4b66      	ldr	r3, [pc, #408]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 800669e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d111      	bne.n	80066ce <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80066aa:	4b63      	ldr	r3, [pc, #396]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80066ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066b0:	4a61      	ldr	r2, [pc, #388]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80066b2:	f043 0304 	orr.w	r3, r3, #4
 80066b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80066ba:	4b5f      	ldr	r3, [pc, #380]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80066bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80066ce:	4b5b      	ldr	r3, [pc, #364]	@ (800683c <HAL_RCC_OscConfig+0xccc>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066da:	d102      	bne.n	80066e2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80066e2:	4b56      	ldr	r3, [pc, #344]	@ (800683c <HAL_RCC_OscConfig+0xccc>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	4a55      	ldr	r2, [pc, #340]	@ (800683c <HAL_RCC_OscConfig+0xccc>)
 80066e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066ec:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80066ee:	4b52      	ldr	r3, [pc, #328]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80066f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006702:	3a01      	subs	r2, #1
 8006704:	0212      	lsls	r2, r2, #8
 8006706:	4311      	orrs	r1, r2
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800670c:	430a      	orrs	r2, r1
 800670e:	494a      	ldr	r1, [pc, #296]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006710:	4313      	orrs	r3, r2
 8006712:	628b      	str	r3, [r1, #40]	@ 0x28
 8006714:	4b48      	ldr	r3, [pc, #288]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006718:	4b49      	ldr	r3, [pc, #292]	@ (8006840 <HAL_RCC_OscConfig+0xcd0>)
 800671a:	4013      	ands	r3, r2
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006720:	3a01      	subs	r2, #1
 8006722:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800672a:	3a01      	subs	r2, #1
 800672c:	0252      	lsls	r2, r2, #9
 800672e:	b292      	uxth	r2, r2
 8006730:	4311      	orrs	r1, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006736:	3a01      	subs	r2, #1
 8006738:	0412      	lsls	r2, r2, #16
 800673a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800673e:	4311      	orrs	r1, r2
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006744:	3a01      	subs	r2, #1
 8006746:	0612      	lsls	r2, r2, #24
 8006748:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800674c:	430a      	orrs	r2, r1
 800674e:	493a      	ldr	r1, [pc, #232]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006750:	4313      	orrs	r3, r2
 8006752:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006754:	4b38      	ldr	r3, [pc, #224]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006758:	4a37      	ldr	r2, [pc, #220]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 800675a:	f023 0310 	bic.w	r3, r3, #16
 800675e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006764:	4a34      	ldr	r2, [pc, #208]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800676a:	4b33      	ldr	r3, [pc, #204]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 800676c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676e:	4a32      	ldr	r2, [pc, #200]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006770:	f043 0310 	orr.w	r3, r3, #16
 8006774:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006776:	4b30      	ldr	r3, [pc, #192]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	f023 020c 	bic.w	r2, r3, #12
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006782:	492d      	ldr	r1, [pc, #180]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006784:	4313      	orrs	r3, r2
 8006786:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006788:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800678c:	2b01      	cmp	r3, #1
 800678e:	d105      	bne.n	800679c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006790:	4b2a      	ldr	r3, [pc, #168]	@ (800683c <HAL_RCC_OscConfig+0xccc>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	4a29      	ldr	r2, [pc, #164]	@ (800683c <HAL_RCC_OscConfig+0xccc>)
 8006796:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800679a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800679c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d107      	bne.n	80067b4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80067a4:	4b24      	ldr	r3, [pc, #144]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80067a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067aa:	4a23      	ldr	r2, [pc, #140]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80067ac:	f023 0304 	bic.w	r3, r3, #4
 80067b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80067b4:	4b20      	ldr	r3, [pc, #128]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80067ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80067c0:	f7fb faac 	bl	8001d1c <HAL_GetTick>
 80067c4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c8:	f7fb faa8 	bl	8001d1c <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e09f      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80067da:	4b17      	ldr	r3, [pc, #92]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0f0      	beq.n	80067c8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067e6:	4b14      	ldr	r3, [pc, #80]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80067e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ea:	4a13      	ldr	r2, [pc, #76]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80067ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067f0:	6293      	str	r3, [r2, #40]	@ 0x28
 80067f2:	e091      	b.n	8006918 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80067f4:	4b10      	ldr	r3, [pc, #64]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a0f      	ldr	r2, [pc, #60]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 80067fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006800:	f7fb fa8c 	bl	8001d1c <HAL_GetTick>
 8006804:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006808:	f7fb fa88 	bl	8001d1c <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e07f      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800681a:	4b07      	ldr	r3, [pc, #28]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f0      	bne.n	8006808 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006826:	4b04      	ldr	r3, [pc, #16]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 8006828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682a:	4a03      	ldr	r2, [pc, #12]	@ (8006838 <HAL_RCC_OscConfig+0xcc8>)
 800682c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006830:	f023 0303 	bic.w	r3, r3, #3
 8006834:	6293      	str	r3, [r2, #40]	@ 0x28
 8006836:	e06f      	b.n	8006918 <HAL_RCC_OscConfig+0xda8>
 8006838:	46020c00 	.word	0x46020c00
 800683c:	46020800 	.word	0x46020800
 8006840:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006844:	4b37      	ldr	r3, [pc, #220]	@ (8006924 <HAL_RCC_OscConfig+0xdb4>)
 8006846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006848:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800684a:	4b36      	ldr	r3, [pc, #216]	@ (8006924 <HAL_RCC_OscConfig+0xdb4>)
 800684c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	2b01      	cmp	r3, #1
 8006856:	d039      	beq.n	80068cc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f003 0203 	and.w	r2, r3, #3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006862:	429a      	cmp	r2, r3
 8006864:	d132      	bne.n	80068cc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	0a1b      	lsrs	r3, r3, #8
 800686a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006872:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006874:	429a      	cmp	r2, r3
 8006876:	d129      	bne.n	80068cc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006882:	429a      	cmp	r2, r3
 8006884:	d122      	bne.n	80068cc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006890:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006892:	429a      	cmp	r2, r3
 8006894:	d11a      	bne.n	80068cc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	0a5b      	lsrs	r3, r3, #9
 800689a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d111      	bne.n	80068cc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	0c1b      	lsrs	r3, r3, #16
 80068ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d108      	bne.n	80068cc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	0e1b      	lsrs	r3, r3, #24
 80068be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d001      	beq.n	80068d0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e024      	b.n	800691a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80068d0:	4b14      	ldr	r3, [pc, #80]	@ (8006924 <HAL_RCC_OscConfig+0xdb4>)
 80068d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d4:	08db      	lsrs	r3, r3, #3
 80068d6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80068de:	429a      	cmp	r2, r3
 80068e0:	d01a      	beq.n	8006918 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80068e2:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <HAL_RCC_OscConfig+0xdb4>)
 80068e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006924 <HAL_RCC_OscConfig+0xdb4>)
 80068e8:	f023 0310 	bic.w	r3, r3, #16
 80068ec:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ee:	f7fb fa15 	bl	8001d1c <HAL_GetTick>
 80068f2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80068f4:	bf00      	nop
 80068f6:	f7fb fa11 	bl	8001d1c <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	4293      	cmp	r3, r2
 8006900:	d0f9      	beq.n	80068f6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006906:	4a07      	ldr	r2, [pc, #28]	@ (8006924 <HAL_RCC_OscConfig+0xdb4>)
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800690c:	4b05      	ldr	r3, [pc, #20]	@ (8006924 <HAL_RCC_OscConfig+0xdb4>)
 800690e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006910:	4a04      	ldr	r2, [pc, #16]	@ (8006924 <HAL_RCC_OscConfig+0xdb4>)
 8006912:	f043 0310 	orr.w	r3, r3, #16
 8006916:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3738      	adds	r7, #56	@ 0x38
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	46020c00 	.word	0x46020c00

08006928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e1d9      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800693c:	4b9b      	ldr	r3, [pc, #620]	@ (8006bac <HAL_RCC_ClockConfig+0x284>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d910      	bls.n	800696c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694a:	4b98      	ldr	r3, [pc, #608]	@ (8006bac <HAL_RCC_ClockConfig+0x284>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f023 020f 	bic.w	r2, r3, #15
 8006952:	4996      	ldr	r1, [pc, #600]	@ (8006bac <HAL_RCC_ClockConfig+0x284>)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	4313      	orrs	r3, r2
 8006958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800695a:	4b94      	ldr	r3, [pc, #592]	@ (8006bac <HAL_RCC_ClockConfig+0x284>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d001      	beq.n	800696c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e1c1      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b00      	cmp	r3, #0
 8006976:	d010      	beq.n	800699a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695a      	ldr	r2, [r3, #20]
 800697c:	4b8c      	ldr	r3, [pc, #560]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006984:	429a      	cmp	r2, r3
 8006986:	d908      	bls.n	800699a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006988:	4b89      	ldr	r3, [pc, #548]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	4986      	ldr	r1, [pc, #536]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006996:	4313      	orrs	r3, r2
 8006998:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0308 	and.w	r3, r3, #8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d012      	beq.n	80069cc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	4b81      	ldr	r3, [pc, #516]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	091b      	lsrs	r3, r3, #4
 80069b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d909      	bls.n	80069cc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80069b8:	4b7d      	ldr	r3, [pc, #500]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	497a      	ldr	r1, [pc, #488]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d010      	beq.n	80069fa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	4b74      	ldr	r3, [pc, #464]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d908      	bls.n	80069fa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80069e8:	4b71      	ldr	r3, [pc, #452]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	496e      	ldr	r1, [pc, #440]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d010      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	4b69      	ldr	r3, [pc, #420]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d908      	bls.n	8006a28 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006a16:	4b66      	ldr	r3, [pc, #408]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 020f 	bic.w	r2, r3, #15
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	4963      	ldr	r1, [pc, #396]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80d2 	beq.w	8006bda <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d143      	bne.n	8006aca <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a42:	4b5b      	ldr	r3, [pc, #364]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d110      	bne.n	8006a72 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006a50:	4b57      	ldr	r3, [pc, #348]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a56:	4a56      	ldr	r2, [pc, #344]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006a58:	f043 0304 	orr.w	r3, r3, #4
 8006a5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006a60:	4b53      	ldr	r3, [pc, #332]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	60bb      	str	r3, [r7, #8]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006a72:	f7fb f953 	bl	8001d1c <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006a78:	4b4e      	ldr	r3, [pc, #312]	@ (8006bb4 <HAL_RCC_ClockConfig+0x28c>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00f      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006a84:	e008      	b.n	8006a98 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006a86:	f7fb f949 	bl	8001d1c <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e12b      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006a98:	4b46      	ldr	r3, [pc, #280]	@ (8006bb4 <HAL_RCC_ClockConfig+0x28c>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f0      	beq.n	8006a86 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d107      	bne.n	8006aba <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006aaa:	4b41      	ldr	r3, [pc, #260]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ab0:	4a3f      	ldr	r2, [pc, #252]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006ab2:	f023 0304 	bic.w	r3, r3, #4
 8006ab6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006aba:	4b3d      	ldr	r3, [pc, #244]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d121      	bne.n	8006b0a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e112      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d107      	bne.n	8006ae2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ad2:	4b37      	ldr	r3, [pc, #220]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d115      	bne.n	8006b0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e106      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d107      	bne.n	8006afa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006aea:	4b31      	ldr	r3, [pc, #196]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d109      	bne.n	8006b0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e0fa      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006afa:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e0f2      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006b0a:	4b29      	ldr	r3, [pc, #164]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f023 0203 	bic.w	r2, r3, #3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	4926      	ldr	r1, [pc, #152]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006b1c:	f7fb f8fe 	bl	8001d1c <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d112      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b2a:	e00a      	b.n	8006b42 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b2c:	f7fb f8f6 	bl	8001d1c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e0d6      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b42:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f003 030c 	and.w	r3, r3, #12
 8006b4a:	2b0c      	cmp	r3, #12
 8006b4c:	d1ee      	bne.n	8006b2c <HAL_RCC_ClockConfig+0x204>
 8006b4e:	e044      	b.n	8006bda <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d112      	bne.n	8006b7e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b58:	e00a      	b.n	8006b70 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b5a:	f7fb f8df 	bl	8001d1c <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e0bf      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b70:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f003 030c 	and.w	r3, r3, #12
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d1ee      	bne.n	8006b5a <HAL_RCC_ClockConfig+0x232>
 8006b7c:	e02d      	b.n	8006bda <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d123      	bne.n	8006bce <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b86:	e00a      	b.n	8006b9e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b88:	f7fb f8c8 	bl	8001d1c <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e0a8      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b9e:	4b04      	ldr	r3, [pc, #16]	@ (8006bb0 <HAL_RCC_ClockConfig+0x288>)
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1ee      	bne.n	8006b88 <HAL_RCC_ClockConfig+0x260>
 8006baa:	e016      	b.n	8006bda <HAL_RCC_ClockConfig+0x2b2>
 8006bac:	40022000 	.word	0x40022000
 8006bb0:	46020c00 	.word	0x46020c00
 8006bb4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bb8:	f7fb f8b0 	bl	8001d1c <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e090      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bce:	4b4a      	ldr	r3, [pc, #296]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f003 030c 	and.w	r3, r3, #12
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d1ee      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d010      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	4b43      	ldr	r3, [pc, #268]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d208      	bcs.n	8006c08 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006bf6:	4b40      	ldr	r3, [pc, #256]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f023 020f 	bic.w	r2, r3, #15
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	493d      	ldr	r1, [pc, #244]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c08:	4b3c      	ldr	r3, [pc, #240]	@ (8006cfc <HAL_RCC_ClockConfig+0x3d4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d210      	bcs.n	8006c38 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c16:	4b39      	ldr	r3, [pc, #228]	@ (8006cfc <HAL_RCC_ClockConfig+0x3d4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f023 020f 	bic.w	r2, r3, #15
 8006c1e:	4937      	ldr	r1, [pc, #220]	@ (8006cfc <HAL_RCC_ClockConfig+0x3d4>)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c26:	4b35      	ldr	r3, [pc, #212]	@ (8006cfc <HAL_RCC_ClockConfig+0x3d4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d001      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e05b      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d010      	beq.n	8006c66 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	4b2b      	ldr	r3, [pc, #172]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d208      	bcs.n	8006c66 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006c54:	4b28      	ldr	r3, [pc, #160]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	4925      	ldr	r1, [pc, #148]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d012      	beq.n	8006c98 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	4b20      	ldr	r3, [pc, #128]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	091b      	lsrs	r3, r3, #4
 8006c7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d209      	bcs.n	8006c98 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006c84:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	4919      	ldr	r1, [pc, #100]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d010      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	695a      	ldr	r2, [r3, #20]
 8006ca8:	4b13      	ldr	r3, [pc, #76]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d208      	bcs.n	8006cc6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006cb4:	4b10      	ldr	r3, [pc, #64]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	490d      	ldr	r1, [pc, #52]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006cc6:	f000 f821 	bl	8006d0c <HAL_RCC_GetSysClockFreq>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <HAL_RCC_ClockConfig+0x3d0>)
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	490a      	ldr	r1, [pc, #40]	@ (8006d00 <HAL_RCC_ClockConfig+0x3d8>)
 8006cd6:	5ccb      	ldrb	r3, [r1, r3]
 8006cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cdc:	4a09      	ldr	r2, [pc, #36]	@ (8006d04 <HAL_RCC_ClockConfig+0x3dc>)
 8006cde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ce0:	4b09      	ldr	r3, [pc, #36]	@ (8006d08 <HAL_RCC_ClockConfig+0x3e0>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fa ff8f 	bl	8001c08 <HAL_InitTick>
 8006cea:	4603      	mov	r3, r0
 8006cec:	73fb      	strb	r3, [r7, #15]

  return status;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	46020c00 	.word	0x46020c00
 8006cfc:	40022000 	.word	0x40022000
 8006d00:	08008fc4 	.word	0x08008fc4
 8006d04:	20000000 	.word	0x20000000
 8006d08:	20000004 	.word	0x20000004

08006d0c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b08b      	sub	sp, #44	@ 0x2c
 8006d10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d1a:	4b78      	ldr	r3, [pc, #480]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f003 030c 	and.w	r3, r3, #12
 8006d22:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d24:	4b75      	ldr	r3, [pc, #468]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_GetSysClockFreq+0x34>
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b0c      	cmp	r3, #12
 8006d38:	d121      	bne.n	8006d7e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d11e      	bne.n	8006d7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006d40:	4b6e      	ldr	r3, [pc, #440]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006d4c:	4b6b      	ldr	r3, [pc, #428]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d52:	0b1b      	lsrs	r3, r3, #12
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d5a:	e005      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006d5c:	4b67      	ldr	r3, [pc, #412]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	0f1b      	lsrs	r3, r3, #28
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d68:	4a65      	ldr	r2, [pc, #404]	@ (8006f00 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d70:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d110      	bne.n	8006d9a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006d7c:	e00d      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f003 030c 	and.w	r3, r3, #12
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d102      	bne.n	8006d90 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d8a:	4b5e      	ldr	r3, [pc, #376]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006d8c:	623b      	str	r3, [r7, #32]
 8006d8e:	e004      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d101      	bne.n	8006d9a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d96:	4b5c      	ldr	r3, [pc, #368]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006d98:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2b0c      	cmp	r3, #12
 8006d9e:	f040 80a5 	bne.w	8006eec <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006da2:	4b56      	ldr	r3, [pc, #344]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006dac:	4b53      	ldr	r3, [pc, #332]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db0:	0a1b      	lsrs	r3, r3, #8
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006dba:	4b50      	ldr	r3, [pc, #320]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbe:	091b      	lsrs	r3, r3, #4
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dca:	08db      	lsrs	r3, r3, #3
 8006dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	fb02 f303 	mul.w	r3, r2, r3
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d003      	beq.n	8006df0 <HAL_RCC_GetSysClockFreq+0xe4>
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d022      	beq.n	8006e34 <HAL_RCC_GetSysClockFreq+0x128>
 8006dee:	e043      	b.n	8006e78 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8006f0c <HAL_RCC_GetSysClockFreq+0x200>
 8006dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e02:	4b3e      	ldr	r3, [pc, #248]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006e12:	ed97 6a01 	vldr	s12, [r7, #4]
 8006e16:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006f10 <HAL_RCC_GetSysClockFreq+0x204>
 8006e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e32:	e046      	b.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3e:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8006f14 <HAL_RCC_GetSysClockFreq+0x208>
 8006e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e46:	4b2d      	ldr	r3, [pc, #180]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006e56:	ed97 6a01 	vldr	s12, [r7, #4]
 8006e5a:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006f10 <HAL_RCC_GetSysClockFreq+0x204>
 8006e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e76:	e024      	b.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e90:	4b1a      	ldr	r3, [pc, #104]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e98:	ee07 3a90 	vmov	s15, r3
 8006e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006ea0:	ed97 6a01 	vldr	s12, [r7, #4]
 8006ea4:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8006f10 <HAL_RCC_GetSysClockFreq+0x204>
 8006ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006eb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ebc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ec0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8006efc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec6:	0e1b      	lsrs	r3, r3, #24
 8006ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ecc:	3301      	adds	r3, #1
 8006ece:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee6:	ee17 3a90 	vmov	r3, s15
 8006eea:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006eec:	6a3b      	ldr	r3, [r7, #32]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	372c      	adds	r7, #44	@ 0x2c
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	46020c00 	.word	0x46020c00
 8006f00:	08008fd4 	.word	0x08008fd4
 8006f04:	00f42400 	.word	0x00f42400
 8006f08:	02faf080 	.word	0x02faf080
 8006f0c:	4b742400 	.word	0x4b742400
 8006f10:	46000000 	.word	0x46000000
 8006f14:	4c3ebc20 	.word	0x4c3ebc20

08006f18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006f1c:	f7ff fef6 	bl	8006d0c <HAL_RCC_GetSysClockFreq>
 8006f20:	4602      	mov	r2, r0
 8006f22:	4b07      	ldr	r3, [pc, #28]	@ (8006f40 <HAL_RCC_GetHCLKFreq+0x28>)
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	4906      	ldr	r1, [pc, #24]	@ (8006f44 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006f2c:	5ccb      	ldrb	r3, [r1, r3]
 8006f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f32:	4a05      	ldr	r2, [pc, #20]	@ (8006f48 <HAL_RCC_GetHCLKFreq+0x30>)
 8006f34:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006f36:	4b04      	ldr	r3, [pc, #16]	@ (8006f48 <HAL_RCC_GetHCLKFreq+0x30>)
 8006f38:	681b      	ldr	r3, [r3, #0]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	46020c00 	.word	0x46020c00
 8006f44:	08008fc4 	.word	0x08008fc4
 8006f48:	20000000 	.word	0x20000000

08006f4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f54:	4b3e      	ldr	r3, [pc, #248]	@ (8007050 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f62:	f7fe fde7 	bl	8005b34 <HAL_PWREx_GetVoltageRange>
 8006f66:	6178      	str	r0, [r7, #20]
 8006f68:	e019      	b.n	8006f9e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f6a:	4b39      	ldr	r3, [pc, #228]	@ (8007050 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f70:	4a37      	ldr	r2, [pc, #220]	@ (8007050 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f72:	f043 0304 	orr.w	r3, r3, #4
 8006f76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006f7a:	4b35      	ldr	r3, [pc, #212]	@ (8007050 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f88:	f7fe fdd4 	bl	8005b34 <HAL_PWREx_GetVoltageRange>
 8006f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f8e:	4b30      	ldr	r3, [pc, #192]	@ (8007050 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f94:	4a2e      	ldr	r2, [pc, #184]	@ (8007050 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f96:	f023 0304 	bic.w	r3, r3, #4
 8006f9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006fa4:	d003      	beq.n	8006fae <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fac:	d109      	bne.n	8006fc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fb4:	d202      	bcs.n	8006fbc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006fba:	e033      	b.n	8007024 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006fc0:	e030      	b.n	8007024 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fc8:	d208      	bcs.n	8006fdc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd0:	d102      	bne.n	8006fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	e025      	b.n	8007024 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e035      	b.n	8007048 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fe2:	d90f      	bls.n	8007004 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ff0:	d902      	bls.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	e015      	b.n	8007024 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	e012      	b.n	8007024 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006ffe:	2300      	movs	r3, #0
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	e00f      	b.n	8007024 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800700a:	d109      	bne.n	8007020 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007012:	d102      	bne.n	800701a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007014:	2301      	movs	r3, #1
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	e004      	b.n	8007024 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800701a:	2302      	movs	r3, #2
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	e001      	b.n	8007024 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007020:	2301      	movs	r3, #1
 8007022:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007024:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f023 020f 	bic.w	r2, r3, #15
 800702c:	4909      	ldr	r1, [pc, #36]	@ (8007054 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007034:	4b07      	ldr	r3, [pc, #28]	@ (8007054 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	429a      	cmp	r2, r3
 8007040:	d001      	beq.n	8007046 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	46020c00 	.word	0x46020c00
 8007054:	40022000 	.word	0x40022000

08007058 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800705c:	b0b8      	sub	sp, #224	@ 0xe0
 800705e:	af00      	add	r7, sp, #0
 8007060:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007064:	2300      	movs	r3, #0
 8007066:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800706a:	2300      	movs	r3, #0
 800706c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007070:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	f002 0401 	and.w	r4, r2, #1
 800707c:	2500      	movs	r5, #0
 800707e:	ea54 0305 	orrs.w	r3, r4, r5
 8007082:	d00b      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007084:	4bca      	ldr	r3, [pc, #808]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800708a:	f023 0103 	bic.w	r1, r3, #3
 800708e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007094:	4ac6      	ldr	r2, [pc, #792]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007096:	430b      	orrs	r3, r1
 8007098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800709c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f002 0802 	and.w	r8, r2, #2
 80070a8:	f04f 0900 	mov.w	r9, #0
 80070ac:	ea58 0309 	orrs.w	r3, r8, r9
 80070b0:	d00b      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80070b2:	4bbf      	ldr	r3, [pc, #764]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80070b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070b8:	f023 010c 	bic.w	r1, r3, #12
 80070bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c2:	4abb      	ldr	r2, [pc, #748]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80070c4:	430b      	orrs	r3, r1
 80070c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f002 0a04 	and.w	sl, r2, #4
 80070d6:	f04f 0b00 	mov.w	fp, #0
 80070da:	ea5a 030b 	orrs.w	r3, sl, fp
 80070de:	d00b      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80070e0:	4bb3      	ldr	r3, [pc, #716]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80070e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070e6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80070ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f0:	4aaf      	ldr	r2, [pc, #700]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80070f2:	430b      	orrs	r3, r1
 80070f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f002 0308 	and.w	r3, r2, #8
 8007104:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007108:	2300      	movs	r3, #0
 800710a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800710e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007112:	460b      	mov	r3, r1
 8007114:	4313      	orrs	r3, r2
 8007116:	d00b      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007118:	4ba5      	ldr	r3, [pc, #660]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800711a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800711e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007128:	4aa1      	ldr	r2, [pc, #644]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800712a:	430b      	orrs	r3, r1
 800712c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f002 0310 	and.w	r3, r2, #16
 800713c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007140:	2300      	movs	r3, #0
 8007142:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007146:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800714a:	460b      	mov	r3, r1
 800714c:	4313      	orrs	r3, r2
 800714e:	d00b      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007150:	4b97      	ldr	r3, [pc, #604]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007156:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800715a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800715e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007160:	4a93      	ldr	r2, [pc, #588]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007162:	430b      	orrs	r3, r1
 8007164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f002 0320 	and.w	r3, r2, #32
 8007174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007178:	2300      	movs	r3, #0
 800717a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800717e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007182:	460b      	mov	r3, r1
 8007184:	4313      	orrs	r3, r2
 8007186:	d00b      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007188:	4b89      	ldr	r3, [pc, #548]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800718a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800718e:	f023 0107 	bic.w	r1, r3, #7
 8007192:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007198:	4a85      	ldr	r2, [pc, #532]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800719a:	430b      	orrs	r3, r1
 800719c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80071ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071b0:	2300      	movs	r3, #0
 80071b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071ba:	460b      	mov	r3, r1
 80071bc:	4313      	orrs	r3, r2
 80071be:	d00b      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80071c0:	4b7b      	ldr	r3, [pc, #492]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80071c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071c6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80071ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80071ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071d0:	4a77      	ldr	r2, [pc, #476]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80071d2:	430b      	orrs	r3, r1
 80071d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80071e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071e8:	2300      	movs	r3, #0
 80071ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80071ee:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4313      	orrs	r3, r2
 80071f6:	d00b      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80071f8:	4b6d      	ldr	r3, [pc, #436]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80071fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007202:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007208:	4a69      	ldr	r2, [pc, #420]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800720a:	430b      	orrs	r3, r1
 800720c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800721c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007220:	2300      	movs	r3, #0
 8007222:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007226:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800722a:	460b      	mov	r3, r1
 800722c:	4313      	orrs	r3, r2
 800722e:	d00b      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007230:	4b5f      	ldr	r3, [pc, #380]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007236:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800723a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800723e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007240:	4a5b      	ldr	r2, [pc, #364]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007242:	430b      	orrs	r3, r1
 8007244:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007248:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007254:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007258:	2300      	movs	r3, #0
 800725a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800725e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007262:	460b      	mov	r3, r1
 8007264:	4313      	orrs	r3, r2
 8007266:	d00b      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007268:	4b51      	ldr	r3, [pc, #324]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800726a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800726e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007272:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007278:	4a4d      	ldr	r2, [pc, #308]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800727a:	430b      	orrs	r3, r1
 800727c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007280:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800728c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007290:	2300      	movs	r3, #0
 8007292:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007296:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d00b      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80072a0:	4b43      	ldr	r3, [pc, #268]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072a6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80072aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072b0:	4a3f      	ldr	r2, [pc, #252]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072b2:	430b      	orrs	r3, r1
 80072b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80072c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072c8:	2300      	movs	r3, #0
 80072ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80072d2:	460b      	mov	r3, r1
 80072d4:	4313      	orrs	r3, r2
 80072d6:	d00b      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80072d8:	4b35      	ldr	r3, [pc, #212]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072de:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80072e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072e8:	4a31      	ldr	r2, [pc, #196]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072ea:	430b      	orrs	r3, r1
 80072ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80072f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80072fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072fe:	2300      	movs	r3, #0
 8007300:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007302:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007306:	460b      	mov	r3, r1
 8007308:	4313      	orrs	r3, r2
 800730a:	d00c      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800730c:	4b28      	ldr	r3, [pc, #160]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800730e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007312:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007316:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800731a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800731e:	4a24      	ldr	r2, [pc, #144]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007320:	430b      	orrs	r3, r1
 8007322:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007326:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007332:	673b      	str	r3, [r7, #112]	@ 0x70
 8007334:	2300      	movs	r3, #0
 8007336:	677b      	str	r3, [r7, #116]	@ 0x74
 8007338:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800733c:	460b      	mov	r3, r1
 800733e:	4313      	orrs	r3, r2
 8007340:	d04f      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800734a:	2b80      	cmp	r3, #128	@ 0x80
 800734c:	d02d      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x352>
 800734e:	2b80      	cmp	r3, #128	@ 0x80
 8007350:	d827      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007352:	2b60      	cmp	r3, #96	@ 0x60
 8007354:	d02e      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007356:	2b60      	cmp	r3, #96	@ 0x60
 8007358:	d823      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800735a:	2b40      	cmp	r3, #64	@ 0x40
 800735c:	d006      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x314>
 800735e:	2b40      	cmp	r3, #64	@ 0x40
 8007360:	d81f      	bhi.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d009      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8007366:	2b20      	cmp	r3, #32
 8007368:	d011      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800736a:	e01a      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800736c:	4b10      	ldr	r3, [pc, #64]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800736e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007370:	4a0f      	ldr	r2, [pc, #60]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007376:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007378:	e01d      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800737a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800737e:	3308      	adds	r3, #8
 8007380:	4618      	mov	r0, r3
 8007382:	f000 fc0d 	bl	8007ba0 <RCCEx_PLL2_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800738c:	e013      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800738e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007392:	332c      	adds	r3, #44	@ 0x2c
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fc9b 	bl	8007cd0 <RCCEx_PLL3_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80073a0:	e009      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80073a8:	e005      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80073aa:	bf00      	nop
 80073ac:	e003      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80073ae:	bf00      	nop
 80073b0:	46020c00 	.word	0x46020c00
        break;
 80073b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10d      	bne.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80073be:	4bb6      	ldr	r3, [pc, #728]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80073c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073c4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80073c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d0:	4ab1      	ldr	r2, [pc, #708]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80073d2:	430b      	orrs	r3, r1
 80073d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80073d8:	e003      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073da:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80073de:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80073e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80073ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073f0:	2300      	movs	r3, #0
 80073f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073f4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80073f8:	460b      	mov	r3, r1
 80073fa:	4313      	orrs	r3, r2
 80073fc:	d053      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80073fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800740a:	d033      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800740c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007410:	d82c      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007416:	d02f      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800741c:	d826      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800741e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007422:	d008      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007428:	d820      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800742e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007432:	d011      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007434:	e01a      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007436:	4b98      	ldr	r3, [pc, #608]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743a:	4a97      	ldr	r2, [pc, #604]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800743c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007440:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007442:	e01a      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007448:	3308      	adds	r3, #8
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fba8 	bl	8007ba0 <RCCEx_PLL2_Config>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007456:	e010      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800745c:	332c      	adds	r3, #44	@ 0x2c
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fc36 	bl	8007cd0 <RCCEx_PLL3_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800746a:	e006      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007472:	e002      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8007474:	bf00      	nop
 8007476:	e000      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8007478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800747a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10d      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007482:	4b85      	ldr	r3, [pc, #532]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007484:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007488:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800748c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007494:	4a80      	ldr	r2, [pc, #512]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007496:	430b      	orrs	r3, r1
 8007498:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800749c:	e003      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80074a2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80074a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80074b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80074b4:	2300      	movs	r3, #0
 80074b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80074b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80074bc:	460b      	mov	r3, r1
 80074be:	4313      	orrs	r3, r2
 80074c0:	d046      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80074c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074ca:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80074ce:	d028      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80074d0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80074d4:	d821      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80074d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074da:	d022      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80074dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074e0:	d81b      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80074e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074e6:	d01c      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80074e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074ec:	d815      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80074ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f2:	d008      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80074f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f8:	d80f      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d011      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80074fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007502:	d00e      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007504:	e009      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800750a:	3308      	adds	r3, #8
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fb47 	bl	8007ba0 <RCCEx_PLL2_Config>
 8007512:	4603      	mov	r3, r0
 8007514:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007518:	e004      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007520:	e000      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8007522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007524:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10d      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800752c:	4b5a      	ldr	r3, [pc, #360]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800752e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007532:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007536:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800753a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800753e:	4a56      	ldr	r2, [pc, #344]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007540:	430b      	orrs	r3, r1
 8007542:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007546:	e003      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007548:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800754c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800755c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800755e:	2300      	movs	r3, #0
 8007560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007562:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007566:	460b      	mov	r3, r1
 8007568:	4313      	orrs	r3, r2
 800756a:	d03f      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800756c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007574:	2b04      	cmp	r3, #4
 8007576:	d81e      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8007578:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075bf 	.word	0x080075bf
 8007584:	08007595 	.word	0x08007595
 8007588:	080075a3 	.word	0x080075a3
 800758c:	080075bf 	.word	0x080075bf
 8007590:	080075bf 	.word	0x080075bf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007594:	4b40      	ldr	r3, [pc, #256]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	4a3f      	ldr	r2, [pc, #252]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800759a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800759e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80075a0:	e00e      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075a6:	332c      	adds	r3, #44	@ 0x2c
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fb91 	bl	8007cd0 <RCCEx_PLL3_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80075b4:	e004      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80075bc:	e000      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80075be:	bf00      	nop
    }
    if (ret == HAL_OK)
 80075c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10d      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80075c8:	4b33      	ldr	r3, [pc, #204]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80075ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075ce:	f023 0107 	bic.w	r1, r3, #7
 80075d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075da:	4a2f      	ldr	r2, [pc, #188]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80075dc:	430b      	orrs	r3, r1
 80075de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80075e2:	e003      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80075e8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80075ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80075f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80075fa:	2300      	movs	r3, #0
 80075fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80075fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007602:	460b      	mov	r3, r1
 8007604:	4313      	orrs	r3, r2
 8007606:	d04d      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800760c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007610:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007614:	d028      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8007616:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800761a:	d821      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800761c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007620:	d024      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007622:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007626:	d81b      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800762c:	d00e      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800762e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007632:	d815      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d01b      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800763c:	d110      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800763e:	4b16      	ldr	r3, [pc, #88]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007642:	4a15      	ldr	r2, [pc, #84]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007648:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800764a:	e012      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800764c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007650:	332c      	adds	r3, #44	@ 0x2c
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fb3c 	bl	8007cd0 <RCCEx_PLL3_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800765e:	e008      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007666:	e004      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007668:	bf00      	nop
 800766a:	e002      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800766c:	bf00      	nop
 800766e:	e000      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007670:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007672:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007676:	2b00      	cmp	r3, #0
 8007678:	d110      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800767a:	4b07      	ldr	r3, [pc, #28]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800767c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007680:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800768c:	4a02      	ldr	r2, [pc, #8]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800768e:	430b      	orrs	r3, r1
 8007690:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007694:	e006      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007696:	bf00      	nop
 8007698:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80076a0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80076b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076b2:	2300      	movs	r3, #0
 80076b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80076ba:	460b      	mov	r3, r1
 80076bc:	4313      	orrs	r3, r2
 80076be:	f000 80b5 	beq.w	800782c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076c2:	2300      	movs	r3, #0
 80076c4:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076c8:	4b9d      	ldr	r3, [pc, #628]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80076ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d113      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076d6:	4b9a      	ldr	r3, [pc, #616]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80076d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076dc:	4a98      	ldr	r2, [pc, #608]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80076de:	f043 0304 	orr.w	r3, r3, #4
 80076e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80076e6:	4b96      	ldr	r3, [pc, #600]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80076e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80076fe:	4b91      	ldr	r3, [pc, #580]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007702:	4a90      	ldr	r2, [pc, #576]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007704:	f043 0301 	orr.w	r3, r3, #1
 8007708:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800770a:	f7fa fb07 	bl	8001d1c <HAL_GetTick>
 800770e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007712:	e00b      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007714:	f7fa fb02 	bl	8001d1c <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d903      	bls.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800772a:	e005      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800772c:	4b85      	ldr	r3, [pc, #532]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800772e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0ed      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8007738:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800773c:	2b00      	cmp	r3, #0
 800773e:	d165      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007740:	4b7f      	ldr	r3, [pc, #508]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800774a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800774e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007752:	2b00      	cmp	r3, #0
 8007754:	d023      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8007756:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800775a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800775e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007762:	4293      	cmp	r3, r2
 8007764:	d01b      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007766:	4b76      	ldr	r3, [pc, #472]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800776c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007770:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007774:	4b72      	ldr	r3, [pc, #456]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800777a:	4a71      	ldr	r2, [pc, #452]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800777c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007780:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007784:	4b6e      	ldr	r3, [pc, #440]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800778a:	4a6d      	ldr	r2, [pc, #436]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800778c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007790:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007794:	4a6a      	ldr	r2, [pc, #424]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800779a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800779e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d019      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077aa:	f7fa fab7 	bl	8001d1c <HAL_GetTick>
 80077ae:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077b2:	e00d      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b4:	f7fa fab2 	bl	8001d1c <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077be:	1ad2      	subs	r2, r2, r3
 80077c0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d903      	bls.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80077ce:	e006      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077d0:	4b5b      	ldr	r3, [pc, #364]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80077d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0ea      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80077de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10d      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80077e6:	4b56      	ldr	r3, [pc, #344]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80077e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80077f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077f8:	4a51      	ldr	r2, [pc, #324]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80077fa:	430b      	orrs	r3, r1
 80077fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007800:	e008      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007802:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007806:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800780a:	e003      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007810:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007814:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8007818:	2b01      	cmp	r3, #1
 800781a:	d107      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800781c:	4b48      	ldr	r3, [pc, #288]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800781e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007822:	4a47      	ldr	r2, [pc, #284]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007824:	f023 0304 	bic.w	r3, r3, #4
 8007828:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800782c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007838:	643b      	str	r3, [r7, #64]	@ 0x40
 800783a:	2300      	movs	r3, #0
 800783c:	647b      	str	r3, [r7, #68]	@ 0x44
 800783e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007842:	460b      	mov	r3, r1
 8007844:	4313      	orrs	r3, r2
 8007846:	d042      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800784c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007850:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007854:	d022      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007856:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800785a:	d81b      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800785c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007860:	d011      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007862:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007866:	d815      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d019      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800786c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007870:	d110      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007876:	3308      	adds	r3, #8
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f991 	bl	8007ba0 <RCCEx_PLL2_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007884:	e00d      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007886:	4b2e      	ldr	r3, [pc, #184]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788a:	4a2d      	ldr	r2, [pc, #180]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800788c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007890:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007892:	e006      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800789a:	e002      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800789c:	bf00      	nop
 800789e:	e000      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80078a0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80078a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10d      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80078aa:	4b25      	ldr	r3, [pc, #148]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80078ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078b0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80078b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078bc:	4a20      	ldr	r2, [pc, #128]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80078be:	430b      	orrs	r3, r1
 80078c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80078c4:	e003      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80078ca:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80078da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078dc:	2300      	movs	r3, #0
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80078e4:	460b      	mov	r3, r1
 80078e6:	4313      	orrs	r3, r2
 80078e8:	d032      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80078ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078f6:	d00b      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80078f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078fc:	d804      	bhi.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007906:	d007      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800790e:	e004      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007910:	bf00      	nop
 8007912:	e002      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007914:	bf00      	nop
 8007916:	e000      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007918:	bf00      	nop
    }
    if (ret == HAL_OK)
 800791a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800791e:	2b00      	cmp	r3, #0
 8007920:	d112      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007922:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007924:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007928:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800792c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007930:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007934:	4a02      	ldr	r2, [pc, #8]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007936:	430b      	orrs	r3, r1
 8007938:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800793c:	e008      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800793e:	bf00      	nop
 8007940:	46020c00 	.word	0x46020c00
 8007944:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007948:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800794c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800795c:	633b      	str	r3, [r7, #48]	@ 0x30
 800795e:	2300      	movs	r3, #0
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
 8007962:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007966:	460b      	mov	r3, r1
 8007968:	4313      	orrs	r3, r2
 800796a:	d019      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800796c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007970:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007978:	d105      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800797a:	4b88      	ldr	r3, [pc, #544]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800797c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797e:	4a87      	ldr	r2, [pc, #540]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007984:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007986:	4b85      	ldr	r3, [pc, #532]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800798c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007990:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007994:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007998:	4a80      	ldr	r2, [pc, #512]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800799a:	430b      	orrs	r3, r1
 800799c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80079a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80079ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079ae:	2300      	movs	r3, #0
 80079b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80079b6:	460b      	mov	r3, r1
 80079b8:	4313      	orrs	r3, r2
 80079ba:	d00c      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80079bc:	4b77      	ldr	r3, [pc, #476]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80079be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079ce:	4973      	ldr	r1, [pc, #460]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80079d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80079e2:	623b      	str	r3, [r7, #32]
 80079e4:	2300      	movs	r3, #0
 80079e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80079ec:	460b      	mov	r3, r1
 80079ee:	4313      	orrs	r3, r2
 80079f0:	d00c      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80079f2:	4b6a      	ldr	r3, [pc, #424]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80079f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80079fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a04:	4965      	ldr	r1, [pc, #404]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007a0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61fb      	str	r3, [r7, #28]
 8007a1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a22:	460b      	mov	r3, r1
 8007a24:	4313      	orrs	r3, r2
 8007a26:	d00c      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007a28:	4b5c      	ldr	r3, [pc, #368]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007a2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a2e:	f023 0218 	bic.w	r2, r3, #24
 8007a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007a3a:	4958      	ldr	r1, [pc, #352]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007a42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	d032      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007a5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a6a:	d105      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	4a4a      	ldr	r2, [pc, #296]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a76:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a84:	d108      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 f887 	bl	8007ba0 <RCCEx_PLL2_Config>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8007a98:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10d      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007aa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007aa6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007aaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007aae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007ab2:	493a      	ldr	r1, [pc, #232]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007aba:	e003      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007ac0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007ad0:	60bb      	str	r3, [r7, #8]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
 8007ad6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ada:	460b      	mov	r3, r1
 8007adc:	4313      	orrs	r3, r2
 8007ade:	d03a      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007ae0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aec:	d00e      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007aee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007af2:	d815      	bhi.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d017      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8007af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007afc:	d110      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007afe:	4b27      	ldr	r3, [pc, #156]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b02:	4a26      	ldr	r2, [pc, #152]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b08:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007b0a:	e00e      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b10:	3308      	adds	r3, #8
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 f844 	bl	8007ba0 <RCCEx_PLL2_Config>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007b1e:	e004      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007b26:	e000      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8007b28:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007b2a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10d      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007b32:	4b1a      	ldr	r3, [pc, #104]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007b3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b44:	4915      	ldr	r1, [pc, #84]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007b4c:	e003      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007b52:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007b56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	2300      	movs	r3, #0
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	d00c      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007b72:	4b0a      	ldr	r3, [pc, #40]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b78:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b84:	4905      	ldr	r1, [pc, #20]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007b8c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	37e0      	adds	r7, #224	@ 0xe0
 8007b94:	46bd      	mov	sp, r7
 8007b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b9a:	bf00      	nop
 8007b9c:	46020c00 	.word	0x46020c00

08007ba0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007ba8:	4b47      	ldr	r3, [pc, #284]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a46      	ldr	r2, [pc, #280]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007bae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bb2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bb4:	f7fa f8b2 	bl	8001d1c <HAL_GetTick>
 8007bb8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bba:	e008      	b.n	8007bce <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bbc:	f7fa f8ae 	bl	8001d1c <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d901      	bls.n	8007bce <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e077      	b.n	8007cbe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bce:	4b3e      	ldr	r3, [pc, #248]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1f0      	bne.n	8007bbc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007bda:	4b3b      	ldr	r3, [pc, #236]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bde:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007be2:	f023 0303 	bic.w	r3, r3, #3
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6811      	ldr	r1, [r2, #0]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	6852      	ldr	r2, [r2, #4]
 8007bee:	3a01      	subs	r2, #1
 8007bf0:	0212      	lsls	r2, r2, #8
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	4934      	ldr	r1, [pc, #208]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007bfa:	4b33      	ldr	r3, [pc, #204]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bfe:	4b33      	ldr	r3, [pc, #204]	@ (8007ccc <RCCEx_PLL2_Config+0x12c>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6892      	ldr	r2, [r2, #8]
 8007c06:	3a01      	subs	r2, #1
 8007c08:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	68d2      	ldr	r2, [r2, #12]
 8007c10:	3a01      	subs	r2, #1
 8007c12:	0252      	lsls	r2, r2, #9
 8007c14:	b292      	uxth	r2, r2
 8007c16:	4311      	orrs	r1, r2
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6912      	ldr	r2, [r2, #16]
 8007c1c:	3a01      	subs	r2, #1
 8007c1e:	0412      	lsls	r2, r2, #16
 8007c20:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007c24:	4311      	orrs	r1, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6952      	ldr	r2, [r2, #20]
 8007c2a:	3a01      	subs	r2, #1
 8007c2c:	0612      	lsls	r2, r2, #24
 8007c2e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007c32:	430a      	orrs	r2, r1
 8007c34:	4924      	ldr	r1, [pc, #144]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007c3a:	4b23      	ldr	r3, [pc, #140]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3e:	f023 020c 	bic.w	r2, r3, #12
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	4920      	ldr	r1, [pc, #128]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	491c      	ldr	r1, [pc, #112]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c60:	f023 0310 	bic.w	r3, r3, #16
 8007c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c66:	4b18      	ldr	r3, [pc, #96]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c6e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	69d2      	ldr	r2, [r2, #28]
 8007c76:	00d2      	lsls	r2, r2, #3
 8007c78:	4913      	ldr	r1, [pc, #76]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007c7e:	4b12      	ldr	r3, [pc, #72]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c82:	4a11      	ldr	r2, [pc, #68]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c84:	f043 0310 	orr.w	r3, r3, #16
 8007c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c94:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c96:	f7fa f841 	bl	8001d1c <HAL_GetTick>
 8007c9a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c9c:	e008      	b.n	8007cb0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c9e:	f7fa f83d 	bl	8001d1c <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d901      	bls.n	8007cb0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e006      	b.n	8007cbe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cb0:	4b05      	ldr	r3, [pc, #20]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0f0      	beq.n	8007c9e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0

}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	46020c00 	.word	0x46020c00
 8007ccc:	80800000 	.word	0x80800000

08007cd0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007cd8:	4b47      	ldr	r3, [pc, #284]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a46      	ldr	r2, [pc, #280]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ce2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ce4:	f7fa f81a 	bl	8001d1c <HAL_GetTick>
 8007ce8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cea:	e008      	b.n	8007cfe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cec:	f7fa f816 	bl	8001d1c <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d901      	bls.n	8007cfe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e077      	b.n	8007dee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d12:	f023 0303 	bic.w	r3, r3, #3
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6811      	ldr	r1, [r2, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6852      	ldr	r2, [r2, #4]
 8007d1e:	3a01      	subs	r2, #1
 8007d20:	0212      	lsls	r2, r2, #8
 8007d22:	430a      	orrs	r2, r1
 8007d24:	4934      	ldr	r1, [pc, #208]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	630b      	str	r3, [r1, #48]	@ 0x30
 8007d2a:	4b33      	ldr	r3, [pc, #204]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d2e:	4b33      	ldr	r3, [pc, #204]	@ (8007dfc <RCCEx_PLL3_Config+0x12c>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6892      	ldr	r2, [r2, #8]
 8007d36:	3a01      	subs	r2, #1
 8007d38:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	68d2      	ldr	r2, [r2, #12]
 8007d40:	3a01      	subs	r2, #1
 8007d42:	0252      	lsls	r2, r2, #9
 8007d44:	b292      	uxth	r2, r2
 8007d46:	4311      	orrs	r1, r2
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6912      	ldr	r2, [r2, #16]
 8007d4c:	3a01      	subs	r2, #1
 8007d4e:	0412      	lsls	r2, r2, #16
 8007d50:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007d54:	4311      	orrs	r1, r2
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6952      	ldr	r2, [r2, #20]
 8007d5a:	3a01      	subs	r2, #1
 8007d5c:	0612      	lsls	r2, r2, #24
 8007d5e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007d62:	430a      	orrs	r2, r1
 8007d64:	4924      	ldr	r1, [pc, #144]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007d6a:	4b23      	ldr	r3, [pc, #140]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6e:	f023 020c 	bic.w	r2, r3, #12
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	4920      	ldr	r1, [pc, #128]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	491c      	ldr	r1, [pc, #112]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d90:	f023 0310 	bic.w	r3, r3, #16
 8007d94:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d96:	4b18      	ldr	r3, [pc, #96]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d9e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	69d2      	ldr	r2, [r2, #28]
 8007da6:	00d2      	lsls	r2, r2, #3
 8007da8:	4913      	ldr	r1, [pc, #76]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007dae:	4b12      	ldr	r3, [pc, #72]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db2:	4a11      	ldr	r2, [pc, #68]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007db4:	f043 0310 	orr.w	r3, r3, #16
 8007db8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007dba:	4b0f      	ldr	r3, [pc, #60]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dc4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007dc6:	f7f9 ffa9 	bl	8001d1c <HAL_GetTick>
 8007dca:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dcc:	e008      	b.n	8007de0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dce:	f7f9 ffa5 	bl	8001d1c <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d901      	bls.n	8007de0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e006      	b.n	8007dee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007de0:	4b05      	ldr	r3, [pc, #20]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d0f0      	beq.n	8007dce <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	46020c00 	.word	0x46020c00
 8007dfc:	80800000 	.word	0x80800000

08007e00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e0fb      	b.n	800800a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a7f      	ldr	r2, [pc, #508]	@ (8008014 <HAL_SPI_Init+0x214>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d004      	beq.n	8007e26 <HAL_SPI_Init+0x26>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a7d      	ldr	r2, [pc, #500]	@ (8008018 <HAL_SPI_Init+0x218>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	e000      	b.n	8007e28 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007e26:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a78      	ldr	r2, [pc, #480]	@ (8008014 <HAL_SPI_Init+0x214>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d004      	beq.n	8007e42 <HAL_SPI_Init+0x42>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a76      	ldr	r2, [pc, #472]	@ (8008018 <HAL_SPI_Init+0x218>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d105      	bne.n	8007e4e <HAL_SPI_Init+0x4e>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	2b0f      	cmp	r3, #15
 8007e48:	d901      	bls.n	8007e4e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e0dd      	b.n	800800a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fbac 	bl	80085ac <SPI_GetPacketSize>
 8007e54:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8008014 <HAL_SPI_Init+0x214>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <HAL_SPI_Init+0x6a>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a6c      	ldr	r2, [pc, #432]	@ (8008018 <HAL_SPI_Init+0x218>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d102      	bne.n	8007e70 <HAL_SPI_Init+0x70>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d816      	bhi.n	8007e9e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e74:	4a69      	ldr	r2, [pc, #420]	@ (800801c <HAL_SPI_Init+0x21c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00e      	beq.n	8007e98 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a68      	ldr	r2, [pc, #416]	@ (8008020 <HAL_SPI_Init+0x220>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d009      	beq.n	8007e98 <HAL_SPI_Init+0x98>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a66      	ldr	r2, [pc, #408]	@ (8008024 <HAL_SPI_Init+0x224>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d004      	beq.n	8007e98 <HAL_SPI_Init+0x98>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a65      	ldr	r2, [pc, #404]	@ (8008028 <HAL_SPI_Init+0x228>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d104      	bne.n	8007ea2 <HAL_SPI_Init+0xa2>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b10      	cmp	r3, #16
 8007e9c:	d901      	bls.n	8007ea2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e0b3      	b.n	800800a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7f9 fcaa 	bl	8001810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007ede:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ee8:	d119      	bne.n	8007f1e <HAL_SPI_Init+0x11e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ef2:	d103      	bne.n	8007efc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d008      	beq.n	8007f0e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10c      	bne.n	8007f1e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f0c:	d107      	bne.n	8007f1e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <HAL_SPI_Init+0x14a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	2b06      	cmp	r3, #6
 8007f30:	d90b      	bls.n	8007f4a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	e007      	b.n	8007f5a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	69da      	ldr	r2, [r3, #28]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f62:	431a      	orrs	r2, r3
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6c:	ea42 0103 	orr.w	r1, r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fc6:	ea42 0103 	orr.w	r1, r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	46002000 	.word	0x46002000
 8008018:	56002000 	.word	0x56002000
 800801c:	40013000 	.word	0x40013000
 8008020:	50013000 	.word	0x50013000
 8008024:	40003800 	.word	0x40003800
 8008028:	50003800 	.word	0x50003800

0800802c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b08a      	sub	sp, #40	@ 0x28
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008044:	6a3a      	ldr	r2, [r7, #32]
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	4013      	ands	r3, r2
 800804a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008054:	2300      	movs	r3, #0
 8008056:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800805e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3330      	adds	r3, #48	@ 0x30
 8008066:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800806e:	2b00      	cmp	r3, #0
 8008070:	d010      	beq.n	8008094 <HAL_SPI_IRQHandler+0x68>
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	f003 0308 	and.w	r3, r3, #8
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	699a      	ldr	r2, [r3, #24]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800808a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f9c9 	bl	8008424 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008092:	e19a      	b.n	80083ca <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809a:	2b00      	cmp	r3, #0
 800809c:	d113      	bne.n	80080c6 <HAL_SPI_IRQHandler+0x9a>
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10e      	bne.n	80080c6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
    handled = 1UL;
 80080c2:	2301      	movs	r3, #1
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10f      	bne.n	80080f0 <HAL_SPI_IRQHandler+0xc4>
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d105      	bne.n	80080f0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
    handled = 1UL;
 80080ec:	2301      	movs	r3, #1
 80080ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	f003 0320 	and.w	r3, r3, #32
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10f      	bne.n	800811a <HAL_SPI_IRQHandler+0xee>
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800810a:	2b00      	cmp	r3, #0
 800810c:	d105      	bne.n	800811a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
    handled = 1UL;
 8008116:	2301      	movs	r3, #1
 8008118:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	2b00      	cmp	r3, #0
 800811e:	f040 814f 	bne.w	80083c0 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 808b 	beq.w	8008244 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	699a      	ldr	r2, [r3, #24]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0208 	orr.w	r2, r2, #8
 800813c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	699a      	ldr	r2, [r3, #24]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0210 	orr.w	r2, r2, #16
 800814c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800815c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0208 	bic.w	r2, r2, #8
 800816c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d13d      	bne.n	80081f8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800817c:	e036      	b.n	80081ec <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	2b0f      	cmp	r3, #15
 8008184:	d90b      	bls.n	800819e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800818e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008190:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008196:	1d1a      	adds	r2, r3, #4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800819c:	e01d      	b.n	80081da <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	2b07      	cmp	r3, #7
 80081a4:	d90b      	bls.n	80081be <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	8812      	ldrh	r2, [r2, #0]
 80081ae:	b292      	uxth	r2, r2
 80081b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081b6:	1c9a      	adds	r2, r3, #2
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	66da      	str	r2, [r3, #108]	@ 0x6c
 80081bc:	e00d      	b.n	80081da <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081ca:	7812      	ldrb	r2, [r2, #0]
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1c2      	bne.n	800817e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f937 	bl	800846c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f8fd 	bl	8008410 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008216:	e0d8      	b.n	80083ca <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008218:	7cfb      	ldrb	r3, [r7, #19]
 800821a:	2b05      	cmp	r3, #5
 800821c:	d103      	bne.n	8008226 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f8ec 	bl	80083fc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008224:	e0ce      	b.n	80083c4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008226:	7cfb      	ldrb	r3, [r7, #19]
 8008228:	2b04      	cmp	r3, #4
 800822a:	d103      	bne.n	8008234 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f8db 	bl	80083e8 <HAL_SPI_RxCpltCallback>
    return;
 8008232:	e0c7      	b.n	80083c4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008234:	7cfb      	ldrb	r3, [r7, #19]
 8008236:	2b03      	cmp	r3, #3
 8008238:	f040 80c4 	bne.w	80083c4 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f8c9 	bl	80083d4 <HAL_SPI_TxCpltCallback>
    return;
 8008242:	e0bf      	b.n	80083c4 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 80bd 	beq.w	80083ca <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00f      	beq.n	800827a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008260:	f043 0204 	orr.w	r2, r3, #4
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	699a      	ldr	r2, [r3, #24]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008278:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00f      	beq.n	80082a4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800828a:	f043 0201 	orr.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	699a      	ldr	r2, [r3, #24]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082a2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00f      	beq.n	80082ce <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082b4:	f043 0208 	orr.w	r2, r3, #8
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	699a      	ldr	r2, [r3, #24]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082cc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00f      	beq.n	80082f8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0220 	orr.w	r2, r2, #32
 80082f6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d062      	beq.n	80083c8 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0201 	bic.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8008320:	f023 0303 	bic.w	r3, r3, #3
 8008324:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800832c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008330:	d13e      	bne.n	80083b0 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008340:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008348:	2b00      	cmp	r3, #0
 800834a:	d015      	beq.n	8008378 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008352:	4a1f      	ldr	r2, [pc, #124]	@ (80083d0 <HAL_SPI_IRQHandler+0x3a4>)
 8008354:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800835c:	4618      	mov	r0, r3
 800835e:	f7fc fafb 	bl	8004958 <HAL_DMA_Abort_IT>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800836e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800837e:	2b00      	cmp	r3, #0
 8008380:	d022      	beq.n	80083c8 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008388:	4a11      	ldr	r2, [pc, #68]	@ (80083d0 <HAL_SPI_IRQHandler+0x3a4>)
 800838a:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008392:	4618      	mov	r0, r3
 8008394:	f7fc fae0 	bl	8004958 <HAL_DMA_Abort_IT>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d014      	beq.n	80083c8 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80083ae:	e00b      	b.n	80083c8 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f829 	bl	8008410 <HAL_SPI_ErrorCallback>
    return;
 80083be:	e003      	b.n	80083c8 <HAL_SPI_IRQHandler+0x39c>
    return;
 80083c0:	bf00      	nop
 80083c2:	e002      	b.n	80083ca <HAL_SPI_IRQHandler+0x39e>
    return;
 80083c4:	bf00      	nop
 80083c6:	e000      	b.n	80083ca <HAL_SPI_IRQHandler+0x39e>
    return;
 80083c8:	bf00      	nop
  }
}
 80083ca:	3728      	adds	r7, #40	@ 0x28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	08008439 	.word	0x08008439

080083d4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008444:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f7ff ffd6 	bl	8008410 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008464:	bf00      	nop
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	699a      	ldr	r2, [r3, #24]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0208 	orr.w	r2, r2, #8
 800848a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0210 	orr.w	r2, r2, #16
 800849a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f022 0201 	bic.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	6812      	ldr	r2, [r2, #0]
 80084b6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80084ba:	f023 0303 	bic.w	r3, r3, #3
 80084be:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689a      	ldr	r2, [r3, #8]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80084ce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d014      	beq.n	8008506 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f003 0320 	and.w	r3, r3, #32
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00f      	beq.n	8008506 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	699a      	ldr	r2, [r3, #24]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0220 	orr.w	r2, r2, #32
 8008504:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b03      	cmp	r3, #3
 8008510:	d014      	beq.n	800853c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00f      	beq.n	800853c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008522:	f043 0204 	orr.w	r2, r3, #4
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	699a      	ldr	r2, [r3, #24]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800853a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00f      	beq.n	8008566 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800854c:	f043 0201 	orr.w	r2, r3, #1
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699a      	ldr	r2, [r3, #24]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008564:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00f      	beq.n	8008590 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008576:	f043 0208 	orr.w	r2, r3, #8
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800858e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80085a0:	bf00      	nop
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	3301      	adds	r3, #1
 80085bc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	3301      	adds	r3, #1
 80085c4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	3307      	adds	r3, #7
 80085ca:	08db      	lsrs	r3, r3, #3
 80085cc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	fb02 f303 	mul.w	r3, r2, r3
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d12e      	bne.n	8008656 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d101      	bne.n	8008606 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008602:	2302      	movs	r3, #2
 8008604:	e028      	b.n	8008658 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2202      	movs	r2, #2
 8008612:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f022 0201 	bic.w	r2, r2, #1
 8008624:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008632:	ea42 0103 	orr.w	r1, r2, r3
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	e000      	b.n	8008658 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
  }
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e049      	b.n	800870a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d106      	bne.n	8008690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7f9 fa3a 	bl	8001b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	3304      	adds	r3, #4
 80086a0:	4619      	mov	r1, r3
 80086a2:	4610      	mov	r0, r2
 80086a4:	f000 fa4e 	bl	8008b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b01      	cmp	r3, #1
 8008726:	d001      	beq.n	800872c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e072      	b.n	8008812 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0201 	orr.w	r2, r2, #1
 8008742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a35      	ldr	r2, [pc, #212]	@ (8008820 <HAL_TIM_Base_Start_IT+0x10c>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d040      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a34      	ldr	r2, [pc, #208]	@ (8008824 <HAL_TIM_Base_Start_IT+0x110>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d03b      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008760:	d036      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800876a:	d031      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a2d      	ldr	r2, [pc, #180]	@ (8008828 <HAL_TIM_Base_Start_IT+0x114>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d02c      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a2c      	ldr	r2, [pc, #176]	@ (800882c <HAL_TIM_Base_Start_IT+0x118>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d027      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a2a      	ldr	r2, [pc, #168]	@ (8008830 <HAL_TIM_Base_Start_IT+0x11c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d022      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a29      	ldr	r2, [pc, #164]	@ (8008834 <HAL_TIM_Base_Start_IT+0x120>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d01d      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a27      	ldr	r2, [pc, #156]	@ (8008838 <HAL_TIM_Base_Start_IT+0x124>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d018      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a26      	ldr	r2, [pc, #152]	@ (800883c <HAL_TIM_Base_Start_IT+0x128>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d013      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a24      	ldr	r2, [pc, #144]	@ (8008840 <HAL_TIM_Base_Start_IT+0x12c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d00e      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a23      	ldr	r2, [pc, #140]	@ (8008844 <HAL_TIM_Base_Start_IT+0x130>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d009      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a21      	ldr	r2, [pc, #132]	@ (8008848 <HAL_TIM_Base_Start_IT+0x134>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d004      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0xbc>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a20      	ldr	r2, [pc, #128]	@ (800884c <HAL_TIM_Base_Start_IT+0x138>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d115      	bne.n	80087fc <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008850 <HAL_TIM_Base_Start_IT+0x13c>)
 80087d8:	4013      	ands	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b06      	cmp	r3, #6
 80087e0:	d015      	beq.n	800880e <HAL_TIM_Base_Start_IT+0xfa>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087e8:	d011      	beq.n	800880e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f042 0201 	orr.w	r2, r2, #1
 80087f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fa:	e008      	b.n	800880e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f042 0201 	orr.w	r2, r2, #1
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	e000      	b.n	8008810 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800880e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	40012c00 	.word	0x40012c00
 8008824:	50012c00 	.word	0x50012c00
 8008828:	40000400 	.word	0x40000400
 800882c:	50000400 	.word	0x50000400
 8008830:	40000800 	.word	0x40000800
 8008834:	50000800 	.word	0x50000800
 8008838:	40000c00 	.word	0x40000c00
 800883c:	50000c00 	.word	0x50000c00
 8008840:	40013400 	.word	0x40013400
 8008844:	50013400 	.word	0x50013400
 8008848:	40014000 	.word	0x40014000
 800884c:	50014000 	.word	0x50014000
 8008850:	00010007 	.word	0x00010007

08008854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d020      	beq.n	80088b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01b      	beq.n	80088b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f06f 0202 	mvn.w	r2, #2
 8008888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f931 	bl	8008b06 <HAL_TIM_IC_CaptureCallback>
 80088a4:	e005      	b.n	80088b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f923 	bl	8008af2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f934 	bl	8008b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d020      	beq.n	8008904 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f003 0304 	and.w	r3, r3, #4
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d01b      	beq.n	8008904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f06f 0204 	mvn.w	r2, #4
 80088d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2202      	movs	r2, #2
 80088da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f90b 	bl	8008b06 <HAL_TIM_IC_CaptureCallback>
 80088f0:	e005      	b.n	80088fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f8fd 	bl	8008af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f90e 	bl	8008b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f003 0308 	and.w	r3, r3, #8
 800890a:	2b00      	cmp	r3, #0
 800890c:	d020      	beq.n	8008950 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01b      	beq.n	8008950 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f06f 0208 	mvn.w	r2, #8
 8008920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2204      	movs	r2, #4
 8008926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f8e5 	bl	8008b06 <HAL_TIM_IC_CaptureCallback>
 800893c:	e005      	b.n	800894a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f8d7 	bl	8008af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f8e8 	bl	8008b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f003 0310 	and.w	r3, r3, #16
 8008956:	2b00      	cmp	r3, #0
 8008958:	d020      	beq.n	800899c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f003 0310 	and.w	r3, r3, #16
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01b      	beq.n	800899c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f06f 0210 	mvn.w	r2, #16
 800896c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2208      	movs	r2, #8
 8008972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f8bf 	bl	8008b06 <HAL_TIM_IC_CaptureCallback>
 8008988:	e005      	b.n	8008996 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f8b1 	bl	8008af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f8c2 	bl	8008b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00c      	beq.n	80089c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f003 0301 	and.w	r3, r3, #1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d007      	beq.n	80089c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f06f 0201 	mvn.w	r2, #1
 80089b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7f8 fbc0 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d104      	bne.n	80089d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00c      	beq.n	80089ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d007      	beq.n	80089ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80089e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fa77 	bl	8008edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00c      	beq.n	8008a12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d007      	beq.n	8008a12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fa6f 	bl	8008ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00c      	beq.n	8008a36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d007      	beq.n	8008a36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f87c 	bl	8008b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f003 0320 	and.w	r3, r3, #32
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00c      	beq.n	8008a5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d007      	beq.n	8008a5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f06f 0220 	mvn.w	r2, #32
 8008a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fa37 	bl	8008ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00c      	beq.n	8008a7e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d007      	beq.n	8008a7e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fa43 	bl	8008f04 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00c      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d007      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa3b 	bl	8008f18 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00c      	beq.n	8008ac6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d007      	beq.n	8008ac6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fa33 	bl	8008f2c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00c      	beq.n	8008aea <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fa2b 	bl	8008f40 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008aea:	bf00      	nop
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008afa:	bf00      	nop
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b0e:	bf00      	nop
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
	...

08008b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a6b      	ldr	r2, [pc, #428]	@ (8008d04 <TIM_Base_SetConfig+0x1c0>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d02b      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a6a      	ldr	r2, [pc, #424]	@ (8008d08 <TIM_Base_SetConfig+0x1c4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d027      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b6a:	d023      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b72:	d01f      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a65      	ldr	r2, [pc, #404]	@ (8008d0c <TIM_Base_SetConfig+0x1c8>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d01b      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a64      	ldr	r2, [pc, #400]	@ (8008d10 <TIM_Base_SetConfig+0x1cc>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d017      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a63      	ldr	r2, [pc, #396]	@ (8008d14 <TIM_Base_SetConfig+0x1d0>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d013      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a62      	ldr	r2, [pc, #392]	@ (8008d18 <TIM_Base_SetConfig+0x1d4>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d00f      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a61      	ldr	r2, [pc, #388]	@ (8008d1c <TIM_Base_SetConfig+0x1d8>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d00b      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a60      	ldr	r2, [pc, #384]	@ (8008d20 <TIM_Base_SetConfig+0x1dc>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d007      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a5f      	ldr	r2, [pc, #380]	@ (8008d24 <TIM_Base_SetConfig+0x1e0>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d003      	beq.n	8008bb4 <TIM_Base_SetConfig+0x70>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a5e      	ldr	r2, [pc, #376]	@ (8008d28 <TIM_Base_SetConfig+0x1e4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d108      	bne.n	8008bc6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a4e      	ldr	r2, [pc, #312]	@ (8008d04 <TIM_Base_SetConfig+0x1c0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d043      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a4d      	ldr	r2, [pc, #308]	@ (8008d08 <TIM_Base_SetConfig+0x1c4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d03f      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bdc:	d03b      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008be4:	d037      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a48      	ldr	r2, [pc, #288]	@ (8008d0c <TIM_Base_SetConfig+0x1c8>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d033      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a47      	ldr	r2, [pc, #284]	@ (8008d10 <TIM_Base_SetConfig+0x1cc>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d02f      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a46      	ldr	r2, [pc, #280]	@ (8008d14 <TIM_Base_SetConfig+0x1d0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d02b      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a45      	ldr	r2, [pc, #276]	@ (8008d18 <TIM_Base_SetConfig+0x1d4>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d027      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a44      	ldr	r2, [pc, #272]	@ (8008d1c <TIM_Base_SetConfig+0x1d8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d023      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a43      	ldr	r2, [pc, #268]	@ (8008d20 <TIM_Base_SetConfig+0x1dc>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d01f      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a42      	ldr	r2, [pc, #264]	@ (8008d24 <TIM_Base_SetConfig+0x1e0>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d01b      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a41      	ldr	r2, [pc, #260]	@ (8008d28 <TIM_Base_SetConfig+0x1e4>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d017      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a40      	ldr	r2, [pc, #256]	@ (8008d2c <TIM_Base_SetConfig+0x1e8>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d013      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a3f      	ldr	r2, [pc, #252]	@ (8008d30 <TIM_Base_SetConfig+0x1ec>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00f      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a3e      	ldr	r2, [pc, #248]	@ (8008d34 <TIM_Base_SetConfig+0x1f0>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d00b      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a3d      	ldr	r2, [pc, #244]	@ (8008d38 <TIM_Base_SetConfig+0x1f4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d007      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a3c      	ldr	r2, [pc, #240]	@ (8008d3c <TIM_Base_SetConfig+0x1f8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d003      	beq.n	8008c56 <TIM_Base_SetConfig+0x112>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a3b      	ldr	r2, [pc, #236]	@ (8008d40 <TIM_Base_SetConfig+0x1fc>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d108      	bne.n	8008c68 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	689a      	ldr	r2, [r3, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a1e      	ldr	r2, [pc, #120]	@ (8008d04 <TIM_Base_SetConfig+0x1c0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d023      	beq.n	8008cd6 <TIM_Base_SetConfig+0x192>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a1d      	ldr	r2, [pc, #116]	@ (8008d08 <TIM_Base_SetConfig+0x1c4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d01f      	beq.n	8008cd6 <TIM_Base_SetConfig+0x192>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a22      	ldr	r2, [pc, #136]	@ (8008d24 <TIM_Base_SetConfig+0x1e0>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d01b      	beq.n	8008cd6 <TIM_Base_SetConfig+0x192>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a21      	ldr	r2, [pc, #132]	@ (8008d28 <TIM_Base_SetConfig+0x1e4>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d017      	beq.n	8008cd6 <TIM_Base_SetConfig+0x192>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a20      	ldr	r2, [pc, #128]	@ (8008d2c <TIM_Base_SetConfig+0x1e8>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d013      	beq.n	8008cd6 <TIM_Base_SetConfig+0x192>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8008d30 <TIM_Base_SetConfig+0x1ec>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00f      	beq.n	8008cd6 <TIM_Base_SetConfig+0x192>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8008d34 <TIM_Base_SetConfig+0x1f0>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00b      	beq.n	8008cd6 <TIM_Base_SetConfig+0x192>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d38 <TIM_Base_SetConfig+0x1f4>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d007      	beq.n	8008cd6 <TIM_Base_SetConfig+0x192>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d3c <TIM_Base_SetConfig+0x1f8>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d003      	beq.n	8008cd6 <TIM_Base_SetConfig+0x192>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8008d40 <TIM_Base_SetConfig+0x1fc>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d103      	bne.n	8008cde <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	691a      	ldr	r2, [r3, #16]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f043 0204 	orr.w	r2, r3, #4
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	601a      	str	r2, [r3, #0]
}
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	40012c00 	.word	0x40012c00
 8008d08:	50012c00 	.word	0x50012c00
 8008d0c:	40000400 	.word	0x40000400
 8008d10:	50000400 	.word	0x50000400
 8008d14:	40000800 	.word	0x40000800
 8008d18:	50000800 	.word	0x50000800
 8008d1c:	40000c00 	.word	0x40000c00
 8008d20:	50000c00 	.word	0x50000c00
 8008d24:	40013400 	.word	0x40013400
 8008d28:	50013400 	.word	0x50013400
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	50014000 	.word	0x50014000
 8008d34:	40014400 	.word	0x40014400
 8008d38:	50014400 	.word	0x50014400
 8008d3c:	40014800 	.word	0x40014800
 8008d40:	50014800 	.word	0x50014800

08008d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d101      	bne.n	8008d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e097      	b.n	8008e8c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a45      	ldr	r2, [pc, #276]	@ (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d00e      	beq.n	8008da4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a44      	ldr	r2, [pc, #272]	@ (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d009      	beq.n	8008da4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a42      	ldr	r2, [pc, #264]	@ (8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d004      	beq.n	8008da4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a41      	ldr	r2, [pc, #260]	@ (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d108      	bne.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008daa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d040      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a2e      	ldr	r2, [pc, #184]	@ (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d03b      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df0:	d036      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dfa:	d031      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a29      	ldr	r2, [pc, #164]	@ (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d02c      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a28      	ldr	r2, [pc, #160]	@ (8008eac <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d027      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a26      	ldr	r2, [pc, #152]	@ (8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d022      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a25      	ldr	r2, [pc, #148]	@ (8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d01d      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a23      	ldr	r2, [pc, #140]	@ (8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d018      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a22      	ldr	r2, [pc, #136]	@ (8008ebc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d013      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a18      	ldr	r2, [pc, #96]	@ (8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00e      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a17      	ldr	r2, [pc, #92]	@ (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d009      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1b      	ldr	r2, [pc, #108]	@ (8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d004      	beq.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d10c      	bne.n	8008e7a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	40012c00 	.word	0x40012c00
 8008e9c:	50012c00 	.word	0x50012c00
 8008ea0:	40013400 	.word	0x40013400
 8008ea4:	50013400 	.word	0x50013400
 8008ea8:	40000400 	.word	0x40000400
 8008eac:	50000400 	.word	0x50000400
 8008eb0:	40000800 	.word	0x40000800
 8008eb4:	50000800 	.word	0x50000800
 8008eb8:	40000c00 	.word	0x40000c00
 8008ebc:	50000c00 	.word	0x50000c00
 8008ec0:	40014000 	.word	0x40014000
 8008ec4:	50014000 	.word	0x50014000

08008ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <memset>:
 8008f54:	4402      	add	r2, r0
 8008f56:	4603      	mov	r3, r0
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d100      	bne.n	8008f5e <memset+0xa>
 8008f5c:	4770      	bx	lr
 8008f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f62:	e7f9      	b.n	8008f58 <memset+0x4>

08008f64 <__libc_init_array>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	4d0d      	ldr	r5, [pc, #52]	@ (8008f9c <__libc_init_array+0x38>)
 8008f68:	2600      	movs	r6, #0
 8008f6a:	4c0d      	ldr	r4, [pc, #52]	@ (8008fa0 <__libc_init_array+0x3c>)
 8008f6c:	1b64      	subs	r4, r4, r5
 8008f6e:	10a4      	asrs	r4, r4, #2
 8008f70:	42a6      	cmp	r6, r4
 8008f72:	d109      	bne.n	8008f88 <__libc_init_array+0x24>
 8008f74:	4d0b      	ldr	r5, [pc, #44]	@ (8008fa4 <__libc_init_array+0x40>)
 8008f76:	2600      	movs	r6, #0
 8008f78:	4c0b      	ldr	r4, [pc, #44]	@ (8008fa8 <__libc_init_array+0x44>)
 8008f7a:	f000 f817 	bl	8008fac <_init>
 8008f7e:	1b64      	subs	r4, r4, r5
 8008f80:	10a4      	asrs	r4, r4, #2
 8008f82:	42a6      	cmp	r6, r4
 8008f84:	d105      	bne.n	8008f92 <__libc_init_array+0x2e>
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f8c:	3601      	adds	r6, #1
 8008f8e:	4798      	blx	r3
 8008f90:	e7ee      	b.n	8008f70 <__libc_init_array+0xc>
 8008f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f96:	3601      	adds	r6, #1
 8008f98:	4798      	blx	r3
 8008f9a:	e7f2      	b.n	8008f82 <__libc_init_array+0x1e>
 8008f9c:	08009094 	.word	0x08009094
 8008fa0:	08009094 	.word	0x08009094
 8008fa4:	08009094 	.word	0x08009094
 8008fa8:	08009098 	.word	0x08009098

08008fac <_init>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr

08008fb8 <_fini>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	bf00      	nop
 8008fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fbe:	bc08      	pop	{r3}
 8008fc0:	469e      	mov	lr, r3
 8008fc2:	4770      	bx	lr
